<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player is evolving, ok no :)

//Destroy some objects first
with (obj_cape_fly) instance_destroy();
with (obj_spinner) instance_destroy();

//Old / New powerup
oldpowerup = 0;
newpowerup = 0;

//Loops
loop = 3;
loopnumb = 0;

//Screenshot
back = -1;

//If the screen can freeze
if (global.screenfreeze == true) {
    
    //Make the player invisible
    if (instance_exists(obj_playerparent)) {
    
        //Obtain the current sprite from the player
        sprite_index = obj_playerparent.sprite_index;
        
        //Obtain the current frame from the player
        image_index = obj_playerparent.image_index;
        
        //Do not animate
        image_speed = 0;
        
        //Make invisible
        obj_playerparent.visible = false;
        
        //Obtain cape
        if (obj_cape.visible == true) {
        
            //Obtain sprite from cape
            capesprite = obj_cape.sprite_index;
            capeframe = obj_cape.image_index;
            obj_cape.image_alpha = 0;
        }
        
        //Obtain rider sprite and frame
        if (global.mount == 1) {

            riderframe = obj_yoshi.f;
            m_ypos = obj_yoshi.m_ypos;
            obj_yoshi.m_vis = 0;
        }
        
        //Stay in position
        x = obj_playerparent.x;
        y = obj_playerparent.y;
        
        //Obtain the current facing direction from the player
        image_xscale = obj_playerparent.xscale;
    }
    
    //Make following objects invisible
    with (obj_water) visible = 0;
    with (obj_water_tides) visible = 0;
    with (obj_effectsparent) visible = 0;
    
    //Start animation
    alarm[0] = 1;
}

//Otherwise, transform instantly
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the new powerup frame

//Set the powerup set in 'newpowerup
global.powerup = newpowerup;

//Obtain sprite from player
sprite_index = obj_playerparent.sprite_index;

//If the animation does not longer loop, exit
if (loop == 0) {

    //If the screen did froze
    if (global.screenfreeze == true) {

        //Delete screenshot
        background_delete(back);
        
        //Activate instances
        instance_activate_all();
        
        //Make cape visible
        with (obj_cape) image_alpha = 1;
        
        //Make player on yoshi visible
        with (obj_yoshi) m_vis = 1;
        
        //With the player
        with (obj_playerparent) {
        
            //Disable gravity
            gravity_enable = true;
            
            //Resume movement
            event_user(14);
            
            //Make invisible
            visible = true;
            
            //Reset alarm 0
            if (alarm[0] &gt; -1)
                alarm[0] = 90;
        }
    }
    
    //Otherwise
    else {
    
        //Reset alarm 0
        if (alarm[0] &gt; -1)
            alarm[0] = 90;
    }
    
    //Destroy
    instance_destroy();
}
else {

    //Decrement loop
    loop--;
    
    //Create a poof of smoke
    if (loop == 2) 
    &amp;&amp; ((global.powerup == cs_pow_cape) || (global.powerup == cs_pow_firecape)) {
    
        with (instance_create(x, y, obj_smoke)) {
        
            sprite_index = spr_smoke_32;
            depth = -8;
        }
    }
}

//Change sprite again
alarm[1] = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the old powerup frame

//Set the powerup set in 'newpowerup
global.powerup = oldpowerup;

//Obtain sprite from player
sprite_index = obj_playerparent.sprite_index;

//Next frame
alarm[2] = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeze all object and begin animation

//Create a screenshot
back = background_create_from_surface(application_surface, 0, 0, global.gw*2, global.gh*2, 0, 0);

//Deactivate all instances
instance_deactivate_all(1);

//Activate HUD
instance_activate_object(obj_hud);

//Activate cape
instance_activate_object(obj_cape);
with (obj_cape) image_alpha = 0;

//Activate water tides
instance_activate_object(obj_water);
with (obj_water) visible = 1;

//Activate water tides
instance_activate_object(obj_water_tides);
with (obj_water_tides) visible = 1;

//Activate effects
instance_activate_object(obj_effectsparent);
with (obj_effectsparent) visible = 1;

//Activate rain object
instance_activate_object(obj_rainmaker);
with (obj_rainmaker) event_user(0);

//Activate controller object
instance_activate_object(obj_controller);

//Activate the player object
instance_activate_object(obj_playerparent);
with (obj_playerparent) {

    //Disable gravity
    gravity_enable = false;
    
    //Save movement
    event_user(13);
    
    //Make invisible
    visible = false;
}

//Deactivate particles
with (obj_rainmaker) event_user(0);

//Make the object visible
visible = true;

//Start loop
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//If the animation has been set.
if (background_exists(back)) {

    //Disable alpha blending.
    draw_enable_alphablend(0);
    
    //Draw the screenshot
    draw_background(back, view_xview[0], view_yview[0]);
    
    //Enable alpha blending.
    draw_enable_alphablend(1);
}

//Draw the cape
if (global.powerup == cs_pow_cape)
|| (global.powerup == cs_pow_firecape) {

    if (global.mount == 0)
        draw_sprite_ext(capesprite, capeframe, round(x), round(y)+1, image_xscale, 1, 0, c_white, image_alpha);
    else {

        if (riderframe == 0)
            draw_sprite_ext(capesprite, capeframe, round(x-6*sign(image_xscale)), round(y)-8, image_xscale, 1, 0, c_white, image_alpha);
        else
            draw_sprite_ext(capesprite, capeframe, round(x-6*sign(image_xscale)), round(y)-6, image_xscale, 1, 0, c_white, image_alpha);    
    }        
}

//Set the palette
pal_swap_set(spr_palette_master, global.powerup);

//Draw the player
if (global.mount == 1)
    draw_sprite_ext(player_ride(), riderframe, round(x-6*sign(image_xscale)), round(y)-7+m_ypos, image_xscale, 1, 0, c_white, image_alpha);
else
    draw_sprite_ext(sprite_index, image_index, round(x), round(y)+1, image_xscale, 1, 0, c_white, image_alpha);
    
//Reset palette shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
