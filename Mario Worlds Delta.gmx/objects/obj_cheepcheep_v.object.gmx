<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cheepcheep</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_cheepcheep</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vertical Cheep-Cheep

//Inherit event
event_inherited();

//How vulnerable is this enemy to various items?
vulnerable = 0;

//How vulnerable is this enemy to the player?
stomp = 2;

//How vulnerable is this enemy to yoshi?
edible = 0;

//Facing direction
xscale = 1;

//Animate
image_speed = 0.125;

//Sets turning endpoint
prevswim = 0;
yy = y;

//Death Sprite
deathsprite = spr_cheepcheep_dead;

//Flopping facing direction
flopdir = 1;

//Start moving or flop
if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
    alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving

//Set turning endpoint
if (prevswim == 0) {

    prevswim = 1;
    yy = y;
}

//Start moving
if (!instance_exists(obj_playerparent))
|| (obj_playerparent.y &lt; y)
    vspeed = -0.5;
else
    vspeed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vertical Cheep Cheep logic

//Inherit default event
event_inherited();

//If not flopping
if (swimming == 1) {

    //If the turning endpoint has not been set
    if (prevswim == 0) {
    
        vspeed = 0.5*sign(xscale);
        prevswim = 1;
        yy = y;
    }

    //Set the sprite
    sprite_index = spr_cheepcheep;
    
    //Animate
    image_speed = 0.125;
    
    //Do not apply gravity
    gravity = 0;
    
    //If the cheep cheep is moving to the right.
    if (vspeed &gt; 0) {
        
        //Change direction
        if (y &gt; yy+32)
            vspeed = -vspeed;
            
        //Otherwise
        else if ((collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_semisolid, 0, 0))
             || (collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_slopeparent, 1, 0)))
                vspeed = -vspeed;
    }
    
    //Otherwise, if the cheep cheep is moving to the left.
    else if (vspeed &lt; 0) {
            
        //Change direction.
        if (y &lt; yy-32)
        || (!collision_line(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))    
            vspeed = -vspeed;
    }
    
    //Face towards the player
    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x)
        xscale = -1;
    else
        xscale = 1;
}

//Otherwise, if flopping
else if (swimming == 0) {

    //Reset turning endpoint
    prevswim = 0;

    //Set the flopping sprite
    sprite_index = spr_cheepcheep_flop;
    
    //Do not animate
    image_speed = 0;
    
    //If no gravity
    if (gravity == 0) {
    
        //Change frame
        image_index = !image_index;
    
        //Choose flop
        flopdir = choose(1, -1);
        
        //Set horizontal speed
        hspeed = 1*sign(flopdir);
        
        //Set the vertical speed
        vspeed = -2;
    }
    
    //Set facing direction
    xscale = flopdir;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor collision

//Check if above a slope
slope = player_inslope();

//If moving down
if (vspeed &gt;= 0) {

    //Check for a semisolid
    var semisolid = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+vspeed, obj_semisolid, 0, 0);
    
    //If there's a semisolid below
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
    &amp;&amp; (!collision_rectangle(x-2, bbox_bottom, x+2, bbox_bottom+4, obj_slopeparent, 1, 0))
        y = semisolid.bbox_top-(sprite_height-sprite_get_yoffset(sprite_index));
}

//If moving down and there's no gravity
if ((gravity == 0) &amp;&amp; (vspeed &gt;= 0)) {

    //Embed into the slope to ensure correct slope mechanics
    if (collision_rectangle(x-2, bbox_bottom, x+2, bbox_bottom+4, obj_slopeparent, 1, 0))
    &amp;&amp; (!collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom-4, obj_slopeparent, 1, 0))
        y += 4;
    
    ///Handle slope collisions
    if (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom, obj_slopeparent, 1, 0))
    &amp;&amp; (!collision_rectangle(x-2, bbox_bottom-8, x+2, bbox_bottom-8, obj_slopeparent, 1, 0)) {
    
        while (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom, obj_slopeparent, 1, 0))
            y--;
    }
}

//If not swimming
if (swimming == 0) {

    //Check for floor objects
    if (collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_semisolid, 0, 0))
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_bottom-4, bbox_right, bbox_bottom-4, obj_semisolid, 0, 0))
    || (collision_rectangle(x-2, bbox_bottom+1, x+2, bbox_bottom+1, obj_slopeparent,1,0)) {
    
        //Stop vertical movement
        gravity = 0;
        if (vspeed &gt; 0)
            vspeed = 0;
    }
    else {
    
        //Set the gravity when not underwater
        if (!swimming) {
        
            //Gravity
            gravity = 0.2;
            
            //Cap vertical speed
            if (vspeed &gt; 4)
                vspeed = 4;
        }
        
        //Otherwise, set the gravity when underwater
        else {
        
            //Gravity
            gravity = 0.1;
            
            //Cap vertical speed
            if (vspeed &gt; 1)
                vspeed = 1;
        }
    }
}

//If moving up...
if (vspeed &lt; 0) {

    //...and the NPC bumps a ceiling
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
    
        //Prevent the NPC from getting embed on the ceiling      
        while ((collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_solid, 1, 0))
        || (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0))) {
        
            y++;
        }
        
        //Stop vertical movement
        vspeed = 0;
    }
}

//Prevent the NPC from overlapping ceiling slopes
if (vspeed != 0) {

    //While the player overlaps a slope
    while (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0)) {
    
        //Move it down
        y++;
        
        //If moving up
        if (vspeed &lt; 0)
            vspeed = 0;
    }            
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
