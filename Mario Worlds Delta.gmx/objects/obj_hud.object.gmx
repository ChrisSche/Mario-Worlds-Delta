<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The In-Level HUD

//Is the level cleared
clear = 0;

//Time
time = 0;

//Multiplier
multiplier = 50;

//Shake
shakex = 0;
shakey = 0;

//Fade
fade = 0;
fadetype = 1;

//Shake the counter
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake 'Time Left' marker

alarm[0] = 2;
if (audio_is_playing(snd_hurry)) {

    shakex = random_range(-1,1);
    shakey = random_range(-1,1);
}
else {

    shakex = 0;
    shakey = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up special effect for the timer text

//Do this only is levelcontrol is active
if (instance_exists(obj_levelcontrol)) {
    
    //Fade timer to red if less than 100 seconds
    if (global.time &gt; -1)
    &amp;&amp; (obj_levelcontrol.leveltime != 0) {
    
        //If there's less than 100 seconds left
        if (global.time &lt;= 100) {
        
            //Fade out
            if (fadetype == -1) {
            
                fade -= 0.05;
                if (fade &lt; 0.05) {
                
                    fade = 0;
                    fadetype = 1;
                }
            }
            
            //Otherwise, fade in
            else {
            
                fade += 0.05;
                if (fade &gt; 1) {
                
                    fade = 1;
                    fadetype = -1;
                }            
            }        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Minimalistic HUD (No Score)

//Set the colour
draw_set_colour(c_black);

//Draw rectangles
draw_rectangle(view_xview[view_current], view_yview[view_current], view_xview[view_current] + view_wview[view_current], view_yview[view_current]+8, false);

//Reset colour
draw_set_colour(c_white);

//Set font
draw_set_font(global.fontnumb);

//Lives
draw_sprite_ext(spr_hud_minimalist_mario, global.player, view_xview[view_current]+8, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+24, view_yview[view_current]-view_yport[view_current], string_format(lives, 2, 0));

//Bonus
draw_sprite_ext(spr_hud_stars, -1, view_xview[view_current]+48, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+64, view_yview[view_current]-view_yport[view_current], string_format(global.bonus, 2, 0));

//Ace Coin Outline
draw_sprite_ext(spr_hud_sma2_acecoins, 2, view_xview[view_current]+88, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);

//Ace Coins
var a = 0;
if (ds_map_size(global.dcoins) &lt; 5) {
    
    repeat (ds_map_size(global.dcoins)) {
        
        draw_sprite_ext(spr_hud_sma2_acecoins, 0, view_xview[view_current]+88+a, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);    
            a += 8;
    }
}
else
draw_sprite_ext(spr_hud_sma2_acecoins, 1, view_xview[view_current]+88, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);

//Reserve Box
draw_sprite_ext(spr_hud_minimalist_reserve, -1, view_xview[view_current] + view_wview[view_current]/2 + 9, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_hud_minimalist_reserve_item, global.reserveitem, view_xview[view_current] + view_wview[view_current]/2 + 17, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);

//Timer
draw_sprite_ext(spr_hud_minimalist_time, -1, view_xview[view_current]+view_wview[view_current]-88+shakex, view_yview[view_current]+shakey-view_yport[view_current], 1, 1, 0, c_white, 1);

//Set font
draw_set_font(global.fontnumbgold);

//Show regular time if the stage is not clear
if (clear == 0) {
    
    if (global.time &gt; -1) {
    
        //If the level has not been cleared and the timer is lower than 100
        if (global.clear == 0)
        &amp;&amp; (global.time &lt;= 100) {
        
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-72+shakex, view_yview[view_current]+shakey-view_yport[view_current], string_format(global.time, 3, false), c_white, c_white, c_white, c_white, 1);
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-72+shakex, view_yview[view_current]+shakey-view_yport[view_current], string_format(global.time, 3, false), c_red, c_red, c_red, c_red, fade);
        }
        else
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-72, view_yview[view_current]-view_yport[view_current], string_format(global.time, 3, 0), c_white, c_white, c_white, c_white, 1);
    }
    else
        draw_text_colour(view_xview[view_current]+view_wview[view_current]-72, view_yview[view_current]-view_yport[view_current], "  0", c_white, c_white, c_white, c_white, 1);
}
else {

    draw_text_colour(view_xview[view_current]+view_wview[view_current]-72, view_yview[view_current]-view_yport[view_current], string_format(obj_hud.time, 3, false), c_white, c_white, c_white, c_white, 1);
}

//Set font
draw_set_font(global.fontnumb);

//Coins
draw_sprite_ext(spr_hud_coins, -1, view_xview[view_current]+view_wview[view_current]-40, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+view_wview[view_current]-24, view_yview[view_current]-view_yport[view_current], string_format(global.coins, 2, false));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Minimalistic HUD

//Set the colour
draw_set_colour(c_black);

//Draw rectangles
draw_rectangle(view_xview[view_current], view_yview[view_current], view_xview[view_current] + view_wview[view_current], view_yview[view_current]+8, false);
draw_rectangle(view_xview[view_current], view_yview[view_current] + view_hview[view_current]-8, view_xview[view_current] + view_wview[view_current], view_yview[view_current] + view_hview[view_current], false);

//Reset colour
draw_set_colour(c_white);

//Set font
draw_set_font(global.fontnumb);

//Lives
draw_sprite_ext(spr_hud_minimalist_mario, global.player, view_xview[view_current]+8, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+24, view_yview[view_current]-view_yport[view_current], string_format(lives, 2, 0));

//Bonus
draw_sprite_ext(spr_hud_stars, -1, view_xview[view_current]+48, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+64, view_yview[view_current]-view_yport[view_current], string_format(global.bonus, 2, 0));

//Ace Coin Outline
draw_sprite_ext(spr_hud_sma2_acecoins, 2, view_xview[view_current]+88, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);

//Ace Coins
var a = 0;
if (ds_map_size(global.dcoins) &lt; 5) {
    
    repeat (ds_map_size(global.dcoins)) {
        
        draw_sprite_ext(spr_hud_sma2_acecoins, 0, view_xview[view_current]+88+a, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);    
            a += 8;
    }
}
else
draw_sprite_ext(spr_hud_sma2_acecoins, 1, view_xview[view_current]+88, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);

//Reserve Box
draw_sprite_ext(spr_hud_minimalist_reserve, -1, view_xview[view_current] + view_wview[view_current]/2 + 9, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_hud_minimalist_reserve_item, global.reserveitem, view_xview[view_current] + view_wview[view_current]/2 + 17, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);

//Timer
draw_sprite_ext(spr_hud_minimalist_time, -1, view_xview[view_current]+view_wview[view_current]-88+shakex, view_yview[view_current]+shakey-view_yport[view_current], 1, 1, 0, c_white, 1);

//Set font
draw_set_font(global.fontnumbgold);

//Show regular time if the stage is not clear
if (clear == 0) {
    
    if (global.time &gt; -1) {
    
        //If the level has not been cleared and the timer is lower than 100
        if (global.clear == 0)
        &amp;&amp; (global.time &lt;= 100) {
        
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-72+shakex, view_yview[view_current]+shakey-view_yport[view_current], string_format(global.time, 3, false), c_white, c_white, c_white, c_white, 1);
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-72+shakex, view_yview[view_current]+shakey-view_yport[view_current], string_format(global.time, 3, false), c_red, c_red, c_red, c_red, fade);
        }
        else
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-72, view_yview[view_current]-view_yport[view_current], string_format(global.time, 3, 0), c_white, c_white, c_white, c_white, 1);
    }
    else
        draw_text_colour(view_xview[view_current]+view_wview[view_current]-72, view_yview[view_current]-view_yport[view_current], "  0", c_white, c_white, c_white, c_white, 1);
}
else {

    draw_text_colour(view_xview[view_current]+view_wview[view_current]-72, view_yview[view_current]-view_yport[view_current], string_format(obj_hud.time, 3, false), c_white, c_white, c_white, c_white, 1);
}

//Set font
draw_set_font(global.fontnumb);

//Coins
draw_sprite_ext(spr_hud_coins, -1, view_xview[view_current]+view_wview[view_current]-40, view_yview[view_current]-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+view_wview[view_current]-24, view_yview[view_current]-view_yport[view_current], string_format(global.coins, 2, false));

//Score
draw_text(view_xview[view_current]+view_wview[view_current]-64, view_yview[view_current]+view_hview[view_current]-8+view_yport[view_current], string_format(score, 7, false));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SMA2 HUD

//Set colour
draw_set_colour(c_white);

//Set font
draw_set_font(global.fontnumb);

//Lives
draw_sprite_ext(spr_hud_sma2_mario, global.player, view_xview[view_current]+8, view_yview[view_current]+8-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+32, view_yview[view_current]+8-view_yport[view_current], string_format(lives, 2, 0));

//Ace Coin Outline
draw_sprite_ext(spr_hud_sma2_acecoins, 2, view_xview[view_current]+8, view_yview[view_current]+16-view_yport[view_current], 1, 1, 0, c_white, 1);

//Ace Coins
var a = 0;
if (ds_map_size(global.dcoins) &lt; 5) {
    
    repeat (ds_map_size(global.dcoins)) {
    
        draw_sprite_ext(spr_hud_sma2_acecoins, 0, view_xview[view_current]+8+a, view_yview[view_current]+16-view_yport[view_current], 1, 1, 0, c_white, 1);    
            a += 8;
    }
}
else
draw_sprite_ext(spr_hud_sma2_acecoins, 1, view_xview[view_current]+8, view_yview[view_current]+16-view_yport[view_current], 1, 1, 0, c_white, 1);

//Set font
draw_set_font(global.fontnumblarge);

//Bonus
draw_sprite_ext(spr_hud_stars, -1, view_xview[view_current]+64, view_yview[view_current]+16-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+88, view_yview[view_current]+8-view_yport[view_current], string_format(global.bonus, 2, 0));

//Reserve Box
draw_sprite_ext(spr_hud_sma2_reserve, -1, view_xview[view_current] + view_wview[view_current]/2, view_yview[view_current]+8-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_hud_reserve_item, global.reserveitem, view_xview[view_current] + view_wview[view_current]/2, view_yview[view_current]+8-view_yport[view_current], 1, 1, 0, c_white, 1);

//Set font
draw_set_font(global.fontnumbgold);

//Timer
draw_sprite_ext(spr_hud_time, -1, view_xview[view_current]+view_wview[view_current]-104+shakex, view_yview[view_current]+8+shakey-view_yport[view_current], 1, 1, 0, c_white, 1);

//Show regular time if the stage is not clear
if (clear == 0) {
    
    if (global.time &gt; -1) {
    
        //If the level has not been cleared and the timer is lower than 100
        if (global.clear == 0)
        &amp;&amp; (global.time &lt;= 100) {
        
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-104+shakex, view_yview[view_current]+16+shakey-view_yport[view_current], string_format(global.time, 3, false), c_white, c_white, c_white, c_white, 1);
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-104+shakex, view_yview[view_current]+16+shakey-view_yport[view_current], string_format(global.time, 3, false), c_red, c_red, c_red, c_red, fade);
        }
        else
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-104, view_yview[view_current]+16-view_yport[view_current], string_format(global.time, 3, 0), c_white, c_white, c_white, c_white, 1);
    }
    else
        draw_text_colour(view_xview[view_current]+view_wview[view_current]-104, view_yview[view_current]+16-view_yport[view_current], "  0", c_white, c_white, c_white, c_white, 1);
}
else {

    draw_text_colour(view_xview[view_current]+view_wview[view_current]-104, view_yview[view_current]+16-view_yport[view_current], string_format(obj_hud.time, 3, false), c_white, c_white, c_white, c_white, 1);
}

//Set font
draw_set_font(global.fontnumb);

//Coins
draw_sprite_ext(spr_hud_sma2_coins, -1, view_xview[view_current]+view_wview[view_current]-48, view_yview[view_current]+8-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+view_wview[view_current]-24, view_yview[view_current]+8-view_yport[view_current], string_format(global.coins, 2, false));

//Score
draw_text(view_xview[view_current]+view_wview[view_current]-64, view_yview[view_current]+16+view_yport[view_current], string_format(score, 7, false));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default HUD

//Set font
draw_set_font(global.fontnumb);

//Set colour
draw_set_colour(c_white);

//Lives
draw_sprite_ext(spr_hud_mario, global.player, view_xview[view_current]+16, view_yview[view_current]+15-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+32, view_yview[view_current]+23, string_format(lives, 2, 0));

//Ace Coins
var a = 0;
if (ds_map_size(global.dcoins) &lt; 5) {
    
    repeat (ds_map_size(global.dcoins)) {
    
        draw_sprite_ext(spr_hud_acecoins, 0, view_xview[view_current]+64+a, view_yview[view_current]+15-view_yport[view_current], 1, 1, 0, c_white, 1);    
            a += 8;
    }
}
else
draw_sprite_ext(spr_hud_acecoins, 1, view_xview[view_current]+64, view_yview[view_current]+15-view_yport[view_current], 1, 1, 0, c_white, 1);

//Set font
draw_set_font(global.fontnumblarge);

//Bonus
draw_sprite_ext(spr_hud_stars, -1, view_xview[view_current]+72, view_yview[view_current]+23-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+96, view_yview[view_current]+15-view_yport[view_current], string_format(global.bonus, 2, 0));

//Reserve Box
draw_sprite_ext(spr_hud_reserve, -1, view_xview[view_current] + view_wview[view_current]/2, view_yview[view_current]+8-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_hud_reserve_item, global.reserveitem, view_xview[view_current] + view_wview[view_current]/2, view_yview[view_current]+14-view_yport[view_current], 1, 1, 0, c_white, 1);

//Set font
draw_set_font(global.fontnumbgold);

//Timer
draw_sprite_ext(spr_hud_time, -1, view_xview[view_current]+view_wview[view_current]-104+shakex, view_yview[view_current]+15+shakey-view_yport[view_current], 1, 1, 0, c_white, 1);

//Show regular time if the stage is not clear
if (clear == 0) {
    
    if (global.time &gt; -1) {
    
        //If the level has not been cleared and the timer is lower than 100
        if (global.clear == 0)
        &amp;&amp; (global.time &lt;= 100) {
        
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-104+shakex, view_yview[view_current]+23+shakey-view_yport[view_current], string_format(global.time, 3, false), c_white, c_white, c_white, c_white, 1);
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-104+shakex, view_yview[view_current]+23+shakey-view_yport[view_current], string_format(global.time, 3, false), c_red, c_red, c_red, c_red, fade);
        }
        else
            draw_text_colour(view_xview[view_current]+view_wview[view_current]-104, view_yview[view_current]+23-view_yport[view_current], string_format(global.time, 3, 0), c_white, c_white, c_white, c_white, 1);
    }
    else
        draw_text_colour(view_xview[view_current]+view_wview[view_current]-104, view_yview[view_current]+23-view_yport[view_current], "  0", c_white, c_white, c_white, c_white, 1);
}
else {

    draw_text_colour(view_xview[view_current]+view_wview[view_current]-104, view_yview[view_current]+23-view_yport[view_current], string_format(obj_hud.time, 3, false), c_white, c_white, c_white, c_white, 1);
}

//Set font
draw_set_font(global.fontnumb);

//Coins
draw_sprite_ext(spr_hud_coins, -1, view_xview[view_current]+view_wview[view_current]-56, view_yview[view_current]+15-view_yport[view_current], 1, 1, 0, c_white, 1);
draw_text(view_xview[view_current]+view_wview[view_current]-32, view_yview[view_current]+15-view_yport[view_current], string_format(global.coins, 2, false));

//Score
draw_text(view_xview[view_current]+view_wview[view_current]-72, view_yview[view_current]+23-view_yport[view_current], string_format(score, 7, false));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD

event_user(obj_controller.hud_type);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the 'Course Clear' HUD

if (clear &gt; 0) {

    //Draw HUD
    switch (obj_controller.hud_type) {
    
        //Minimalist / No Score
        case (3): draw_sprite_ext(spr_hud_clear_noscore, global.player, view_xview[0]+view_wview[0]/2-64, view_yview[0]+64, 1, 1, 0, c_white, 1); break;
        
        //Default
        default: draw_sprite_ext(spr_hud_clear, global.player, view_xview[0]+view_wview[0]/2-64, view_yview[0]+64, 1, 1, 0, c_white, 1); break;
    }
    
    //Set font
    draw_set_font(global.fontnumb);

    //Set colour
    draw_set_colour(c_white);
    
    //Do not draw in Minimalist / No Score
    if (obj_controller.hud_type &lt; 3) {
        
        //Time left
        draw_text(view_xview[0]+view_wview[0]/2-56, view_yview[0]+96, string_format(time, 3, 0));
        
        //Multiplier
        draw_text(view_xview[0]+view_wview[0]/2-24, view_yview[0]+96, string_format(multiplier, 3, 0));
        
        //Time left x 50
        draw_text(view_xview[0]+view_wview[0]/2+8, view_yview[0]+96, string_format(global.time*multiplier, 7, 0));
    }
    
    //Draw bonus stars
    if (clear == 2) {
    
        //Draw 'Bonus!' text
        draw_sprite_ext(spr_hud_clear, 4, view_xview[0]+view_wview[0]/2-64, view_yview[0]+64, 1, 1, 0, c_white, 1);
        
        //Set font
        draw_set_font(global.fontnumblarge);
        
        //Draw bonus stars obtained
        draw_text(view_xview[0]+view_wview[0]/2+32, view_yview[0]+112, string_format(global.bonusadd, 2, 0));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
