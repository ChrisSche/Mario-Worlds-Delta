<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>spr_mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player is entering a fortress/ghost house/etc
            
//Type of castle?
    //Castle - 0
    //Ghost house - 1
    //No Yoshi zone (unused in SMW) - 2
doortype = 0;

//Make the player walk
alarm[0] = 20;

//Progression state on entering
enterstate = 0;

//Timer countdown for each action to occur, I didn't want to use alarms
entertimer = 0;

//Next room
destination = 0;

//Anim
anim = 0;

//Cape anim
anim2 = 0;
capespr = spr_cape;

//Player on Yoshi values, pseudo mount because technically the player still has Yoshi
pseudomount = global.mount;
pseudomountcolour = global.mountcolour;

//Player sprite on Yoshi
m = player_ride();

//Player Y pos
m_ypos = 0;

//Whether the object is swimming
swimming = false;

//Is the object in a slope?
slope = false;

//Castle door
doordistance = 128;
entrancedoor = instance_create(x+128,other.y+16,obj_castledoor);

//Initiate door type
alarm[1] = 1;

//Skip allow
alarm[2] = 6;
allowskip = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow cutscene skip?

allowskip = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set door type and save Yoshi

if global.mount != 0 {

    global.savedmount = 1;
    global.savedmountcolour = pseudomountcolour;
    global.mount = 0;
    global.mountcolour = 0;
    
}

with (entrancedoor) {

    doortype = other.doortype;
    x = other.x + other.doordistance;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Progression alarms

//Alarm 0, is player on a Yoshi?
if enterstate = 0 {
    
    //Time for first stop
    //Without Yoshi, stop closer
    if pseudomount == 0 {
        enterstate = 5;
        alarm[0] = doordistance - 23;
    }
    //With Yoshi, stop farther awawy
    else {
        enterstate = 1;
        alarm[0] = doordistance - 38;
    }
    exit;
}

//Alarm 1
if enterstate = 1 {
    enterstate = 2;
    exit;
}

//Alarm 2
if enterstate = 2.1 {
    ///Jump off Yoshi, enter state 3
    vspeed = -4;
    with instance_create(x,y,obj_yoshi) {
        colour = other.pseudomountcolour;
    }
    pseudomount = 0;
    enterstate = 3;
    audio_play_sound(snd_spin,0,0);
    exit;
}

//Alarm 3
if enterstate = 3.1 {
    enterstate = 4;
    exit;
}

//Alarm 4
if enterstate = 4.1 {
    ///Enter state 5
    enterstate = 5;
    
    //Countdown to next event
    alarm[0] = 65;
    exit;
}

//Alarm 5
if enterstate = 5 {
    enterstate = 6;
    exit;
}

//Alarm 6
if enterstate = 6.1 {
    enterstate = 7;
    alarm[0] = 60;
    exit;
}

//Alarm 7
if enterstate = 7 {
    with obj_castledoor {
        //Let the castle door know where to take the player, and play the open sound
        nextroom = other.destination;
        alarm[0] = 20;
    }
    enterstate = 8;
    alarm[0] = 90;
    exit;
}

//Alarm 8
if enterstate = 8 {
    enterstate = 9;
    alarm[0] = 50;
    exit;
}

//Alarm 9
if enterstate = 9 {
    //Set the depth to behind buildings, because player is entering castle now
    depth = 18;
    alarm[0] = 75;
    enterstate = 10;
    exit;
}

//Alarm 10
if enterstate = 10 {

    //Make door close
    with obj_castledoor {
        open = 3;
    }
    
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the sprites of the Castle cutscene player

//Inherit physics 'End Step' event
event_inherited();

//If not on Yoshi
if pseudomount = 0 {
    
    //Make sure the player gets the correct sprite
    if (gravity == 0) {
    
        //If the player is not moving horizontally
        if (hspeed == 0) {
        
            //Animate the falling cape
            if capespr = spr_cape_down {
            
                anim2 += 0.1;
            
                //If at the end of the animation, turn into fallen cape
                if (anim2 = sprite_get_number(capespr))
                    capespr = spr_cape;
                
            }
        
            //Make the cape fall before it is static
            if capespr = spr_cape_walk {
            
                capespr = spr_cape_down;
                anim2 = 0;
                
            }
        
            //If the player is looking up
            if (enterstate == 7) {
        
                //Set stand pose
                sprite_index = player_idle();
                
                //Do not animate
                image_speed = 0;
                image_index = 1;
            }
            
            //Otherwise, set the idle pose
            else {
            
                //Set walking pose
                sprite_index = player_idle();
                
                //Do not animate
                image_speed = 0;
                image_index = 0;            
            }
        }
        
        //Otherwise
        else {
        
            //Set walk pose
            sprite_index = player_walk();
                    
            //Animate
            image_speed = 0.065+abs(hspeed)/7.5;
            
            //Cape
            if capespr != spr_cape_walk {
            
                //Set cape walk sprite
                capespr = spr_cape_walk;
                
            }
            //Cape animation speed
            anim2 = image_index;
            
        }
    }
    else {
    
        //If the player is underwater
        if (swimming == false) {
        
            //Set the jump sprite
            sprite_index = player_spin();
            
            //Animate spin
            image_speed = 0.5;
            
        }
        else {
        
            //Set the swimming sprite
            sprite_index = player_swim();
            
            //Set the frame
            if (vspeed &lt; 0)
                image_speed = 0.15;
            else {
            
                image_speed = 0;
                image_index = 0;
            }
        }
    }
    
    //Set the big mask if the player is not small
    if (global.powerup != cs_pow_small)
        mask_index = spr_mask_player_big;

} else { //If on Yoshi

    //If the player is not moving vertically
    if (vspeed == 0) {
        //Set the sprite
        sprite_index = spr_yoshi;
        
        //Animate
        if (hspeed == 0) {
        
            image_speed = 0;
            image_index = 0;
        }
        else
            image_speed = 0.065+abs(hspeed)/7.5;             
        }
    else {
        //Set the sprite
        sprite_index = spr_yoshi_jump;
        
        //Do not animate
        image_speed = 0;
        if (vspeed &lt; 0)
            image_index = 0;
        else
            image_index = 1;
    }
    //Animate the cape
    if (hspeed == 0)
        anim2 = 0;
    else
        anim2 += 0.065+abs(hspeed)/7.5;   
    //Player y pos
    if (sprite_index == spr_yoshi)
    || (sprite_index == spr_yoshi_fullmouth) {
    
        if (image_index &gt; 0.99)
            m_ypos = 1;
        else
            m_ypos = 0;
    }
    else
        m_ypos = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fortress movement

//Inherit step event
event_inherited();

//Walk
if (enterstate = 1) || (enterstate = 9) {

    hspeed += 0.0324;
    if (hspeed &gt; 1)
        hspeed = 1;
        
}
//Slow down towards castle
if (enterstate = 2) || (enterstate = 6) {

    hspeed -= 0.0324;
    
    if hspeed &lt;= 0 {
    
        //Next to the castle, dismount Yoshi
        if (enterstate = 2) {
        
            hspeed = 0;
            alarm[0] = 20;
            enterstate = 2.1;
            
        }
        
        //Right in front of the castle, pause
        if (enterstate = 6) {
        
            hspeed = 0;
            alarm[0] = 20;
            enterstate = 6.1;
            
        }
        
    }
    
}

if (enterstate = 3) {

    image_xscale = -1;
    hspeed = -.7;
    alarm[0] = 55;
    enterstate = 3.1;
    
}
if (enterstate = 4) {

    hspeed += 0.0324;
    if (hspeed &gt;= 0) {
    
        hspeed = 0;
        alarm[0] = 20;
        enterstate = 4.1;
        
    }
    
}
if (enterstate = 5) {

    image_xscale = 1;
    hspeed += 0.0324;
    if (hspeed &gt; 1.2)
        hspeed = 1.2;
        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skip scene

if allowskip = true {

    if (input_check_pressed(input.start))
    || (input_check(input.action0))
    || (input_check(input.action2)) {
    
        room_goto(destination);
    
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player animation on Yoshi

//Set up the shader
player_set_palette(id);

//Draw the cape behind
if (global.powerup == cs_pow_cape) {
    if (vspeed != 0) {
        if (vspeed &lt; 0)
            draw_sprite_ext(spr_cape, 1, round(x)-(4*sign(image_xscale)), round(y)-8+m_ypos, image_xscale, 1, 0, c_white, 1);
        else
            draw_sprite_ext(spr_cape_fall, anim2, round(x)-(4*sign(image_xscale)), round(y)-8+m_ypos, image_xscale, 1, 0, c_white, 1);
    } else {
        if (hspeed == 0)
            draw_sprite_ext(spr_cape, 1, round(x)-4, round(y)-8, 1, 1, 0, c_white, 1);
        else
            draw_sprite_ext(spr_cape_walk, anim2, round(x)-(4*sign(image_xscale)), round(y)-8+m_ypos, image_xscale, 1, 0, c_white, 1);
    }
}

//Draw the player
draw_sprite_ext(m, 0, round(x)-(4*sign(image_xscale)), round(y)-8+m_ypos, image_xscale, 1, 0, c_white, 1);

//Draw the cape in front
if (global.powerup == cs_pow_cape) {
    if (hspeed == 0)
        draw_sprite_ext(spr_cape, 1, round(x)-4, round(y)-8, 1, 1, 0, c_white, 1);
}

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

if (pseudomount == 0) {

if (global.powerup == cs_pow_cape) {

    //If not moving vertically
    if (vspeed == 0) {
    
        //If not moving horizontally
        draw_sprite_ext(capespr, anim2, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);
    }
    
    //Otherwise
    else {
    
        //If moving up
        if (vspeed &lt; 0)
            draw_sprite_ext(spr_cape_spin, -1, round(x), round(y)+1, image_xscale, 1, 0, c_white, image_alpha);
        else
            draw_sprite_ext(spr_cape_spin, -1, round(x), round(y)+1, image_xscale, 1, 0, c_white, image_alpha);
    }
}

//Set the palette
player_set_palette(id);

//Draw the player
draw_sprite_ext(sprite_index, -1, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);

//Reset shader
pal_swap_reset();

}

if (pseudomount == 1) {

    //Set the shader
    pal_swap_set(spr_palette_yoshi, pseudomountcolour);
    
    //Draw Yoshi
    draw_sprite_ext(sprite_index, image_index, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);
        
    //Reset shader
    pal_swap_reset();
    
    //Draw the player
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
