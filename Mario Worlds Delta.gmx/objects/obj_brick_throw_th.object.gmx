<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_brick_throw_th</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_holdparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A held blue brick

//Inherit event from parent
event_inherited();

//Animate
image_speed = 1;

//Whether the object is being held
held = 0;

//Whether the object has been kicked
ready = 0;

//Number of kills
hitcombo = 0;

//Snowball angle
angle = 0;

//Whether the brick will harm the player
harmplayer = 0;

//Slowdown animation
alarm[0] = 480;

//Destroy after 600 steps
alarm[1] = 600;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

//Create smoke effect
with (instance_create(x, y+8, obj_smoke)) sprite_index = spr_smoke_16;

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slowdown animation

image_speed = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Held blue brick logic

//If the brick is not held
if (!held) {

    //Previous horizontal speed
    prevhspeed = hspeed;
    
    //Inherit event
    event_inherited();
    
    //If kicked
    if (ready == 1) {
    
        //Increment angle
        angle -= 10*sign(hspeed);
    
        //If the direction changes...
        if (hspeed != prevhspeed) {
        
            //If the item is not outside
            if (!outside_view(8)) {
            
                //Play 'Bump' sound
                audio_stop_play_sound(snd_bump, 0, false);
            }
                
            //Bump blocks
            instance_create(x-8, y, obj_blockbumper);
            
            //Create wall smash
            instance_create(x+(5*sign(prevhspeed)), y+8, obj_shellthump);
            
            //Shatter
            event_user(0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_brick_throw_th">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

//If this block is being held
if (held) {

    //Play 'Kick' sound
    audio_stop_play_sound(snd_kick, 0, false);

    //Get 1000 points
    with (instance_create(x-8, y, obj_score)) event_user(5);
    
    //Create spin thump
    with (instance_create(bbox_left+bbox_right/2, bbox_top+bbox_bottom/2, obj_smoke)) sprite_index = spr_spinthump;
    
    //Destroy both brick
    event_user(0);
    with (other) event_user(0);
}

//Otherwise, just shatter the other one
else {

    if (ready)
        with (other) event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt the player when necessary

//If the block can hurt the player
if (harmplayer == 1)
    with (other) event_user(0);
    
//Otherwise
else {

    //If not moving up
    if (vspeed &gt; -0.5) {
    
        //If the item can be held and the player can hold it
        if (can_hold())
        &amp;&amp; (ready == 0)
        &amp;&amp; (other.bbox_bottom &gt; bbox_top) {
        
            //Make the player hold it
            other.holding = 1;
            
            //Hold
            held = 1;
            
            //Stop movement
            speed = 0;
            gravity = 0;
        }
        
        //Otherwise
        else if ((held == 0) &amp;&amp; (ready == 0)) {
        
            //Play 'Kick' sound
            audio_stop_play_sound(snd_kick, 0, false);
            
            //Create thump
            instance_create(x, y+8, obj_spinthump);
            
            //Kick it
            ready = 1;
            
            //Reset alarms
            alarm[0] = -1;
            alarm[1] = -1;
            image_speed = 0.5;
            
            //If the player is at the left of the block
            if (other.x &lt; x)
                hspeed = (2.7+(abs(obj_playerparent.hspeed)/4));
                
            //Otherwise, if the player is at the right of the block
            else if (other.x &gt; x)
                hspeed = -(2.7+(abs(obj_playerparent.hspeed)/4));                             
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Force pickup

obj_playerparent.holding = 1;
held = 1;
speed = 0;
gravity = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor collision

//Check if above a slope
slope = player_inslope();

//If moving down
if (vspeed &gt;= 0) {

    //Check for a semisolid
    var semisolid = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+vspeed, obj_semisolid, 0, 0);
    
    //If there's a semisolid below
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
    &amp;&amp; (!collision_rectangle(x-2, bbox_bottom, x+2, bbox_bottom+4, obj_slopeparent, 1, 0))
        y = semisolid.bbox_top-(sprite_height-sprite_get_yoffset(sprite_index));
}

//If moving down and there's no gravity
if ((gravity == 0) &amp;&amp; (vspeed &gt;= -1)) {
    
    //Ignore this event if underwater
    if (ready == 0) 
    || ((ready == 1) &amp;&amp; (swimming == 0)) {
        
        //Embed into the slope to ensure correct slope mechanics
        if (collision_rectangle(x-2, bbox_bottom+4, x+2, bbox_bottom+8, obj_slopeparent, 1, 0))
        &amp;&amp; (!collision_rectangle(x-2, bbox_bottom-3, x+2, bbox_bottom-3, obj_slopeparent, 1, 0))
            y += 4;
    }
    
    ///Handle slope collisions
    if (collision_rectangle(x-2, bbox_bottom-3, x+2, bbox_bottom+vspeed-2, obj_slopeparent, 1, 0))
    &amp;&amp; (!collision_rectangle(x-2, bbox_bottom-8, x+2, bbox_bottom-8, obj_slopeparent, 1, 0)) {
    
        if (vspeed &gt; -0.85)   
            while (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom+vspeed-2, obj_slopeparent, 1, 0))
                y--;
    }
}

//Check for floor objects
if (collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_semisolid, 0, 0))
&amp;&amp; (!collision_rectangle(bbox_left, bbox_bottom-4, bbox_right, bbox_bottom-4, obj_semisolid, 0, 0))
|| (collision_rectangle(x-2, bbox_bottom+1, x+2, bbox_bottom+2, obj_slopeparent, 1, 0)) {

    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0) {
    
        //If this object is not ancestor of obj_holdparent
        if (!variable_instance_exists(object_index, "bouncy"))
        &amp;&amp; (!object_is_ancestor(object_index, obj_holdparent))
        || (collision_rectangle(x-2, bbox_bottom+1, x+2, bbox_bottom+2, obj_slopeparent, 1, 0))
            vspeed = 0;
        else {
        
            if (vspeed &gt; 0.5)
                vspeed = -vspeed/2;
            else
                vspeed = 0;
        }
    }
}
else {

    //Set the gravity when not underwater
    if (!swimming) {
    
        //Gravity
        gravity = 0.2;
        
        //Cap vertical speed
        if (vspeed &gt; 4)
            vspeed = 4;
    }
    
    //Otherwise, set the gravity when underwater
    else {
    
        //Gravity
        gravity = 0.025;
        
        //Cap vertical speed
        if (vspeed &gt; 1)
            vspeed = 1;
    }
}

//If moving up...
if (vspeed &lt; 0) {

    //...and the NPC bumps a ceiling
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
    
        //Prevent the NPC from getting embed on the ceiling      
        while ((collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_solid, 1, 0))
        || (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0)))        
            y++;
        
        //Check if there's a block on the way.
        var block = collision_rectangle(bbox_left, bbox_top-2, bbox_right, bbox_top-1, obj_blockparent, 0, 0);
        
        //If there's a block on the way and this object has obj_holdparent as the parent
        if (block) 
        &amp;&amp; ((object_get_parent(object_index) == obj_holdparent) || (object_get_parent(object_index) == obj_holdparent_enemy)) {
            
            //If the block has NOT been hit.
            if (block.ready == 0) {
        
                //Trigger block events
                with (block) {
                
                    //Block is hit
                    ready = 1;
                    
                    //Set vertical speed
                    vspeed = -2.25;
                    alarm[0] = 4;
                    alarm[3] = 4;
                    
                    //Perform block specific events
                    event_user(0);
                }
            }
        }
        
        //Stop vertical movement
        vspeed = 0;
    }
}

//Prevent the NPC from overlapping ceiling slopes
if (vspeed != 0) {

    //While the player overlaps a slope
    while (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0)) {
    
        //Move it down
        y++;
        
        //If moving up
        if (vspeed &lt; 0)
            vspeed = 0;
    }            
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default throw / kick event

//Shatter if inside a solid
if (place_meeting(x, y, obj_solid)) {

    //Play 'Bump' sound
    audio_stop_play_sound(snd_bump, 0, false);
    
    //Play 'Kick' sound
    audio_stop_play_sound(snd_kick, 0, false);
    
    //Get 800 points
    with (instance_create((bbox_left+bbox_right)/2-8, y, obj_score)) event_user(1);
    
    //Shatter it
    event_user(0);
}

//Otherwise
else {

    //If 'Up' is pressed, throw it upwards
    if (input_check(input.up)) {
    
        //Play 'Kick' sound
        audio_stop_play_sound(snd_kick, 0, false);
        
        //Create thump
        instance_create(x, y+8, obj_spinthump);
        
        //If the item is not overlapping a solid
        if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 1, 0)) {
        
            //Set the horizontal speed
            hspeed = obj_playerparent.hspeed/1.5;
            
            //Boost kick
            y--;
            
            //If the item is not in a water surface
            if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
                vspeed = -7;
            else
                vspeed = -3.5;
        }
    }
    
    //Otherwise if 'Down' is pressed, leave it on the ground
    else if (input_check(input.down)) {
        
        //Set the horizontal speed
        hspeed = 0.5*sign(obj_playerparent.xscale);
    }
    
    //Otherwise, if neither 'Up' or 'Down' is pressed
    else {
        
        //If the player has horizontal speed
        if (obj_playerparent.hspeed != 0) {
        
            //Play 'Kick' sound.
            audio_stop_play_sound(snd_kick, 0, false);
    
            //Create thump
            instance_create(x, y+8, obj_spinthump);
            
            //Kick it
            ready = 1;
            
            //Reset alarms
            alarm[0] = -1;
            alarm[1] = -1;
            image_speed = 1;
            
            //If the player is at the left of the block
            if (obj_playerparent.x &lt; x)
                hspeed = (2.7+(abs(obj_playerparent.hspeed)/4));
                
            //Otherwise, if the player is at the right of the block
            else if (obj_playerparent.x &gt; x)
                hspeed = -(2.7+(abs(obj_playerparent.hspeed)/4));
                
            //Otherwise, if the player is turning
            else if (obj_playerparent.turnnow == 1)            
                hspeed = 2.7*sign(obj_playerparent.xscale);                        
        }
        
        //Otherwise, leave it on the ground
        else
            hspeed = 0.5*obj_playerparent.xscale;
    }
    
    //If the object is underwater, begin swim
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
        swimming = true;
    
    //Otherwise, do not swim
    else
        swimming = false;     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shatter it

//If this is a snow block
if (sprite_index == spr_pokey_snowball) {

    //Play 'Bump' sound
    audio_stop_play_sound(snd_bump, 0, false);

    //Repeat 8 times
    repeat (8) {
        
        with (instance_create(x+random_range(-8, 8), y+random(16), obj_cloud)) {
        
            gravity = 0.2;
            hspeed = random(2*sign(other.hspeed)*-1);
            vspeed = random_range(-4, 2);
        }
    }
}

//Otherwise
else {
    
    //Play 'Break' sound
    audio_stop_play_sound(snd_break, 0, false);
    
    //Create shards    
    shard_create(x, y+8, spr_shard_blue, 3, 6, 45);
    shard_create(x, y+8, spr_shard_blue, 1, 6, 60);
    shard_create(x, y+8, spr_shard_blue, 0, 6, 120);
    shard_create(x, y+8, spr_shard_blue, 2, 6, 135);
}
    
//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw throwable block

//If this is a regular throw block
if (sprite_index == spr_brick_throw_th)
    draw_sprite_ext(sprite_index, -1, round(x), round(y), dir, 1, 0, c_white, 1);
    
//Otherwise, draw the indicated sprite
else {

    if (sprite_index == spr_pokey_snowball)
        draw_sprite_ext(spr_pokey_snowball_angle, -1, round(x), round(y)+8, dir, 1, angle, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
