<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ripvanfish</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rip Van Fish

//Inherit event from parent
event_inherited();

//How vulnerable is this enemy to various items?
vulnerable = 0;

//How vulnerable is this enemy to the player?
stomp = 2;

//How vulnerable is this enemy to yoshi?
edible = 0;

//Facing direction
xscale = 1;

//Whether the rip van fish is chasing
chase = 0;

//Death Sprite
deathsprite = spr_ripvanfish_dead;

//Animate
image_speed = 0.03;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop chasing the player

//Set the sleeping sprite
sprite_index = spr_ripvanfish;

//Set default animation speed
image_speed = 0.03;

//Stop chasing
chase = 0;

//Stop movement
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rip Van Fish logic

//If the rip van fish is sleeping
if (chase == 0) 
&amp;&amp; (global.whistle == 0) {

    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //If the player is nearby
        if (obj_playerparent.x &gt; x-32)
        &amp;&amp; (obj_playerparent.y &gt; y-32)
        &amp;&amp; (obj_playerparent.x &lt; x+32)
        &amp;&amp; (obj_playerparent.y &lt; y+32) {
        
            //Set the chasing sprite
            sprite_index = spr_ripvanfish_awaken;
            
            //Set animation speed
            image_speed = 0.2;
            
            //Start chasing
            chase = 1;
            
            //End chase
            alarm[0] = 600;
        }
    }
}

//Otherwise, chase the player
else {

    //Make sure rip van fishes can't exit water
    water = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_swim, 0, 0);
    
    //If there's water
    if (water)
    &amp;&amp; (y &lt; water.y-4)
        y = water.y-4;

    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //If the player is under the effects of the starman, scoot away from it.
        if (instance_exists(obj_invincibility)) {
        
            //Set horizontal speed depending of the player's position
            if (obj_playerparent.x &lt; x) {
            
                hspeed += 0.0125;
                if (hspeed &gt; 1.5)
                    hspeed = 1.5;
            }
            
            //Otherwise, if the player is at the right
            else if (obj_playerparent.x &gt; x) {
            
                hspeed -= 0.0125;
                if (hspeed &lt; -1.5)
                    hspeed = -1.5;
            }
            
            //Set vertical speed depending of the player's position
            if (obj_playerparent.y &lt; y) {
            
                vspeed += 0.0125;
                if (vspeed &gt; 1.5)
                    vspeed = 1.5;
            }
            
            //Otherwise, if the player is at the right
            else if (obj_playerparent.y &gt; y) {
            
                vspeed -= 0.0125;
                if (vspeed &lt; -1.5)
                    vspeed = -1.5;
            }
        }
        
        //If the player is not invulnerable
        else {
        
            //Set horizontal speed depending of the player's position
            if (obj_playerparent.x &lt; x) {
            
                hspeed -= 0.0125;
                if (hspeed &lt; -1.5)
                    hspeed = -1.5;
            }
            
            //Otherwise, if the player is at the right
            else if (obj_playerparent.x &gt; x) {
            
                hspeed += 0.0125;
                if (hspeed &gt; 1.5)
                    hspeed = 1.5;
            }
            
            //Set vertical speed depending of the player's position
            if (obj_playerparent.y &lt; y) {
            
                vspeed -= 0.0125;
                if (vspeed &lt; -1.5)
                    vspeed = -1.5;
            }
            
            //Otherwise, if the player is at the right
            else if (obj_playerparent.y &gt; y) {
            
                vspeed += 0.0125;
                if (vspeed &gt; 1.5)
                    vspeed = 1.5;
            }        
        }        
    }
    
    //Start chasing
    chase = 1;
    
    //Set the chasing sprite
    sprite_index = spr_ripvanfish_awaken;
    
    //Set animation speed
    image_speed = 0.2;
}

//Wall collision
event_user(3);

//Floor collision
event_user(4);

//Facing direction
if (chase == 0) {

    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x)
        xscale = -1;
    else
        xscale = 1;
}
else {

    if (hspeed &gt; 0)
        xscale = 1;
    else if (hspeed &lt; 0)
        xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor collision

//When moving down
if (vspeed &gt; 0) {

    //Check for a semisolid below
    var semisolid = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+vspeed, obj_semisolid, 0, 0);
    
    //If the semisolid exists,  snap above it.
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
        y = semisolid.bbox_top-16;
}

//Check for floor objects
if (collision_rectangle(bbox_left, bbox_bottom-1, bbox_right, bbox_bottom+1, obj_semisolid, 0, 0))
&amp;&amp; (!collision_rectangle(bbox_left, bbox_bottom-4, bbox_right, bbox_bottom-4, obj_semisolid, 0, 0))
|| (collision_rectangle(bbox_left, bbox_bottom+1, bbox_right, bbox_bottom+2, obj_slopeparent, 1, 0)) {

    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt;= 0)
        vspeed = 0;
}
else {

    //Gravity
    gravity = 0.01;
    
    //Cap vertical speed
    if (vspeed &gt; 1)
        vspeed = 1;
}

//If the player is moving up
if (vspeed &lt; 0)
&amp;&amp; ((collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
|| (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0))) {
    
    //Prevent the player's head from getting stuck on a ceiling.
    if (vspeed != 0) {

        while ((collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_solid, 1, 0))
        || (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)))
            y++;
    }
    
    //Stop vertical speed
    vspeed = 0;
}

//Make sure that the player does not get embed on ceiling slopes
if (vspeed != 0)
    while (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_slopeparent_ceiling, 1, 0))
        y++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-4, obj_solid, 1, 0)))
|| ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-4, obj_solid, 1, 0))) {

    //Stop horizontal movement
    hspeed = 0;
    
    //Prevent getting embed on walls
    while (collision_rectangle(bbox_left, bbox_top+4, bbox_left, bbox_bottom-1, obj_solid, 0, 0))
        x++;
    while (collision_rectangle(bbox_right, bbox_top+4, bbox_right, bbox_bottom-1, obj_solid, 0, 0))
        x--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Snore if sleeping

if (sprite_index == spr_ripvanfish) {

    with (instance_create(x,y,obj_smoke)) {
    
        sprite_index = spr_snore;
        image_speed = 0.05;
        path_start(pth_bubble, 0.5, path_action_continue, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Rip Van Fish

draw_sprite_ext(sprite_index, image_index, round(x), round(y)+1, xscale, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
