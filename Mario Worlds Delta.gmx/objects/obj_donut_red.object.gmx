<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_donut_red</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_donut</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Red donut logic

//If the player does exist
if (instance_exists(obj_playerparent)) {

    //If not falling
    if (vspeed == 0) {
    
        //If the player is above and it's not overlapping a semisolid, resume timer
        if (collision_rectangle(bbox_left, bbox_top-1, bbox_right, bbox_top, obj_playerparent, 0, 0))
        &amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
        &amp;&amp; (obj_playerparent.state != statetype.jump)    
            shake = 1;
    
        //Otherwise, wait to shake.
        else {
        
            shake = 0;
            alarm[0] = 7;
        }
    }
    
    //Otherwise
    else {
    
        //Do not shake
        shake = 2;    
        
        //If the player is on this donut
        if (collision_rectangle(bbox_left, bbox_top-5, bbox_right, bbox_top+4, obj_playerparent, 0, 0))
        &amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
        &amp;&amp; (obj_playerparent.state != statetype.jump) {
    
            //Check if falling through a semisolid
            var check = collision_rectangle(obj_playerparent.bbox_left, bbox_top-5, obj_playerparent.bbox_right, bbox_top+1, obj_semisolid, 0, 1);
            
            //If not falling through, or falling througn a lower donut, snap the player vertically
            if (!check)
            || (((check.object_index == obj_donut) or (check.object_index == obj_donut_red)) &amp;&amp; ((check.y &gt; y) || ((check.y = y) &amp;&amp; (check &gt; id))))
                obj_playerparent.y = ceil(bbox_top-16);
        }
    }
}

//Otherwise, do not shake
else {

    shake = 0;
    alarm[0] = 7;
}


//Destroy
if (shake == 2)
&amp;&amp; (bbox_top &gt; view_yview[0] + view_hview[0])
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a new donut

//Create a ticker for the new donut
with (instance_create(xstart+8, ystart+8, obj_donut_ticker)) {

    image_index = 2;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
