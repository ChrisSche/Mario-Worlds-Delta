<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_door_p_outline</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///P-Door

/*
**  This item uses creation code!
**
**  destination = Destination room (Leave as is to not change room.)
**  exit_dir    = Exit pipe direction
**  exit_id     = Warp ID
*/

//Default variables
destination = noone;
exit_dir = 0;
exit_id = -1;

//Do not animate
image_speed = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Door logic

//If the 'Up' key is pressed
if (input_check_pressed(input.up))
&amp;&amp; (sprite_index == spr_door_p) 
&amp;&amp; (image_speed == 0)
&amp;&amp; (image_index == 0) {

    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //Check for it
        player = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_playerparent, 0, 0);
        
        //If the player exists
        if (player)
        &amp;&amp; (player.state != statetype.jump)
        &amp;&amp; (player.state != statetype.climb) {
        
            //Play 'Door' sound
            audio_play_sound(snd_door, 0, false);
            
            //Animate the door
            image_speed = 0.2;
            
            //Create a new player object
            warpme = instance_create(player.x, player.y, obj_player_door);
            
            //Facing direction
            warpme.image_xscale = player.xscale;
            
            //Colour
            warpme.isflashing = player.isflashing;
                        
            //Set up destination room
            if (destination != noone) {
            
                warpme.destination = destination;
            }
            
            //Set up door id
            warpme.my_door = id;
            
            //Set up warp parameters
            warpme.exit_type = 0;
            warpme.exit_id = exit_id;
            
            //Destroy player object
            with (obj_playerparent) instance_destroy();
        }
    }
}

//Set up outline animation when p-switch effect is off and the door is not opening
if (sprite_index == spr_door_p)
&amp;&amp; (image_speed == 0)
&amp;&amp; (image_index == 0)
&amp;&amp; (obj_levelcontrol.switchon == 0) {

    sprite_index = spr_door_p_outline;
    image_speed = 0.1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start warp sequence

//If the door is not an outline
if (sprite_index != spr_door_p_outline) {

    //Stop animation
    image_speed = 0;
    image_index = 2;
    
    //Perform warp event
    with (obj_player_door) alarm[0] = 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw door

draw_sprite(sprite_index, -1, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
