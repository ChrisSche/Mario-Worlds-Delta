<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trampoline</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_holdparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trampoline

//Inherit event from parent
event_inherited();

//Previous x position
xprev = x;

//Whether the player is on this trampoline
ready = 0;
s_ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not restart position if sprout out from a block

carried = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow the player to use the spring again

s_ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player hold or interact with the item.

//If the item is not being held.
if (!held) { 

    //If the player is above and moving down, use the stomp event.
    if (other.bbox_bottom &lt; bbox_top-vspeed+5) 
    &amp;&amp; (other.vspeed &gt; 0) {
    
        //Animate
        image_speed = 0.4;
        
        //the player logic
        with (other) {
        
            //Stop horizontal speed.
            hspeed = 0;
            
            //Stop vertical speed.
            vspeed = 0;
            if (gravity &gt; 0)
                gravity = 0;
        }
        
        //Spring is ready
        ready = 1;
        s_ready = 1;
        
        //the player logic (Part 2)
        with (other) event_user(15);
    }
    
    //Otherwise, if the player can hold the item.
    else if (can_hold() 
    &amp;&amp; (s_ready == 0) 
    &amp;&amp; (inwall == false) 
    &amp;&amp; (other.bbox_bottom &gt; bbox_top)) {
        
        //Make the player hold it.
        other.holding = 1;
        
        //Change the depth
        depth = -4;        
        
        //Get held
        held = 1;
                
        //Disable speed / gravity
        speed = 0;
        gravity = 0;
    }
}

//If the spring is ready.
if (ready) {

    //If the player exists
    if (instance_exists(obj_playerparent)) {
    
        //Set player state
        obj_playerparent.state = statetype.idle;
        
        //Disable player gravity
        obj_playerparent.enable_gravity = false;
        
        //Stop jumping / sliding
        obj_playerparent.jumping = 2;
        obj_playerparent.sliding = 0;
        
        //Snap in position
        obj_playerparent.y = ceil(bbox_top+(image_index*2)-16);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart up animation

if (sprite_index == spr_trampoline) {

    //If the spring is about to launch the player upwards.
    if (s_ready == 1) {
    
        //If the player does exist.
        if (instance_exists(obj_playerparent)) {
        
            //Play 'Trampoline' sound
            audio_play_sound(snd_trampoline, 0, false);
            
            //With the player
            with (obj_playerparent) {
            
                //Set vertical speed
                vspeed = -4.925;
                    
                //Boost jump
                y -= 8;
                
                //Allow variable jumping if 'Shift' is pressed
                if (keyboard_check(global.key_action[0]))
                    jumping = 1;
                else
                    jumping = 2;
            }
        }
    }
    
    //Allow use
    ready = 0;
    alarm[0] = 8;
    
    //Restart animation
    image_speed = 1;
    image_index = 0;
    
    //Set the end sprite
    sprite_index = spr_trampoline_end;
}
else if (sprite_index == spr_trampoline_end) {

    //Do not animate
    image_speed = 0;
    image_index = 0;
    
    //Set the sprite
    sprite_index = spr_trampoline;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
