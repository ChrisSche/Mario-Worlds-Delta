<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_engine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Track Seesaw Engine

//Default value
state_reset = 0;

//Animate
image_speed = 0.15;

//State
state = "IDLE"

//Speed
spd = 1;

//Origin
xorig = sprite_width/2-1;
yorig = sprite_height/2-1;

//Steps to take per steps
step = 0;

//Whether this engine has a platform
myplat = noone;

//Whether the engine jumped from a track
ready = 0;

//Direction
direct = 270;

//Create its platform
alarm[1] = 2;

//Set up direction based on modifier
if (place_meeting(x, y, obj_up))
    direct = 90;
else if (place_meeting(x, y, obj_left))
    direct = 180;
else if (place_meeting(x, y, obj_right))
    direct = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the platform

if (myplat != noone)
    with (myplat) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the platform

myplat = instance_create(x, y-30, obj_platform_seesaw);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow to hang in tracks

ready = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the platform move within the engine

if (myplat != noone) {
    
    //Keep the rope in position
    myplat.x = self.x+xorig;
    myplat.y = self.y+6;
    
    //If a player exists
    if (instance_exists(obj_playerparent)) {
    
        //The engine's platform collision detection
        var detect = collision_rectangle(obj_playerparent.bbox_left, obj_playerparent.bbox_bottom-2, obj_playerparent.bbox_right, obj_playerparent.bbox_bottom+4, myplat, 1, 0);
        
        //Move if player lands on the seesaw
        if (detect)
        &amp;&amp; (obj_playerparent.gravity == 0)
        &amp;&amp; (state == "IDLE")
            state = "IN_LINE";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platform logic

//Check for a track
var track = collision_rectangle(x+xorig, y+yorig-3, x+xorig, y+yorig+0.9, obj_trackparent, 1, 0);

//If the player is on line
if (state = "IN_LINE") {

    //Update steps
    step += spd;
    while (step &gt;= 1) {
    
        //Travel through tracks
        if (collision_point(x+xorig+cos(degtorad(direct)), y+yorig-sin(degtorad(direct)), obj_trackparent, 1, 0)) {
        
            x += cos(degtorad(direct));
            y += -sin(degtorad(direct));
        }
        else if (collision_point(x+xorig+cos(degtorad(direct))-sin(degtorad(direct)), y+yorig-sin(degtorad(direct))-cos(degtorad(direct)), obj_trackparent, 1, 0)) {
        
            x += cos(degtorad(direct))-sin(degtorad(direct));
            y += -sin(degtorad(direct))-cos(degtorad(direct));
        }
        else if (collision_point(x+xorig+cos(degtorad(direct))+sin(degtorad(direct)), y+yorig-sin(degtorad(direct))+cos(degtorad(direct)), obj_trackparent, 1, 0)) {
        
            x += cos(degtorad(direct))+sin(degtorad(direct));
            y += -sin(degtorad(direct))+cos(degtorad(direct));
        }
        else if (collision_point(x+xorig-sin(degtorad(direct)), y+yorig-cos(degtorad(direct)), obj_trackparent, 1, 0)) {
        
            x += -sin(degtorad(direct));
            y += -cos(degtorad(direct));
            direct += 90;
        }
        else if (collision_point(x+xorig+sin(degtorad(direct)), y+yorig+cos(degtorad(direct)), obj_trackparent, 1, 0)) {
        
            x += sin(degtorad(direct));
            y += cos(degtorad(direct));
            direct -= 90;
        }
        else {
        
            direct += 180;
        }
            
        //Check for nodes / limits
        limit = collision_point(x+xorig, y+yorig, obj_track_limit, 1, 0);
        node = collision_point(x+xorig, y+yorig, obj_track_modifier, 1, 0);
        
        //If there's a launch node
        if (node) {

            //Set 'Falling' state
            state = "FALLING";
            
            //Reset step
            step = 0;             
            
            //Apply gravity
            gravity = 0.2;
            
            //Set direction
            direction = direct;
            
            //If moving up, jump
            if (direction == 90) {
            
                vspeed = -spd*3;
                if (node.hsp == true) {
                
                    if (x &gt; xprevious)
                        hspeed = spd;
                    else if (x &lt; xprevious)
                        hspeed = -spd;
                }      
            }
            
            //If moving to the right
            else if (direction == 0) {
            
                //If this is a jump node
                if (node.jump == true) {
                
                    vspeed = -spd*2.5;
                    hspeed = spd*2;
                }
                else
                    hspeed = spd;         
            }
            
            //If moving to the left
            else if (direction == 180) {
            
                //If this is a jump node
                if (node.jump == true) {
                
                    vspeed = -spd*2.5;
                    hspeed = -spd*2;
                }
                else
                    hspeed = -spd;              
            }
            else
                speed = spd;
        }
        
        //If there's a limit, reverse direction
        if (limit) then direct = -180;
        
        //Update alarm 0
        alarm[0] = 8;
        
        //Update step
        step--;
        
        //Reset angles
        if (direct &lt; 0)
            direct += 360;
        else if (direct &gt;= 360)
            direct -= 360;
    }
}

//Otherwise if falling
else if (ready == 1) &amp;&amp; (state == "FALLING") {
    
    //If there's a track in position
    if (track) 
    &amp;&amp; (vspeed &gt; 0) {
    
        //Set "In_Line" state
        state = "IN_LINE";
        
        //Set direction and snap
        if (hspeed == 0) {
        
            direct = 270;
            move_snap(1, 2);
        }
        else {

            //If the track is a circle one
            //"pls notice me gatete" -mack
            if ((track.object_index == obj_track_circle)
            || (track.object_index == obj_track_circle_2x)) {
             
                direct = 270;
                move_snap(1, 2);   
            }
        
            //If the track is a horizontal one
            else if (track.object_index == obj_track_h) {
            
                move_snap(1, 8);
                if (hspeed &gt; 0)
                    direct = 0;            
                else if (hspeed &lt; 0)
                    direct = 180;
            }
            else {
            
                direct = 270;
                move_snap(1, 2);
            }             
        }
                             
        //Stop vertical movement
        hspeed = 0;
        vspeed = 0;
        gravity = 0;
                
        //In line
        ready = 0;
    }
    
    //Cap vertical speed
    if (vspeed &gt; 3)
        vspeed = 3;
}

//If the platform is outside the view
if (x &lt; view_xview[view_current]-sprite_width)
|| (x &gt; view_xview[view_current]+view_wview[view_current]) {

    //If the rope start point is outside the view
    if (xstart &lt; view_xview[view_current]-sprite_width)
    || (xstart &gt; view_xview[view_current]+view_wview[view_current]) {
    
        with (instance_create(xstart, ystart, object_index)) {
        
            spd = other.spd;
            if (other.state_reset == 1)
                state = other.state;            
        }
        instance_destroy();
    }        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render me

draw_sprite_ext(sprite_index, -1, x, y, 1, 1, 0, image_blend, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
