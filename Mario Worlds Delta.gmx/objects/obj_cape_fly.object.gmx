<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask_player_big</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cape Flight

//Can the player fly?
canfly = 0;

//Can the player dive?
candive = 0;
dive_index = 0;

//Facing direction
xscale = obj_playerparent.xscale;

//Can the player slam the floor
smash = 0;

//Is the object in a slope?
slope = false;

//Set horizontal speed
hspeed = obj_playerparent.hspeed;

//Make the player invisible
obj_playerparent.visible = false;

//Do not animate
image_speed = 0;

//Fake img index
img_index = 2;

//Wall check
walltouch = false;

//State
state = obj_playerparent.state;

//Leave trail
alarm[0] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make player visible

//If the player exists
if (instance_exists(obj_playerparent)) {
    
    //Make player visible
    obj_playerparent.visible = true;
    
    //Make player able to fly
    obj_playerparent.flying = 0;
    
    //If the object is not smashing the ground
    if (smash == 0)
        obj_playerparent.hspeed = self.hspeed
    else
        obj_playerparent.hspeed = self.hspeed/2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Leave a smoke trail when in ground

alarm[0] = 4;
if (gravity == 0)
    instance_create(x, bbox_bottom, obj_smoke);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage player logic

//If the player does not exist
if (!instance_exists(obj_playerparent)) {

     instance_destroy();
     exit;
}
else {

    //Stay in the same position
    obj_playerparent.x = x;
    obj_playerparent.y = y;
    
    //Hereby state
    state = obj_playerparent.state;
    
    //Hereby scale
    obj_playerparent.xscale = image_xscale;
}

//Check if above a slope
slope = player_inslope();

//If moving down
if (vspeed &gt;= 0) {

    //Check for a semisolid
    var semisolid = collision_rectangle(bbox_left, bbox_bottom+1, bbox_right, bbox_bottom+vspeed, obj_semisolid, 0, 0);
    
    //If there's a semisolid in position
    if (semisolid) 
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {
    
        //Snap above the platform
        y = semisolid.bbox_top-16;
        
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Smash the ground or not
        event_user(0);
    }
}

//Embed the player into the slope if he is walking or sliding down to ensure correct slope physics
if (collision_rectangle(x-2, bbox_bottom+4, x+2, bbox_bottom+8, obj_slopeparent, 1, 0))
&amp;&amp; (!collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom-4, obj_slopeparent, 1, 0))
&amp;&amp; (gravity == 0)
    y += 4;

//Handle collision with slopes
if (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom+vspeed, obj_slopeparent, 1, 0))
&amp;&amp; (!collision_rectangle(x-2, bbox_bottom-8, x+2, bbox_bottom-8, obj_slopeparent, 1, 0)) {

    //If moving down
    if (vspeed &gt;= 0) {
    
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Smash the ground or not
        event_user(0);
    }
    
    //Prevent the player from getting embed inside a slope
    if (vspeed &gt; -1)
        while (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom, obj_slopeparent, 1, 0))
            y--;
}

//Manage gravity
if (state == statetype.jump)
    gravity = 0.1;

//Allow diving
if (keyboard_check_released(global.key_l))
|| (keyboard_check_released(global.key_r))
    candive = 1;
    
//If diving is allowed
if (candive == 1) {

    //If facing left and 'Left' is pressed
    if (keyboard_check(global.key_l))
    &amp;&amp; (xscale = -1)
    &amp;&amp; (vspeed &gt;= 0)
        smash = 1;
        
    //Otherwise, if facing right and 'Right' is pressed
    else if (keyboard_check(global.key_r))
    &amp;&amp; (xscale == 1)
    &amp;&amp; (vspeed &gt;= 0)
        smash = 1;
}

//Stop flying
if ((!collision_rectangle(bbox_left, bbox_bottom-4, bbox_right, bbox_bottom+vspeed, obj_slopeparent, 1, 0)
&amp;&amp; (gravity == 0)
&amp;&amp; (hspeed &lt; 0.26) 
&amp;&amp; (hspeed &gt; -0.26)))
|| (global.mount == 1)
|| (global.powerup &lt; cs_pow_cape)
|| (!instance_exists(obj_playerparent))
|| (!keyboard_check(global.key_action[1]))
|| (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
    instance_destroy();
    
//Wall collision
event_user(3);

//If moving up...
if (vspeed &lt; 0) {

    //...and the player bumps a ceiling
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
    
        //If the player is jumping or climbing
        if (state == statetype.jump) {
        
            while ((collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_solid, 1, 0))
            || (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0)))
                y++;
        }
        
        //Stop vertical movement
        vspeed = 0;
    }
}

//Increment speed when diving
if (smash == 1) 
&amp;&amp; (state == statetype.jump) {

    //If 'Left' is pressed
    if (keyboard_check(global.key_l))
    &amp;&amp; (hspeed &gt; -obj_playerparent.hspeed_run_full)
    &amp;&amp; (xscale == -1)
        hspeed -= 0.2;
        
    //Otherwise, if 'Right' is pressed
    else if (keyboard_check(global.key_r))
    &amp;&amp; (hspeed &lt; obj_playerparent.hspeed_run_full)
    &amp;&amp; (xscale == 1)
        hspeed += 0.2;
}
   
//If 'Left' or 'Right' is pressed while diving
if (hspeed != 0)
&amp;&amp; (vspeed &gt; 1.5) {
    
    if ((keyboard_check_pressed(global.key_l)) &amp;&amp; (xscale == 1))
    || ((keyboard_check_pressed(global.key_r)) &amp;&amp; (xscale == -1))
        event_user(1);
}

//Cap vertical speed
if (vspeed &gt; 2+(smash*2)) then vspeed = 2+(smash*2);

//Cap horizontal speed
if (hspeed &gt; obj_playerparent.hspeed_run_full)
    hspeed = obj_playerparent.hspeed_run_full;
else if (hspeed &lt; -obj_playerparent.hspeed_run_full)
    hspeed = -obj_playerparent.hspeed_run_full;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage player animation

//Set the sprite
sprite_index = player_cape();

//Set image index
img_index = round(dive_index);

//If moving up
if (vspeed &lt; 0) {

    dive_index -= 0.5;
    if (dive_index &lt; 0)
        dive_index = 0;
}
else if (vspeed &gt;= 0) {

    //Set the frame
    dive_index += 0.2;
    
    //If smashing the ground
    if (smash == 1) {
    
        if (dive_index &gt; 5)
            dive_index = 5;
    }
    else {
    
        if (dive_index &gt; 2)
            dive_index = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

//If moving right
if (hspeed &gt; 0) {

    //If there's a wall in position
    if (collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-4-(slope*4), obj_solid, 1, 0)) {
        
        //Stop horizontal speed
        hspeed = 0;    
        
        //Prevent the player from getting embed in the wall
        while (collision_rectangle(bbox_right, bbox_top+4, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
        &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 1, 0))
            x--;
    }
}

//Otherwise, if moving left
else if (hspeed &lt; 0) {

    //If there's a wall in position
    if (collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-4-(slope*4), obj_solid, 1, 0)) {
        
        //Stop horizontal speed
        hspeed = 0;    
        
        //Prevent the player from getting embed in the wall
        while (collision_rectangle(bbox_left, bbox_top+4, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
        &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 1, 0))    
            x++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Glide up

//Play 'Cape' sound
audio_play_sound(snd_capefly, 0, false);

//If not smashing
if (smash == 0)
    vspeed = -3;
    
//Otherwise, if smashing
else if (smash == 1) {

    switch (img_index) {
    
        case (3): vspeed = -3; break;
        case (4): vspeed = -3.5; break;
        case (5): vspeed = -4.5; break;
    }
}

//Return to normal state
smash = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide or smash the ground

//If the player is smashing the ground
if (smash == 1) {

    //If the player's head is right at the bottom
    if (dive_index == 5) {
    
        //Play 'Thud' sound
        audio_play_sound(snd_thud, 0, false);

        //Create 'Yoshi Stomp'
        with (instance_create(view_xview[0] + view_wview[0] / 2, view_yview[0], obj_stomp)) sprite_index = spr_stompmask_cape;
    
        //Destroy
        instance_destroy();
    }
    else {
    
        smash = 0;
        dive_index = 2;
    }
}

//Check for a slope
slope_below = collision_rectangle(x-2, bbox_bottom+1, x+2, bbox_bottom+2, obj_slopeparent, 1, 0);

//If there's a slope below the player
if (slope_below) {

    //If the player's horizontal speed is not at the limit, allow slide
    if (abs(hspeed) != 2.5)
        hspeed += slope_below.add;
}

//Otherwise, if there's not a slope below
else if (gravity == 0) {

    //If the player is not overlapping a slippery surface
    if (!collision_rectangle(bbox_left, bbox_bottom-8, bbox_right, bbox_bottom+1, obj_iceparent, 1, 0)) {

        //Reduce player's horizontal speed yet slower
        hspeed = max(0, abs(hspeed)-0.05)*sign(hspeed);
        
        //Set horizontal speed to 0 when the horizontal speed hits value in 'dec/8'.
        if (hspeed &lt; 0.05)
        &amp;&amp; (hspeed &gt; -0.05) {
        
            hspeed = 0;
            instance_destroy();
        }
    }
    
    //Otherwise, slow down slower
    else {

        //Reduce player's horizontal speed yet slower
        hspeed = max(0, abs(hspeed)-0.0125)*sign(hspeed);
        
        //Set horizontal speed to 0 when the horizontal speed hits value in 'dec/8'.
        if (hspeed &lt; 0.0125)
        &amp;&amp; (hspeed &gt; -0.0125) {
        
            hspeed = 0;
            instance_destroy();
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Create temporary variables
var pal, numb;

//If the player is invincible
if (instance_exists(obj_invincibility)) {

    //Set the invincibility palette
    pal = spr_palette_invincibility;
    
    //Set the palette position
    numb = obj_playerparent.isflashing;
}

//Otherwise, if the player is not invincible
else {

    //Set the master palette
    pal = spr_palette_master;
    
    //Set the palette position
    numb = global.powerup;
}

//Set the palette
pal_swap_set(pal, numb);

//Draw the player
if (global.mount == 0) {

    draw_sprite_ext(sprite_index, img_index, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);
}

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
