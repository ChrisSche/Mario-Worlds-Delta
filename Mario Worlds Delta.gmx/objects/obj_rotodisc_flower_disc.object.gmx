<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rotodisc</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_rotodisc_disc</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flower Rotodisc

//Animate
image_speed = 0;
palette = 0;

//Leave a trail
alarm[0] = 2;

//Change palette
alarm[1] = 2;

//Direction
clockwise = 1;

//Radius
maxradius = 80;
radius = maxradius;

//Angle
angle = 0;

//Step
step = 0;
speedd = 2;

//Light
light = noone;

//Create spotlight
if (instance_exists(obj_lightcontrol)) {

    //Create a light
    light = instance_create(x, y, obj_light_npc);
    
    //With the light
    with (light) {
    
        target = other.id;
        radius = 24;
        yoffset = 0;
        image_blend = make_colour_rgb(248, 144, 32);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update disc position

//Set position
angle += speedd*(clockwise*-1);
x = xstart + lengthdir_x(radius, angle);
y = ystart + lengthdir_y(radius, angle);

//Update radius
if ((radius &lt;= maxradius) &amp;&amp; (step == 0)) {

    radius += speedd;
    if (radius &gt;= maxradius) {
    
        radius = maxradius; 
        step = 1;
    }
}
else if ((radius &gt;= 0) &amp;&amp; (step == 1)) {

    radius -= speedd;
    if (radius &lt;= 0) {
    
        radius = 0; 
        step = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
