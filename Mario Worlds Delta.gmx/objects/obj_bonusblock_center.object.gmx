<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bonusblock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bonus Game Manager

//Set a random image
image_speed = 0;
image_index = choose(2, 6, 10);

//Check
check = 0;

//Matches
for (i=0; i&lt;8; i++) {

    match[i] = 0;
}

//Flash
flash = 0;

//Total
total = 0;

//Rewards
rewards = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End bonus game if there's no 1UPs left

if (!instance_exists(obj_1up)) {

    //Play 'Bonus End' sound
    audio_play_sound(snd_bonusend, 0, false);
    
    //Stop music
    with (obj_levelcontrol) {
    
        musicdisable = true;
        alarm[1] = 1;
    }
    
    //Disable player controls
    obj_playerparent.cleared = 1;
}
else
    alarm[3] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swap color from winning lines

flash = !flash;
alarm[2] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give rewards

if (rewards &gt;= 1) {

    //Decrement rewards
    rewards--;
    
    //Play 'Sprout' sound
    audio_play_sound(snd_sprout, 0, false);
    
    //Create 1-UP
    with (instance_create(32, 48, obj_1up)) {
    
        depth = 10;
        permission = 0;
    }
    
    //Create another
    alarm[1] = 60;
}
else
    alarm[3] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin check

event_user(0);
check = 3;
alarm[1] = 60;
alarm[2] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if the other blocks are done

var done;
done = 1;

//Check other blocks
with (obj_bonusblock) {

    if (image_speed &lt;&gt; 0) {
    
        done = 0;
        break;
    }
}

//If all blocks are done
if ((done == 1) &amp;&amp; (check == 0)) {

    check = 1;
    obj_bonusblock.used = 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin match

var done;
done = 1;

//Check other blocks
with (obj_bonusblock) {

    if (speed &lt;&gt; 0) {
    
        done = 0;
        break;
    }
}

//If all blocks are done
if ((done == 1) &amp;&amp; (check == 1)) {

    check = 2;
    alarm[0] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 0 (Center "|")

var _a, _aa, _b, _bb;

//Set _a
_a = 0;

//Check for other blocks
if (collision_line(x+8, y+8, x+8, y-40, obj_bonusblock, 1, 0)) {

    _aa = collision_line(x+8, y+8, x+8, y-40, obj_bonusblock, 1, 0);
    if (round(_aa.image_index) == round(self.image_index))
        _a = 1;
}

//Set _b
_b = 0;

//Check for other blocks
if (collision_rectangle(x+8, y+8, x+8, y+40, obj_bonusblock, 1, 0)) {

    _bb = collision_line(x+8, y+8, x+8, y+40, obj_bonusblock, 1, 0);
    if (round(_bb.image_index) == round(self.image_index))
        _b = 1;
}

//Complete match
if (_a + _b == 2)
    match[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 1 (Center "-") 

var _a, _aa, _b, _bb;

//Set _a
_a = 0;

//Check for other blocks
if (collision_line(x+8, y+8, x-40, y+8, obj_bonusblock, 1, 0)) {

    _aa = collision_line(x+8, y+8, x-40, y+8, obj_bonusblock, 1, 0);
    if (round(_aa.image_index) == round(self.image_index))
        _a = 1;
}

//Set _b
_b = 0;

//Check for other blocks
if (collision_rectangle(x+8, y+8, x+40, y+8, obj_bonusblock, 1, 0)) {

    _bb = collision_line(x+8, y+8, x+40, y+8, obj_bonusblock, 1, 0);
    if (round(_bb.image_index) == round(self.image_index))
        _b = 1;
}

//Complete match
if (_a + _b == 2)
    match[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 2 ( / )

var _a, _aa, _b, _bb;

//Set _a
_a = 0;

//Check for other blocks
if (collision_line(x+8, y+8, x+40, y-40, obj_bonusblock, 1, 0)) {

    _aa = collision_line(x+8, y+8, x+40, y-40, obj_bonusblock, 1, 0);
    if (round(_aa.image_index) == round(self.image_index))
        _a = 1;
}

//Set _b
_b = 0;

//Check for other blocks
if (collision_rectangle(x+8, y+8, x-40, y+40, obj_bonusblock, 1, 0)) {

    _bb = collision_line(x+8, y+8, x-40, y+40, obj_bonusblock, 1, 0);
    if (round(_bb.image_index) == round(self.image_index))
        _b = 1;
}

//Complete match
if (_a + _b == 2)
    match[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 3 ( \ )

var _a, _aa, _b, _bb;

//Set _a
_a = 0;

//Check for other blocks
if (collision_line(x+8, y+8, x-40, y-40, obj_bonusblock, 1, 0)) {

    _aa = collision_line(x+8, y+8, x-40, y-40, obj_bonusblock, 1, 0);
    if (round(_aa.image_index) == round(self.image_index))
        _a = 1;
}

//Set _b
_b = 0;

//Check for other blocks
if (collision_rectangle(x+8, y+8, x+40, y+40, obj_bonusblock, 1, 0)) {

    _bb = collision_line(x+8, y+8, x+40, y+40, obj_bonusblock, 1, 0);
    if (round(_bb.image_index) == round(self.image_index))
        _b = 1;
}

//Complete match
if (_a + _b == 2)
    match[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 4 (Top "-")

var _a, _aa, _b, _bb, _c, _cc;

//Set _a
_a = 0;

//Check for the block
if (collision_point(x-40, y-40, obj_bonusblock, 1, 0)) {

    _aa = collision_point(x-40, y-40, obj_bonusblock, 1, 0);
    _a = round(_aa.image_index);
}

//Set _b
_b = 0;

//Check for the block
if (collision_point(x+48, y-40, obj_bonusblock, 1, 0)) {

    _bb = collision_point(x+48, y-40, obj_bonusblock, 1, 0);
    _b = round(_bb.image_index);
}

//Set _c
_c = 0;

//Check for the block
if (collision_point(x+8, y-40, obj_bonusblock, 1, 0)) {

    _cc = collision_point(x+8, y-40, obj_bonusblock, 1, 0);
    _c = round(_cc.image_index);
}

//Complete match
if ((_a == _b) &amp;&amp; (_b == _c))
    match[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 5 (Bottom "-")

var _a, _aa, _b, _bb, _c, _cc;

//Set _a
_a = 0;

//Check for the block
if (collision_point(x-40, y+48, obj_bonusblock, 1, 0)) {

    _aa = collision_point(x-40, y+48, obj_bonusblock, 1, 0);
    _a = round(_aa.image_index);
}

//Set _b
_b = 0;

//Check for the block
if (collision_point(x+48, y+48, obj_bonusblock, 1, 0)) {

    _bb = collision_point(x+48, y+48, obj_bonusblock, 1, 0);
    _b = round(_bb.image_index);
}

//Set _c
_c = 0;

//Check for the block
if (collision_point(x+8, y+48, obj_bonusblock, 1, 0)) {

    _cc = collision_point(x+8, y+48, obj_bonusblock, 1, 0);
    _c = round(_cc.image_index);
}

//Complete match
if ((_a == _b) &amp;&amp; (_b == _c))
    match[5] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 6 (Left "|")

var _a, _aa, _b, _bb, _c, _cc;

//Set _a
_a = 0;

//Check for the block
if (collision_point(x-40, y-40, obj_bonusblock, 1, 0)) {

    _aa = collision_point(x-40, y-40, obj_bonusblock, 1, 0);
    _a = round(_aa.image_index);
}

//Set _b
_b = 0;

//Check for the block
if (collision_point(x-40, y+48, obj_bonusblock, 1, 0)) {

    _bb = collision_point(x-40, y+48, obj_bonusblock, 1, 0);
    _b = round(_bb.image_index);
}

//Set _c
_c = 0;

//Check for the block
if (collision_point(x-40, y+8, obj_bonusblock, 1, 0)) {

    _cc = collision_point(x-40, y+8, obj_bonusblock, 1, 0);
    _c = round(_cc.image_index);
}

//Complete match
if ((_a == _b) &amp;&amp; (_b == _c))
    match[6] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 7 (Right "|")

var _a, _aa, _b, _bb, _c, _cc;

//Set _a
_a = 0;

//Check for the block
if (collision_point(x+48, y-40, obj_bonusblock, 1, 0)) {

    _aa = collision_point(x+48, y-40, obj_bonusblock, 1, 0);
    _a = round(_aa.image_index);
}

//Set _b
_b = 0;

//Check for the block
if (collision_point(x+48, y+48, obj_bonusblock, 1, 0)) {

    _bb = collision_point(x+48, y+48, obj_bonusblock, 1, 0);
    _b = round(_bb.image_index);
}

//Set _c
_c = 0;

//Check for the block
if (collision_point(x+48, y+8, obj_bonusblock, 1, 0)) {

    _cc = collision_point(x+48, y+8, obj_bonusblock, 1, 0);
    _c = round(_cc.image_index);
}

//Complete match
if ((_a == _b) &amp;&amp; (_b == _c))
    match[7] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Count the bonuses

var i;
for (i=0; i&lt;8; i++) {

    total += match[i];
}
rewards = total;
if (total &gt; 0)
    audio_play_sound(snd_correct, 0, false);
else
    audio_play_sound(snd_wrong, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render lines and current box

//If there's winning lines
if (check == 3) {

    //Init line
    switch (flash) {
    
        //White
        case (0): draw_set_colour(c_white); break;
        
        //Yellow
        case (1): draw_set_colour(make_colour_rgb(248, 184, 0));
    }
    
    //Line width
    var lw = 6;
    
    //Line 0 (Center "|")
    if (match[0] == 1) then draw_line_width(x+7, y-33, x+7, y+47, lw);
    
    //Line 1 (Center "-")
    if (match[1] == 1) then draw_line_width(x-33, y+7, x+47, y+7, lw);
    
    //Line 2 ( / )
    if (match[2] == 1) then draw_line_width(x-33, y+47, x+47, y-33, lw);

    //Line 3 ( \ )
    if (match[3] == 1) then draw_line_width(x+47, y+47, x-33, y-33, lw);
    
    //Line 4 (Top "-")
    if (match[4] == 1) then draw_line_width(x-33, y-33, x+47, y-33, lw);
        
    //Line 5 (Bottom "-")
    if (match[5] == 1) then draw_line_width(x-33, y+47, x+47, y+47, lw);
    
    //Line 6 (Left "|")
    if (match[6] == 1) then draw_line_width(x-33, y-33, x-33, y+47, lw);
    
    //Line 7 (Right "|")
    if (match[7] == 1) then draw_line_width(x+47, y-33, x+47, y+47, lw); 
}

//Reset colour
draw_set_colour(c_white);

//Draw this block
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
