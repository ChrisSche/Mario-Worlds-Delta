<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_engine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///An engine that will hold 4 types

/*
**  This item uses creation code!
**
**  type = An object that will be on this moving engine
**
**      cs_seesaw
**      cs_saw
**      cs_platform
**      cs_rope
**  
**  length = yes, you can use this for all types.
**  saw_type = up(0), down(1), or double(2) 2 for twice lol
*/

///Animate
image_speed = 0.5;

///Default values
type = cs_saw;
ready = 1;
length = 0;
saw_type = 0;

//Object ID
ID = noone;
mount = noone;
myd = 0;

//Starting x/y movement
stdir = cs_left;

//Starting direction, array
stdir_b = 0;

//Speed
spd = 1.5;

//Smoke position
smoke = 0;
smoke_x = 0;

//Create mask and the object on the engine(this moving object lol)
alarm[0] = 2;

//Exaust FX
alarm[1] = 1;

//Play engine noises
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*engine noises*

//Stop n' Play 'Engine' sound if inside the view
if ((type == cs_saw) &amp;&amp; (!outside_view(8))) {

    audio_stop_play_sound(snd_engine, 0, false);
}

//Repeat
alarm[2] = 14;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exaust FX

//Add variables for position
smoke++;

//If the mounted item is a saw, exhaust smoke
if (type == cs_saw) {

    //Process
    if ((smoke == 1) || (smoke == 3)) {
    
        //Determine smoke FX position
        if (smoke == 1)
            smoke_x = -3;
        else
            smoke_x = 6;
            
        //Create smoke
        with (instance_create(x+smoke_x, y-7, obj_smoke)) {
        
            image_speed = 0.3;
            depth = -6;
            vspeed = -0.5;
        }
    } 
}

//Repeat this process
alarm[1] = 7-image_speed;

//Limit smoke X position variables
if (smoke &gt; 3)
    smoke = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create mask and object that will mount this engine.

//Mask to move this engine
ID = instance_create(x,y,obj_path_mask);

//Set as parent
ID.parent = id;

//Direction
ID.dir = stdir;
ID.type = stdir_b; //Array

//Speed, as much as you want as long as it allows the modifier to check the mask
ID.speeds = spd;

//Create a saw, if told
if (type == cs_saw) 
    mount = instance_create(x, y, obj_engine_blade);
    
//Create a platform, if told
else if (type == cs_platform) {

    //Slowdown engine
    image_speed = 0.15;
    
    //Create a 48 pixel platform
    mount = instance_create(x, y-8, obj_engine_platform);
    
    //Check if moving
    mount.ready = ready;
    
    //Do not move
    ID.speeds = 0;
    
    //Set the length of the platform
    if (length == 1)
        mount.sprite_index = spr_engine_platform_64;
    else if (length == 2)
        mount.sprite_index = spr_engine_platform_80;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stay within the mask

if (instance_exists(ID)) {

    x = ID.x;
    y = ID.y;
    
    //If this is a sawblade
    if (type == cs_saw) {
    
        //Stay on the path guider, otherwise it would just not stay on the engine all sloppy
        mount.x = ID.x;
        mount.y = ID.y-18;
    }
    
    //Otherwise, if this is a platform
    else if (type == cs_platform) {
    
        //If the platform is moving
        if (mount.ready == 1) {
        
            //If not ready, move
            if (ready == 0) {
            
                ready = 1;
                ID.speeds = spd;
            }
        
            //Stay on the path guider, otherwise it would just not stay on the engine all sloppy
            mount.x = ID.x;
            mount.y = ID.y-8;
        }            
    }
}
else 
    hspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
