<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mushroom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A powerup that is coming from a block

//Does this object bounce outta the block
bouncy = 0;

//Do not animate
image_speed = 0;

//Item check
alarm[0] = 1;

//If there is a solid on top of the block
if (position_meeting(x,y-8,obj_solid)) {

    //Go down if both sides are blocked
    if (position_meeting(x-16,y+8,obj_solid))
    &amp;&amp; (position_meeting(x+16,y+8,obj_solid))
        vspeed = 0.35;

    //Go right if the left side is blocked
    else if (position_meeting(x-16,y+8,obj_solid))
        hspeed = 0.35;

    //Go left if the right side is blocked
    else if (position_meeting(x+16,y+8,obj_solid))
        hspeed = -0.35;

    //Otherwise, go towards the player
    else {
    
        //If Mario does exist.
        if (instance_exists(obj_mario)) {
        
            if (obj_mario.x &gt; x)
                hspeed = 0.35;
            else
                hspeed = -0.35;
        }
        
        //Otherwise, if it does not exist.
        else
            hspeed = -0.35;
    }
}

//Otherwise, move up
else
    vspeed = -0.35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item check

//Feather
if (sprite_index == spr_feather)
    instance_create(x, y, obj_feather_sprout);
    
//Otherwise
else {

    //Play 'Sprout' sound
    audio_play_sound(snd_sprout, 0, false);
    
    //If moving up...
    if (vspeed &lt; 0) {
    
        //...and the sprite is one of the following, make it bounce.
        if (sprite_index == spr_trampoline) {

            vspeed = -2.5;
            bouncy = 1;
        }
    }
    
    //Exit
    exit;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a real item when outside the block

//If the item is no longer overlapping a solid
if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 1, 0)) {

    //Create an item
    with (sprite_create_object(x, y, sprite_index)) {
    
        //If moving up
        if (other.vspeed &lt; 0) {
        
            alarm[10] = 1;
            if (other.bouncy == 1)
                vspeed = -2.5;
        }
            
        //Otherwise, stop it
        else {
        
            permission = 0;
            y--;
        }
        
        //If the item is underwater, make it swim
        if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
            swimming = true;
    }
    
    //Destroy
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
