<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level controller

/*
**  This item uses creation code!
**
**  inisection      = The ini section to check up
**  leveltime       = The time limit in seconds (Optional)
*/

//Default values
inisection = "Overworld";
leveltime = 0;

//Play music
alarm[0] = 2;
    
//The music of the level
levelmusic = noone;

//Is music disabled?
musicdisable = false;

//Is the P-Switch active?
switchon = 0;

//Is the Gray P-Switch active?
gswitchon = 0;

//Barrier
barrier = 0;
alarm[5] = 3;

//Fade in / fade out
ready = 0;

//Object to follow
follow = noone;

//Camera orientation
orientation = 1;

//P-SWitch warning
warning = 0;

//Gray P-Switch warning
swarning = 0;

//Create HUD
instance_create(0, 0, obj_hud);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Gray P-Switch sequence

//If the switch effect is on
if (gswitchon == true) {

    //Turn munchers into coins
    with (obj_muncher) event_user(1);

    //Turn off the P-Switch
    gswitchon = false;
    
    //Stop switch song
    audio_stop_sound(bgm_pswitch);
    
    //Set invincibility theme
    if (instance_exists(obj_invincibility)) {
    
        //If the invincibility timer is greater than 0
        if (obj_invincibility.alarm[0] &gt; -1)
            with (obj_invincibility) alarm[2] = 2;
        
        //Otherwise, play default music
        else
            alarm[0] = 2;
    }
    
    //Otherwise, restart
    else if (switchon == 0)
        alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End P-Switch sequence

//If the switch effect is on
if (switchon == true) {

    //Turn off the P-Switch
    switchon = false;
    
    //Replace items
    pswitch_off();
    
    //Stop switch song
    audio_stop_sound(bgm_pswitch);
    
    //Set invincibility theme
    if (instance_exists(obj_invincibility)) {
    
        //If the invincibility timer is greater than 0
        if (obj_invincibility.alarm[0] &gt; -1)
            with (obj_invincibility) alarm[2] = 2;
        
        //Otherwise, play default music
        else
            alarm[0] = 2;
    }
    
    //Otherwise, restart
    else if (gswitchon == 0)
        alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable barrier

barrier = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill the player at 000 seconds left

instance_create(obj_playerparent.x, obj_playerparent.y, obj_player_dead);
with (obj_playerparent) instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play 'Hurry' sound

audio_play_sound(snd_hurry, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement the timer variable

//If there's time left
if (global.time &gt; 0) {

    //Decrement
    global.time--;
    
    //Decrement again after a second
    alarm[2] = 40;
    
    //If there's 101 seconds left, play 'Hurry' sound
    if (global.time == 101)
        alarm[3] = 40;
        
    //Otherwise, if there's 1 second left
    else if (global.time == 1)
        alarm[4] = 41;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music

//If the stream is playing
if (audio_is_playing(global.stream)) {
    
    //Stop the stream...
    audio_stop_sound(global.stream);
    
    //...and free it from memory
    audio_destroy_stream(global.stream);
    global.stream = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music

//If the music is not disabled or the p-switch is active
if (!audio_is_playing(global.stream))
&amp;&amp; (switchon == 0)
&amp;&amp; (musicdisable == 0) {

    //Open INI
    ini_open("MWDMusic.ini");
    
    //Read values
    levelmusic  = ini_read_string(inisection, 'song_name', 0);
    loop_s      = ini_read_real(inisection, 'loop_s', 0);
    loop_e      = ini_read_real(inisection, 'loop_e', 1);
    sample_rate = ini_read_real(inisection, 'sample_rate', 0);
    
    //Close INI
    ini_close();
    
    //Add the sound
    global.stream = audio_create_stream(levelmusic);
    
    //Play it
    audio_loop_sound(global.stream, loop_s, loop_e, sample_rate, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with music pitch

//Pause the music if 'Hurry' is being played
if (audio_is_playing(snd_hurry)) {

    //Pause 'levelmusic'
    if (audio_is_playing(global.stream)) 
        audio_pause_sound(global.stream);
    
    //Pause 'bgm_starman'
    else if (audio_is_playing(bgm_starman))
        audio_pause_sound(bgm_starman);
        
    //Pause 'bgm_pswitch
    else if (audio_is_playing(bgm_pswitch))
        audio_pause_sound(bgm_pswitch);
}

else {

    //Set pitch of music at 1.13
    if (global.time &gt; 0) 
    &amp;&amp; (global.time &lt; 101) {
        
        audio_sound_pitch(global.stream, 1.33);
        audio_sound_pitch(bgm_starman, 1.33);
        audio_sound_pitch(bgm_pswitch, 1.33);
    }
    
    //Otherwise, set pitch to 1.0
    else {
    
        audio_sound_pitch(global.stream, 1);
        audio_sound_pitch(bgm_starman, 1);
        audio_sound_pitch(bgm_pswitch, 1);
    }

    //Resume 'levelmusic' if paused
    if (audio_is_paused(global.stream)) 
        audio_resume_sound(global.stream);
    
    //Resume 'bgm_starman' if paused
    else if (audio_is_paused(bgm_starman))
        audio_resume_sound(bgm_starman);
        
    //Resume 'bgm_starman' if paused
    else if (audio_is_paused(bgm_pswitch))
        audio_resume_sound(bgm_pswitch);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the camera position

//Set up object to follow
event_user(15);

//If the barrier is not enabled
if (barrier == true) {

    //If the player exists
    if (instance_exists(obj_playerparent)) {
        
        //If the player is at the leftmost part of the view
        if (obj_playerparent.x &lt; view_xview[view_current]+8) {
        
            //If the cape object exists
            if (instance_exists(obj_cape_fly)) {
            
                obj_cape_fly.x = view_xview[view_current]+8;
                if (obj_cape_fly.hspeed &lt; 0)
                    obj_cape_fly.hspeed = 0;
            }
            
            //Prevent the player from getting outside the view
            obj_playerparent.x = view_xview[view_current]+8;
            if (obj_playerparent.hspeed &lt; 0)
                obj_playerparent.hspeed = 0;
        }
        
        //Otherwise, if the player is at the rightmost part of the view
        else if (obj_playerparent.x &gt; view_xview[view_current] + view_wview[view_current]-8) {
        
            //If the cape object exists
            if (instance_exists(obj_cape_fly)) {
            
                obj_cape_fly.x = view_xview[view_current] + view_wview[view_current]-8;
                if (obj_cape_fly.hspeed &gt; 0)
                    obj_cape_fly.hspeed = 0;                    
            }
            
            //Prevent the player from getting outside the view
            obj_playerparent.x = view_xview[view_current] + view_wview[view_current]-8;
            if (obj_playerparent.hspeed &gt; 0)
                obj_playerparent.hspeed = 0;    
        }
    }
}

//Follow
if (follow != noone) {

    //Pan instantly if the barrier is deactivated
    if (barrier == false) {
    
        x = follow.x;
        y = follow.y;
    }
    
    //Otherwise, perform movement depending of the given conditions
    else { 

        //Stay relative to the player's y position
        if (instance_exists(obj_playerparent)) {
        
            //If the player is running
            if (obj_playerparent.run == true) {
            
                y = obj_playerparent.y;
                if (view_vspeed[view_current] != 4)
                    view_vspeed[view_current] = 4;
            }
                
            //Otherwise, if the player is climbing
            else if (obj_playerparent.state == statetype.climb) {
            
                y = obj_playerparent.y;
                if (view_vspeed[view_current] != 4)
                    view_vspeed[view_current] = 4;
            }
                
            //Otherwise
            else {
            
                //If the player is swimming
                if (obj_playerparent.swimming == true) {
                
                    y = obj_playerparent.y;
                    if (view_vspeed[view_current] != 4)
                        view_vspeed[view_current] = 4;
                }
                    
                //Otherwise
                else if (obj_playerparent.swimming == false) {
                
                    //If the player is idle or walking
                    if ((obj_playerparent.state == statetype.idle) 
                    || (obj_playerparent.state == statetype.walk)) {
                    
                        //If the player is above the camera
                        if (obj_playerparent.y &lt; y) {
                        
                            //If the camera is 4 pixels below the player y position, move 4 pixels upwards until the camera catches the player.
                            if (y &gt; obj_playerparent.y+4)
                                y -= 4;
                                
                            //Otherwise
                            else {
                            
                                y = obj_playerparent.y;
                                if (view_vspeed[view_current] != 4)
                                    view_vspeed[view_current] = 4;
                            }
                        }
                    }
                    
                    //If the player is below the camera, catch him instantly
                    if (obj_playerparent.y &gt; y) {
                    
                        y = obj_playerparent.y;
                        if (view_vspeed[view_current] != -1)
                            view_vspeed[view_current] = -1;
                    }
                }
            }
        }
        else
            y = follow.y;
        
        //If the camera is to the right and the player is from a certain distance from the camera
        if ((orientation == 1) &amp;&amp; (follow.x &gt; x-16)) {
    
            //If the player has ended a level
            if (follow == obj_player_clear) {
            
                //If the player did not stopped yet...
                if (obj_player_clear.ready3 == 0) {
                
                    //Scroll the camera at a certain speed until the camera catches up.
                    if (follow.x &gt; x-12)
                        x += 2+follow.hspeed;
                    else
                        x = follow.x+16;                           
                }
            }
            
            //Otherwise
            else {
            
                //Scroll the camera at a certain speed until the camera catches up.
                if (follow.x &gt; x-12)
                    x += 2+follow.hspeed;
                else
                    x = follow.x+16;
            }
        }
        
        //Otherwise, if the camera is to the left and the player is from a certain distance from the camera
        else if ((orientation == -1) &amp;&amp; (follow.x &lt; x+16)) {
        
            //Scroll the camera at a certain speed until the camera catches up.
            if (follow.x &lt; x+12)
                x -= 2-follow.hspeed;
            else
                x = follow.x-16;    
        }
        
        //If the player is moving to the left and the camera is panning to the right, make the camera pan to the left
        if ((follow.x-xprevious &lt; 0) &amp;&amp; (follow.x &lt; x-40))
            orientation = -1;
        
        //Otherwise, if the player is moving to the right and the camera is panning to the left, make the camera pan to the right.
        else if ((follow.x-xprevious &gt; 0) &amp;&amp; (follow.x &gt; x+40))
            orientation = 1;
    }
}

//Round position
x = round(x);
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic parameters

//Get 1-UP for each 100 coins
if (global.coins &gt; 99) {
    
    //Reset counter
    global.coins -= 100;
    
    //Get 1-UP
    obj_controller.givelives++;
}

//Warn the player that the p-switch is running out
if (switchon) {
    
    //If the p-switch effect will last less than 2 seconds, warn the player
    if (warning == 0)
    &amp;&amp; ((alarm[6] &gt;= 31) &amp;&amp; (alarm[6] &lt; 120)) {
    
        //Play 'Switch Timer' sound
        audio_play_sound(snd_switchtimer, 0, false);
        
        //Warn
        warning = 1;
    }
    else if ((warning == 1) &amp;&amp; (alarm[6] &gt; 120))
        warning = 0;
}
else
warning = 0;

//Warn the player that the p-switch is running out
if (gswitchon) {
    
    //If the p-switch effect will last less than 2 seconds, warn the player
    if (swarning == 0)
    &amp;&amp; ((alarm[7] &gt;= 31) &amp;&amp; (alarm[7] &lt; 120)) {
    
        //Play 'Switch Timer' sound
        audio_play_sound(snd_switchtimer, 0, false);
        
        //Warn
        swarning = 1;
    }
    else if ((swarning == 1) &amp;&amp; (alarm[7] &gt; 120))
        swarning = 0;
}
else
swarning = 0;

//Drop reserve item
if (instance_exists(obj_playerparent))
&amp;&amp; (barrier == 1)
&amp;&amp; (obj_playerparent.control_enable == true)
&amp;&amp; (input_check_pressed(input.select))
    event_user(1);

//Deactivate objects under the following parents
instance_deactivate_object(obj_deactenemyparent);
instance_deactivate_object(obj_deactivateparent);

//Activate things that are on screen
instance_activate_region(view_xview[view_current]-32, view_yview[view_current]-32, view_wview[view_current]+64, view_hview[view_current]+64, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up object to follow

//If the player does exist
if (instance_exists(obj_followme))
    follow = obj_followme;
    
//Otherwise, if the player has cleared the level
else if (instance_exists(obj_player_clear))
    follow = obj_player_clear;
    
//Otherwise, if the player exists and he just died
else 
    follow = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the music is not the same as the music used in the last room

if (global.levelmusic != inisection) {

    //Stop old stream
    alarm[1] = 1;
    
    //Play new stream
    global.levelmusic = inisection;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop all music and fanfares

//If the stream is playing
if (audio_is_playing(global.stream)) {
    
    //Stop the stream...
    audio_stop_sound(global.stream);
    
    //...and free it from memory
    audio_destroy_stream(global.stream);
    global.stream = noone;
}

//Prevent it from playing
musicdisable = 1;

//Stop starman theme
audio_stop_sound(bgm_starman);

//Stop P-Switch music
audio_stop_sound(bgm_pswitch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin Gray P-Switch events

//Activate Gray P-Switch effects and reset coins if a silver switch was not activated before
if (gswitchon == false) {

    //Remember the effect was activated
    gswitchon = true;
    
    //Turn munchers into coins
    with (obj_muncher) event_user(0);
    
    //Reset collected coins
    if (global.scoins &gt; 0)
        global.scoins = 0;
}

//Stop music
alarm[1] = 1;

//Stop invincibility music
audio_stop_sound(bgm_starman);

//Stop P-Switch music if it is playing...
if (audio_is_playing(bgm_pswitch)) {

    audio_stop_sound(bgm_pswitch);
}

//...and play it again
audio_loop_sound(bgm_pswitch, 468000, 535500, 44100, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin P-Switch events

//If the switch effect is off
if (switchon == false) {

    //Turn on the switch
    switchon = true;
    
    //Replace items
    pswitch_on();
}

//Stop music
alarm[1] = 1;

//Stop invincibility music
audio_stop_sound(bgm_starman);

//Stop P-Switch music if it is playing...
if (audio_is_playing(bgm_pswitch)) {

    audio_stop_sound(bgm_pswitch);
}

//...and play it again
audio_loop_sound(bgm_pswitch, 468000, 535500, 44100, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Release reserve item

//If there's an item in the reserve item box
if (global.reserveitem != cs_pow_small) {

    //Create the reserve item
    with (instance_create(view_xview[0] + view_wview[0]/2, view_yview[0]+14, obj_reserveitem)) {
    
        //Mushroom
        if (global.reserveitem == cs_pow_super)
            sprite_index = spr_mushroom;
            
        //Fire Flower
        else if (global.reserveitem == cs_pow_fire)
            sprite_index = spr_fireflower;
            
        //Cape Feather
        else if (global.reserveitem == cs_pow_cape)
            sprite_index = spr_feather;
    }
    
    //Empty the box
    global.reserveitem = cs_pow_small;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy all player objects

with (obj_player_warp) instance_destroy();
with (obj_player_door) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop P-Switch BGM

audio_stop_sound(bgm_pswitch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles checkpoints, and other stuff

//Manage music
event_user(5);

//If the time is set to something, and was not set in a previous room, set it
if (leveltime &gt; 0) 
&amp;&amp; (global.time == 0) {

    global.time = leveltime;
    if (global.time &lt; 101)
        alarm[3] = 40;
}

//If the timer was set
if (global.time &gt; 0)
    alarm[2] = 40;

//If the player just started the level
if (global.mariostart == 0) {

    //The level has started
    global.mariostart = 1;
    
    //If the checkpoint exists
    if (instance_exists(global.checkpoint)) {
    
        //Destroy player object
        event_user(0);
        
        //Create new player object
        player_create(global.checkpoint.xcoor, global.checkpoint.ycoor);
    }
    
    //Create 'Mario Start!' text
    instance_create(0, 0, obj_mariostart);
}
    
//If the player came from another room
if (global.postchange != -1) {

    //Destroy player objects
    event_user(0);
    
    //Create the appropiate object at the given position
    with (obj_warpnode) {
    
        if (global.exit_id == myid)
            event_user(0);
    }
    
    //Allow warp
    global.postchange = -1;
}

//If the player was riding a yoshi on the previous room
if (global.mount == 1) {

    //Create a ridden yoshi
    with (instance_create(x, y, obj_yoshi)) {
    
        state = yoshistate.ridden;
    }
}

//Otherwise, if the player carried an item from the previous room
else if (global.carrieditem != noone) {
    
    //Create it
    with (instance_create(x, y, global.carrieditem)) {
    
        //Hold the item
        held = 1;
        
        //Set up the sprite
        if (global.carriedsprite != noone) {
        
            //Change the sprite
            sprite_index = global.carriedsprite;
            
            //Reset sprite
            global.carriedsprite = noone;    
        }
    }
    
    //Check object to follow
    event_user(15);
    
    //Check if the player exists and make it hold if so.
    if (instance_exists(obj_playerparent))
        obj_playerparent.holding = 1;
    
    //Otherwise
    else {
    
        if (instance_exists(follow))
            follow.holding = 1;
    }
    
    //Reset the variable
    global.carrieditem = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with parallax backgrounds.

//Draw background
if (background_height[0] &lt; room_height)
&amp;&amp; (background_height[0] &gt; view_hview[0])
    draw_background_tiled_horizontal_ext(background_index[0], round(view_xview[0]/2+(background_x[0]+background_hspeed[0])), background_y[0]+(view_yview[0]*(room_height-background_height[0])/(room_height-view_hview[0])), 1, 1, 0, background_blend[0], background_alpha[0]);
else
    draw_background_tiled_horizontal_ext(background_index[0], round(view_xview[0]/2+(background_x[0]+background_hspeed[0])), background_y[0], 1, 1, 0, background_blend[0], background_alpha[0]);

//Draw pit marker
draw_background_ext(bgr_pit, 0, room_height-32, room_width/16, 1, 0, background_blend[0], 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
