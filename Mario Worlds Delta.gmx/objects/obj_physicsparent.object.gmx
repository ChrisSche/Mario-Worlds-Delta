<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mushroom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics Parent

//Does this item bounce in the ground?
bouncy = false;

//Is the object in a slope?
slope = false;

//Combo
hitcombo = false;

//Is the object underwater?
swimming = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with moving platforms

/*
//  IMPORTANT NOTE:
//
//  This event must be called in a 'End Step' event, otherwise it will not work properly.
*/

//Check for a moving platform
var moving = collision_rectangle(bbox_left, bbox_top-5, bbox_right, bbox_bottom+4+vspeed, obj_platformparent, 0, 0);

//If there's a moving platform
if (moving) {

    //With this platform
    with (moving) {
    
        //If this instance is on the platform
        if (collision_rectangle(bbox_left, bbox_top-5, bbox_right, bbox_top+4, other.id, 0, 0)) 
        &amp;&amp; (other.id.bbox_bottom &lt; yprevious+5)
        &amp;&amp; (other.id.gravity == 0) {
        
            //If this moving object is a moving platform
            if (object_index == obj_icicle)
            || (object_index == obj_donut)
            || (object_index == obj_donut_red) {
            
                //If moving down
                if (vspeed &gt; 0) {
                
                    //Check if falling through a semisolid
                    var check = collision_rectangle(other.id.bbox_left, bbox_top-5, other.id.bbox_right, bbox_top+1, obj_semisolid, 0, 1);
                    
                    //If not falling through, or falling througn a lower donut, snap the player vertically
                    if (!check)
                    || ((check.object_index == obj_donut || check.object_index == obj_donut_red || check.object_index == obj_icicle) &amp;&amp; (check.y &gt; y || (check.y == y &amp;&amp; check &gt; id)))
                        other.id.y = bbox_top-(other.id.sprite_height-sprite_get_yoffset(other.id.sprite_index));
                }               
            }
            
            //Otherwise
            else {
                    
                //Snap the instance vertically
                other.id.y = bbox_top-(other.id.sprite_height-sprite_get_yoffset(other.id.sprite_index));
            }
            
            //Move the player horizontally if there is no solid in his way
            if (x &lt; x-xprevious) &amp;&amp; (!collision_rectangle(other.id.bbox_left-1, other.id.bbox_top+4, other.id.bbox_left, other.id.bbox_bottom-5,obj_solid,0,0))
            || (x &gt; x-xprevious) &amp;&amp; (!collision_rectangle(other.id.bbox_right, other.id.bbox_top+4, other.id.bbox_right+1, other.id.bbox_bottom-5,obj_solid,0,0))
                other.id.x += x-xprevious;
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics logic

//Default wall collision
event_user(3);

//Default floor collision
event_user(4);

//Default conveyor collision
event_user(5);

//Check for lava
var lava = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_lava, 0, 0);

//If there's lava
if (lava) {

    //Play 'Burn' sound
    audio_play_sound(snd_burn, 0, false);

    //Create smoke
    with (instance_create((bbox_left+bbox_right)/2, (bbox_top+bbox_bottom)/2, obj_smoke)) sprite_index = spr_smoke_big;
    
    //Create splash effect
    with (instance_create((bbox_left+bbox_right)/2, (bbox_top+bbox_bottom)/2-8, obj_smoke)) {
    
        //Set the animation speed
        image_speed = 0.3
        
        //Set the sprite
        if (lava.sprite_index == spr_lava)
            sprite_index = spr_splash_lava;
        else if (lava.sprite_index == spr_lava_choco)
            sprite_index = spr_splash_choco;
        else if (lava.sprite_index == spr_lava_poison)
            sprite_index = spr_splash_poison;        
    }
    
    //Destroy
    instance_destroy();
}

//Check for water
var water = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0);

//If there's water
if (water)
&amp;&amp; (swimming == false) {

    //Make the object swim
    swimming = true;
    
    //Stop vertical movement
    if (vspeed &gt; 0)    
        vspeed = 0;
    
    //Create a splash effect
    with (instance_create(round(bbox_left+bbox_right)/2, water.y-16, obj_smoke)) {
     
        sprite_index = spr_splash;
        image_speed = 0.3;
    }
}

//Otherwise
else if (!water)
&amp;&amp; (swimming == true) {

    //Stop swimming
    swimming = false;
    
    //Create a splash effect
    with (instance_create(round(bbox_left+bbox_right)/2, y-16, obj_smoke)) {
     
        sprite_index = spr_splash;
        image_speed = 0.3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spinner">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bump with cape

if (vspeed &gt;= 0)
    vspeed = -5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bump with block

if (other.vspeed &lt; 0)
&amp;&amp; (vspeed &gt;= 0) 
&amp;&amp; (bbox_bottom &lt; yprevious+5)
    vspeed = -2.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default conveyor collision

//Collision with conveyor
var conveyor = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+1, obj_conveyorparent, 0, 0);

//If there's a conveyor
if (conveyor)
&amp;&amp; (conveyor.image_speed != 0) {

    //If the conveyor is moving to the right
    if (conveyor.image_speed &gt; 0) {
    
        if (!collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-4, obj_solid, 1, 0))
            x += conveyor.image_speed;
    }
    
    //Otherwise, if the conveyor is moving to the left
    else if (conveyor.image_speed &lt; 0) {
    
        if (!collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-4, obj_solid, 1, 0))
            x += conveyor.image_speed;            
    }
}

//Collision with escalator
var escalator = collision_rectangle(x-2, bbox_bottom+4, x+2, bbox_bottom+8, obj_escalatorparent, 1, 0);
if (escalator)
&amp;&amp; (escalator.image_speed != 0) {

    //If the NPC is on the ground...
    if (vspeed == 0) {
    
        //Move horizontally
        x += escalator.add;
        
        //Ensure that the player has correct escalator collision
        if (collision_rectangle(x-2, bbox_bottom+4, x+2, bbox_bottom+8, escalator.myslope, 1, 0))
        &amp;&amp; (!collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom-4, escalator.myslope, 1, 0))
            y++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor collision

//Check if above a slope
slope = player_inslope();

//If moving down
if (vspeed &gt;= 0) {

    //Check for a semisolid
    var semisolid = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+vspeed, obj_semisolid, 0, 0);
    
    //If there's a semisolid below
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
    &amp;&amp; (!collision_rectangle(x-2, bbox_bottom, x+2, bbox_bottom+4, obj_slopeparent, 1, 0))
        y = semisolid.bbox_top-(sprite_height-sprite_get_yoffset(sprite_index));
}

//Embed into the slope to ensure correct slope mechanics
if (collision_rectangle(x-2, bbox_bottom, x+2, bbox_bottom+4, obj_slopeparent, 1, 0))
&amp;&amp; (!collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom-4, obj_slopeparent, 1, 0))
&amp;&amp; (vspeed == 0)
    y += 4;

///Handle slope collisions
if (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom, obj_slopeparent, 1, 0))
&amp;&amp; (!collision_rectangle(x-2, bbox_bottom-8, x+2, bbox_bottom-8, obj_slopeparent, 1, 0)) {

    while (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom, obj_slopeparent, 1, 0))
        y--;
}

//Check for floor objects
if (collision_rectangle(bbox_left, bbox_bottom+1, bbox_right, bbox_bottom+1, obj_semisolid, 0, 0))
&amp;&amp; (!collision_rectangle(bbox_left, bbox_bottom-4, bbox_right, bbox_bottom-4, obj_semisolid, 0, 0))
|| (collision_rectangle(x-2, bbox_bottom+1, x+2, bbox_bottom+1, obj_slopeparent,1,0)) {

    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0) {
    
        //If the object cannot bounce
        if (bouncy == 0)
            vspeed = 0;
        
        //Otherwise
        else {
        
            //Check for a moving platform
            var check = collision_rectangle(bbox_left, bbox_bottom+1, bbox_right, bbox_bottom+1, obj_platformparent, 0, 0);
        
            //If this object is on a moving platform
            if (check)
            &amp;&amp; (check.vspeed != 0)
                vspeed = 0;
            
            //Otheriwse, bounce
            else {
            
                if (vspeed &gt; 0.5)
                    vspeed = -vspeed/2;
                else
                    vspeed = 0;
            }
        }
    }
}
else {

    //Set the gravity when not underwater
    if (!swimming) {
    
        //Gravity
        gravity = 0.2;
        
        //Cap vertical speed
        if (vspeed &gt; 4)
            vspeed = 4;
    }
    
    //Otherwise, set the gravity when underwater
    else {
    
        //Gravity
        gravity = 0.1;
        
        //Cap vertical speed
        if (vspeed &gt; 1)
            vspeed = 1;
    }
}

//If moving up...
if (vspeed &lt; 0) {

    //...and the NPC bumps a ceiling
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
    
        //Prevent the NPC from getting embed on the ceiling      
        while ((collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_solid, 1, 0))
        || (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0))) {
        
            y++;
        }
        
        //Check if there's a block on the way.
        var block = collision_rectangle(bbox_left, bbox_top-2, bbox_right, bbox_top-1, obj_blockparent, 0, 0);
        
        //If there's a block on the way.
        if (block) 
        &amp;&amp; (object_get_parent(object_index) == obj_holdparent) {
            
            //If the block has NOT been hit.
            if (block.ready == 0) {
        
                //Trigger block events
                with (block) {
                
                    //Block is hit
                    ready = 1;
                    
                    //Set vertical speed
                    vspeed = -2.25;
                    alarm[0] = 4;
                    alarm[3] = 4;
                    
                    //Perform block specific events
                    event_user(0);
                }
            }
        }
        
        //Stop vertical movement
        vspeed = 0;
    }
}

//Prevent the NPC from overlapping ceiling slopes
if (vspeed != 0) {

    //While the player overlaps a slope
    while (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0)) {
    
        //Move it down
        y++;
        
        //If moving up
        if (vspeed &lt; 0)
            vspeed = 0;
    }            
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

//If moving right and the NPC bumps a wall to the right
if (hspeed &gt; 0) 
&amp;&amp; (collision_rectangle(bbox_right, bbox_top+5, bbox_right+1, bbox_bottom-4-(slope*4), obj_solid, 1, 0)) {
    
    //Stop horizontal movement
    hspeed = -hspeed;
    
    //Prevent the NPC from getting embed in the wall
    while (collision_rectangle(bbox_right, bbox_top+5, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x--;
}

//Otherwise, if moving left and the NPC bumps a wall to the left
else if (hspeed &lt; 0)
&amp;&amp; (collision_rectangle(bbox_left-1, bbox_top+5, bbox_left, bbox_bottom-4-(slope*4), obj_solid, 1, 0)) {
    
    //Stop horizontal movement
    hspeed = -hspeed;
    
    //Prevent the NPC from getting embed in the wall
    while (collision_rectangle(bbox_left, bbox_top+5, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw NPC

draw_sprite_ext(sprite_index, -1, x, y+1, 1, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
