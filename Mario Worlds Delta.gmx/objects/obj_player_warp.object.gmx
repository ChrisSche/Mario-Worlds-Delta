<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>11</depth>
  <persistent>0</persistent>
  <parentName>obj_followme</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player warping through a pipe

//Default variables
destination = noone;
exit_dir = 0;
exit_id = -1;

//Whether the player can exit the pipe
ready = 0;

//Whether the player can move
canmove = 1;

//Whether the player is holding an item
holding = 0;

//Handle the held item sprite and frame
myitem = -1;
myframe = 0;

//Handle the palette of the player when invincible
isflashing = 0;
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update palette

if (instance_exists(obj_invincibility)) {
    
    //Increment isflashing and reset it if required
    isflashing++;
    if (isflashing &gt; 3) {
    
        isflashing = 0;
    }
    
    //If the invincibility timer is greater than 2 seconds
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[2] = 1;
    else
        alarm[2] = 4;
}
else {

    isflashing = 0;
    alarm[2] = 1;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow movement

//Play 'Powerdown' sound
audio_play_sound(snd_powerdown, 0, false);

//Allow movement
canmove = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to the destination room

//Set exit type
global.postchange = 1;

//Set exit direction
global.exit_dir = exit_dir;

//Set warp id
global.exit_id = exit_id;

//If the pipe does not lead to a different room
if (destination == noone) {

    //Move the player
    with (obj_warpnode) event_user(0);
    
    //Perform fade out
    with (obj_controller) {
    
        event_user(0);
        size = 0;
    }
}
else
    room_goto(destination);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate

//If moving vertically
if (vspeed != 0) {

    //Set the sprite
    sprite_index = player_spin();
    
    //Do not animate
    image_speed = 0;
    image_index = 1;
}

//Otherwise
else {

    //Animate
    image_speed = 0.15;    
    
    //Set the sprite
    if (holding == 0)
        sprite_index = player_walk();
    else
        sprite_index = player_hold2();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit from the pipe

//If the player can exit the pipe
if (ready == 1) {

    //If there's not a solid overlapping
    if (!collision_point(x-8, bbox_top, obj_solid, 0, 0))
    &amp;&amp; (!collision_point(x+7, bbox_top, obj_solid, 0, 0))
    &amp;&amp; (!collision_point(x-8, bbox_bottom, obj_solid, 0, 0))
    &amp;&amp; (!collision_point(x+7, bbox_bottom, obj_solid, 0, 0)) {
    
        //Create a new player object...
        with (player_create(x, y)) {
                
            xscale = other.image_xscale;
            isflashing = other.isflashing;
        }
        
        //...and destroy this object
        instance_destroy();
    }
}

//If the player can move
if (canmove == 1) {
    
    //Set speed
    if ((direction == 90) || (direction == 270))
        speed = 1;
    else
        speed = 0.5;
}

//Set facing direction
if (hspeed &gt; 0)
    image_xscale = 1;
else if (hspeed &lt; 0)
    image_xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//If the player is holding something and is not moving vertically
if (holding == 1) &amp;&amp; (vspeed == 0) {

    if (global.powerup == cs_pow_small)
        draw_sprite_ext(myitem, myframe, round(x)+(10*image_xscale), round(y)-2, 1, 1, 0, c_white, 1);
    else
        draw_sprite_ext(myitem, myframe, round(x)+(10*image_xscale), round(y)-4, 1, 1, 0, c_white, 1);
}

//Draw cape
if (vspeed != 0)
&amp;&amp; (canmove == 1)
&amp;&amp; (global.powerup &gt;= cs_pow_cape) {

    draw_sprite_ext(spr_cape_climb, 1, round(x), round(y), image_xscale, 1, 0, c_white, 1);
}

//Set the palette
player_set_palette(id);

//Draw the player
draw_sprite_ext(sprite_index, -1, round(x), round(y), image_xscale, 1, 0, c_white, 1);

//Reset shader
pal_swap_reset();

//Draw cape
if (vspeed == 0)
&amp;&amp; (canmove == 1)
&amp;&amp; (global.powerup &gt;= cs_pow_cape) {

    draw_sprite_ext(spr_cape_walk, -1, round(x), round(y), image_xscale, 1, 0, c_white, 1);
}

//If the player is holding something and it is moving vertically
if (holding == 1) &amp;&amp; (vspeed != 0) {

    if (global.powerup == cs_pow_small)
        draw_sprite_ext(myitem, myframe, round(x), round(y)-2, 1, 1, 0, c_white, 1);
    else
        draw_sprite_ext(myitem, myframe, round(x), round(y)-4, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
