<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_thwomp_roll</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rollin' Thwomp

//Inherit event from parent
event_inherited();

//How vulnerable is this enemy to items
vulnerable = 99;

//How vulnerable is this enemy to the player
stomp = 2;

//How vulnerable is this enemy to Yoshi
edible = 2;

//Death Sprite
deathsprite = sprite_index;

//Angle
angle = 0;

//Animate
image_speed = 0.15;

//Start moving
alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rollin' Thwomp logic 
        
//Inherit event
event_inherited();

//Check for a slope
slope_below = collision_rectangle(x-2, bbox_bottom+1, x+2, bbox_bottom+2, obj_slopeparent, 1, 0);

//If there's a slope below the player
if (slope_below) {

    hspeed += slope_below.add/3;
    if (hspeed &gt; 3)
        hspeed = 3;
    else if (hspeed &lt; -3)
        hspeed = -3;
}
    
//Set angle
angle += (hspeed*4)*-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

//If moving right and the NPC bumps a wall to the right
if (hspeed &gt; 0) 
&amp;&amp; ((collision_rectangle(bbox_right, bbox_top+5, bbox_right+1, bbox_bottom-4-(slope*4), obj_solid, 1, 0))
|| (collision_rectangle(bbox_right, bbox_top+5, bbox_right+1, bbox_bottom-4-(slope*4), obj_slope_steeper_r, 1, 0))) {
    
    //Stop horizontal movement
    hspeed = -hspeed/2;
    
    //Prevent the NPC from getting embed in the wall
    while (collision_rectangle(bbox_right, bbox_top+5, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x--;
}

//Otherwise, if moving left and the NPC bumps a wall to the left
else if (hspeed &lt; 0)
&amp;&amp; ((collision_rectangle(bbox_left-1, bbox_top+5, bbox_left, bbox_bottom-4-(slope*4), obj_solid, 1, 0))
|| (collision_rectangle(bbox_left-1, bbox_top+5, bbox_left, bbox_bottom-4-(slope*4), obj_slope_steeper_l, 1, 0))) {
    
    //Stop horizontal movement
    hspeed = -hspeed/2;
    
    //Prevent the NPC from getting embed in the wall
    while (collision_rectangle(bbox_left, bbox_top+5, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UNUSED ON THIS OBJECT
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Rollin' thwomp

draw_sprite_ext(sprite_index, -1, round(x), round(y), xscale, 1, angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
