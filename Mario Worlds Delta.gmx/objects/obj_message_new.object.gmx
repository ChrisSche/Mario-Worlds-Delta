<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_message</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Displays a message

//Ini section to read
inisection = "NO_MSG";

//Message to display
message = "";

//Manages message animation
ready = 0;

//Scale
scale = 0;

//Is this a switch message? (Closes automatically)
switchmsg = false;

//Create a screenshot
back = background_create_from_surface(application_surface, 0, 0, global.gw, global.gh, 0, 0);

//Deactivate everything except this object
instance_deactivate_all(1);

//Activate persistent object
instance_activate_object(obj_controller);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the map

wmap_return();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message box logic

//If scaling up
if (ready == 0) {

    scale += 0.05;
    if (scale &gt; 1) {
    
        //Force set max scale
        scale = 1;
        
        //Display message
        ready = 1;
        
        //Open INI
        ini_open("MWDMessage.ini");
        
        //Obtain the message from the given INI section
        message = ini_read_string(inisection, 'text', 0);
        
        //Close INI
        ini_close();
    }
}

//Otherwise, if the message is being displayed
else if (ready == 1) {

    //If this is a regular message block, allow it to be closed with 'Action 0'
    if (switchmsg == 0)
    &amp;&amp; ((input_check_pressed(input.action0))
    || (input_check_pressed(input.action2)))
        ready = 2;
        
    //Otherwise, if this is a switch palace message block
    else if (switchmsg == 1) {
    
        //If the course clear theme is not playing
        if (!audio_is_playing(snd_palaceclear)) {
        
            ready = 3;
            alarm[0] = 120;
        }
    }
}

//Otherwise, if scaling down
else if (ready == 2) {

    scale -= 0.05;
    if (scale &lt; 0) {
    
        //Delete the screenshot
        background_delete(back);
    
        //Activate everything
        instance_activate_all();
        
        //Reset the state of the shift key
        keyboard_clear(input.action0);
        keyboard_clear(input.action2);
        
        //Destroy the message box
        instance_destroy();            
    }    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display the message box

//Draw the screenshot if it exists
if (background_exists(back)) {

    //Disable alpha blending
    draw_enable_alphablend(0);
    
    //Draw screenshot
    draw_background(back, view_xview[0], view_yview[0]);
    
    //Enable alpha blending
    draw_enable_alphablend(1);
}

//Draw the message box
draw_sprite_ext(spr_message, 0, view_xview[0] + view_wview[0]/2, view_yview[0] + 78, scale, scale, 0, c_white, 1);

//Set up the font
draw_set_font(global.fontmsg);

//Set up the colour
draw_set_colour(c_white);

//If the text should be displayed
if (scale == 1) {

    //Draw the text
    draw_text(view_xview[0] + view_wview[0] / 2 - 72, view_yview[0] + 46, string(message));
    
    //If this is a switch palace message, draw blocks
    switch (inisection) {
    
        //Yellow Switch Palace
        case ("MSG_SWY"): {
        
            draw_sprite(spr_area_y, 1, view_xview[0] + view_wview[0]/2 - 41, view_yview[0] + 78);
            draw_sprite(spr_area_y, 0, view_xview[0] + view_wview[0]/2 + 24, view_yview[0] + 78);
        } break;
        
        //Yellow Switch Palace
        case ("MSG_SWG"): {
        
            draw_sprite(spr_area_g, 1, view_xview[0] + view_wview[0]/2 - 41, view_yview[0] + 78);
            draw_sprite(spr_area_g, 0, view_xview[0] + view_wview[0]/2 + 24, view_yview[0] + 78);
        } break;
        
        //Yellow Switch Palace
        case ("MSG_SWR"): {
        
            draw_sprite(spr_area_r, 1, view_xview[0] + view_wview[0]/2 - 41, view_yview[0] + 78);
            draw_sprite(spr_area_r, 0, view_xview[0] + view_wview[0]/2 + 24, view_yview[0] + 78);
        } break;
        
        //Yellow Switch Palace
        case ("MSG_SWB"): {
        
            draw_sprite(spr_area_b, 1, view_xview[0] + view_wview[0]/2 - 41, view_yview[0] + 78);
            draw_sprite(spr_area_b, 0, view_xview[0] + view_wview[0]/2 + 24, view_yview[0] + 78);
        } break;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
