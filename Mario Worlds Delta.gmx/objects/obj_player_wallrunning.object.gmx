<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mask_player_warp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask_player_warp</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player when it's running on walls or ceilings

//Destroy spinner object
with (obj_spinner) instance_destroy();

//Make player invisible
with (obj_playerparent) {

    visible = false;
    control_enable = false;
}

//Sprite
sprite_index = player_run();

//Angle
angle = 0;

//Speed
speed = obj_playerparent.hspeed_walk+0.4;

//Direction
direction = 90;

//Whether the player can turn
ready = false;

//Set angle
alarm[0] = 4;

//Allow turn
alarm[1] = 16;

//Default direction
//-1: Counter clockwise
//1: Clockwise
xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare the player to stop wallrunning

///Make the player visible and enable it's controls
with (obj_playerparent) {

    visible = 1;
    control_enable = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow turning

ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set angle

angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wallrunner logic

//If the player does not exist or the player is transforming
if (!instance_exists(obj_playerparent))
|| (instance_exists(obj_player_transform)) {

    //Destroy and exit
    instance_destroy();
    exit;
}

//Update sprite
sprite_index = player_run();

//Animation
image_speed = 0.4;

//Snap player
obj_playerparent.hspeed = 0;
obj_playerparent.vspeed = 0;
obj_playerparent.x = x;
obj_playerparent.y = y;

//Jumping
if (input_check_pressed(input.action0)) {

    //Play 'Jump' sound
    audio_stop_play_sound(snd_jump, 0, false);

    //Make the player jump
    with (obj_playerparent) {
    
        vspeed = other.vspeed;
        hspeed = -3*other.xscale;
        xscale = -xscale;
        angle = 45;
        alarm[2] = 4;
    }
    
    //Destroy
    instance_destroy();
}

//If the player is running in a clockwise movement
else if (xscale &gt; 0) {

    //If the player can turn and there's not a wall at the right
    if (ready)
    &amp;&amp; (!collision_rectangle(bbox_right+4, bbox_top, bbox_right+8, bbox_bottom, obj_solid, 0, 0)) {
    
        //With the player
        with (obj_playerparent) {
        
            hspeed = other.speed;
            pmeter = 112;
            angle = 45;
            x += 4.5;
            alarm[2] = 4;
        }
        
        //Destroy
        instance_destroy();
    }

    //If both 'Control' and 'Right' are held
    if ((input_check(input.action1)) &amp;&amp; (input_check(input.right)))
        speed += .1;
    else
        speed -= .05;
}

//If the player is running on a counter-clockwise movement
else if (xscale &lt; 0) {
    
    //If the player can turn and there's not a wall at the right
    if (ready)
    &amp;&amp; (!collision_rectangle(bbox_left-8, bbox_top, bbox_left-4, bbox_bottom, obj_solid, 0, 0)) {
    
        //With the player
        with (obj_playerparent) {

            hspeed = other.speed*-1;
            pmeter = 112;
            angle = 315;
            x -= 4.5;
            alarm[2] = 4;
        }
        
        //Destroy
        instance_destroy();
    }
    
    //If both 'Control' and 'Left' are held
    if ((input_check(input.action1)) &amp;&amp; (input_check(input.left)))
        speed += .1;
    else
        speed -= .05;
}

//If the player slows down or makes contact with a solid
if (speed &lt; (obj_playerparent.hspeed_walk+0.3)) 
|| ((ready) &amp;&amp; (position_meeting(x, y, obj_solid))) {

    //With the player
    with (obj_playerparent) {
    
        hspeed = other.hspeed;
        vspeed = other.vspeed;
        angle = 315;
        alarm[2] = 4;
    }
    
    //Destroy
    instance_destroy();
}

//Cap maximum speed
if (speed &gt; obj_playerparent.hspeed_run)
    speed = obj_playerparent.hspeed_run;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Set the palette
player_set_palette(obj_playerparent);

//Draw the cape if the player has the cape powerup
if (global.powerup == cs_pow_cape) {

    draw_sprite_ext(spr_cape_walk, -1, round(x), round(y)+1, 1, xscale, angle, c_white, 1);
}

//Draw player
draw_sprite_ext(sprite_index, -1, round(x), round(y), 1, xscale, angle, c_white, obj_playerparent.image_alpha);

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
