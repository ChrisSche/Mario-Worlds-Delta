<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario Worlds Delta Controller Object (This is required to run the game, do not remove it.)

//Initialize Global Variables
init_globals();

//Initialize Shader Variables
init_pixel();
init_shockwave();

//How the screen is fading
//0: From black
//1: To black
mode = 0;

//How much the screen is faded
fade = 0;

//Screenshot of the game, if it exists
back = -1;

//Screen shaking
port_x = 0;
port_y = 0;

//Game message
message = "";

//Display FPS
showfps = false;

//Game width / heigh
global.gw = 384;
global.gh = 216;

//Freeze the screen?
global.screenfreeze = true;

//In-Game Font
global.font = font_add_sprite(spr_font, ord('!'), 0, 0);

//In-Message Font
global.fontmsg = font_add_sprite(spr_font_message, ord('!'), 0, 0);

//Disable application surface automatic drawing
application_surface_draw_enable(0)

//Set the epsilon value for floating point numbers
math_set_epsilon(0.00001);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the screen shake when certain sounds are playing.

if (audio_is_playing(snd_thud)) {
    
    //Repeat
    alarm[11] = 1;    
    
    //Shake the screen...    
    port_x = random_range(4,-4);
    port_y = random_range(4,-4);
}
else {

    port_x = 0;
    port_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable shockwave

shock_enabled = false;
var_time_var = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay applying settings

//Apply fullscreen
window_set_fullscreen(fullscreen);

//Apply filtering and VSync
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to title

global.targetroom = rm_engine;
room_goto(rm_levelstart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset message

message = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate objects

instance_deactivate_all(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop fading to black

//Set mode to fade from black
mode = 0;

//Begin fading
fade = 0;

//Activate everything
instance_activate_all();

//Delete the screenshot
if (background_exists(back))
    background_delete(back);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle various in-game variables

//Update Shockwave shader
update_shockwave();

//Prevent lives from going over 99
if (lives &gt; 99)
    lives = 99;

//Prevent score from going over 999.999.990
if (score &gt; 99999990)
    score = 99999990;

//Make the screen shake when the 'Thwomp' sound plays
if (!audio_is_playing(snd_thud))
    alarm[11] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the hot keys

//Quit the game when ALT+F4 are pressed.
if (keyboard_check_pressed(vk_f4))
    game_end();
    
//Restart the game when ALT+R are pressed.
else if (keyboard_check_pressed(ord('R'))) {

    //Stop all playing sounds
    audio_stop_all();
    
    //Initialize globals
    init_globals();
    
    //Go to the title screen
    room_goto(rm_engine);
}

//Fullscreen (Handled by GM: Studio)
else if (keyboard_check_pressed(vk_enter)) {

    //Toggle between fullscreen or windowed mode.
    fullscreen = !fullscreen
    
    //Display message
    if (fullscreen)
        message = "FULLSCREEN ON";
    else
        message = "FULLSCREEN OFF";
        
    //Apply settings
    event_user(1);
}

//Toggles VSync
else if (keyboard_check_pressed(ord('V'))) {

    //Toggle vertical syncronization on / off.
    vsync = !vsync
    
    //Display message
    if (vsync)
        message = "VSYNC ON";
    else
        message = "VSYNC OFF";
        
    //Apply settings
    event_user(1);
}

//Toggle FPS display
else if (keyboard_check_pressed(ord('F')))
    showfps = !showfps

//Set default window size
else if (keyboard_check_pressed(ord('1'))) {

    filter = 0;
    message = "1X WINDOW SIZE";
    event_user(1);
}

//Set 2x window size
else if (keyboard_check_pressed(ord('2'))) {

    filter = 1;
    message = "2X WINDOW SIZE";
    event_user(1);
}

//Set 3x window size
else if (keyboard_check_pressed(ord('3'))) {

    filter = 2
    message = "3X WINDOW SIZE";
    event_user(1);
}
    
//Reset the message
alarm[3] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a shockwave

//Enable shockwave
shock_enabled = true;

//Reset timer
var_time_var = 0;

//Disable shockwave
alarm[6] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the screen to be displayed

//Temporary variable
var s;

//Normal
if (filter = 0)
    s = 1;

//HQ2X
else if (filter = 1)
    s = 2;

//HQ4X
else if (filter = 2)
    s = 3;

//Reset display
display_reset(0, vsync);

//Set up the window
window_set_size(global.gw*s, global.gh*s);

//Set up the display
display_set_gui_size(global.gw*s, global.gh*s);

//Center the window
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black

//If this event was called manually
if (mode == 0) {

    //Take a screenshot
    back = background_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], 0, 0);
    
    //Pixel size
    size = 64;

    //Deactivate everything
    instance_deactivate_all(1);
}

//Start fading
fade = 0;

//To black
mode = 1;

//Make sure it stops when its done
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to fade to black

//Fade to black
mode = 1;

//Set the pixel size
size = 0;

//Take a screenshot
back = background_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], 0, 0);

//Set alarm to execute when the next room starts
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set view parameters

//Make view 0 visible if not visible
view_visible[0] = true;

//Enable views if not enabled
view_enabled = true;

//Update wport
view_wport[0] = global.gw;

//Update hport
view_hport[0] = global.gh;

//Update wview
view_wview[0] = global.gw;

//Update hview
view_hview[0] = global.gh; 

//Update hborder
view_hborder[0] = global.gw/2;

//Update vborder
view_vborder[0] = global.gh/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black, unless you just opened up the game

if (mode = 1)
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Fullscreen + Window size + VSync Settings

//Open the file
var file = file_text_open_write("settings.dat");

//Save fullscreen settings
file_text_write_string(file, string(fullscreen));
file_text_writeln(file);

//Save filtering settings
file_text_write_string(file, string(filter));
file_text_writeln(file);

//Save vsync settings
file_text_write_string(file, string(vsync));
file_text_writeln(file);

//Save up key
file_text_write_string(file, string(global.key_u));
file_text_writeln(file);

//Save down key
file_text_write_string(file, string(global.key_d));
file_text_writeln(file);

//Save left key
file_text_write_string(file, string(global.key_l));
file_text_writeln(file);

//Save right key
file_text_write_string(file, string(global.key_r));
file_text_writeln(file);

//Save action 1 key
file_text_write_string(file, string(global.key_action[0]));
file_text_writeln(file);

//Save action 2 key
file_text_write_string(file, string(global.key_action[1]));
file_text_writeln(file);

//Save action 3 key
file_text_write_string(file, string(global.key_action[2]));
file_text_writeln(file);

//Save action 4 key
file_text_write_string(file, string(global.key_action[3]));
file_text_writeln(file);

//Close the file
file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Fullscreen + Window size + VSync Settings

//If the 'settings.dat' file exist.
if (file_exists("settings.dat")) {

    //Open the file
    var file = file_text_open_read("settings.dat");    

    //Set fullscreen mode based on the read value
    fullscreen = real(file_text_read_string(file));
    file_text_readln(file);

    //Set filtering mode based on the read value
    filter = real(file_text_read_string(file));
    file_text_readln(file);

    //Set vsync based on the read value
    vsync = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved up Key
    global.key_u = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved down key
    global.key_d = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved ' key
    global.key_l = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved 'Right' key
    global.key_r = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved 'Action 1' Key (Default: Shift)
    global.key_action[0] = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved 'Action 2' Key (Default: Control)
    global.key_action[1] = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved 'Action 3' Key (Default: Space)
    global.key_action[2] = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set saved 'Action 4' Key (Default: Enter)
    global.key_action[3] = real(file_text_read_string(file));

    //Close the file
    file_text_close(file);
}
else {

    //Fullscreen is off by default
    fullscreen = 0;

    //Set the window to double of it's original size
    filter = 2;

    //VSync is off by default
    vsync = 0;
    
    //Up key
    global.key_u = vk_up;
    
    //Down key
    global.key_d = vk_down;
    
    //Left key
    global.key_l = vk_left;
    
    //Right key
    global.key_r = vk_right;
    
    //Action 1 (Shift)
    global.key_action[0] = vk_shift;
    
    //Action 2 (Control)
    global.key_action[1] = vk_control;
    
    //Action 3 (Space)
    global.key_action[2] = vk_space;
    
    //Action 4 (Enter)
    global.key_action[3] = vk_enter;
}

//Apply loaded settings
alarm[5] = 1;

//Go to title screen
alarm[4] = 200;

//Play 'Intro' sound
audio_play_sound(snd_intro, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the application surface, window size, and fading.

//Disable alpha blending
draw_enable_alphablend(0);

//Set the shockwave shader
if (shock_enabled) {

    shader_set(shd_shockwave);
    var_time_var += 0.03;
}

//Set the shader uniforms
shader_set_uniform_f(uni_time, var_time_var);
shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
shader_set_uniform_f(uni_shock_amplitude, var_shock_amplitude);
shader_set_uniform_f(uni_shock_refraction, var_shock_refraction );
shader_set_uniform_f(uni_shock_width, var_shock_width);

//Set the pixelate shader
if (fade &lt; 1) {

    shader_set(shd_pixel);
    shader_set_uniform_f(pixel, global.gw, global.gh, size, size);
}

//Draw a rectangle
draw_rectangle_colour(0, 0, global.gw*(filter+1), global.gh*(filter+1), c_black, c_black, c_black, c_black, 0);

//Draw the application surface
draw_surface_stretched(application_surface, port_x*(filter+1), port_y*(filter+1), global.gw*(filter+1), global.gh*(filter+1));

//Reset the shader
shader_reset();

//Enable alpha blending
draw_enable_alphablend(1);

//Fades the screen to and from black
if (fade &lt; 1) {

    //Increment fading
    fade += 1/30;

    //Fade from black
    if (mode = 0) {
    
        draw_set_alpha(1-fade);
        size -= 1.5;
    }

    //Fade to black
    else {
    
        draw_set_alpha(fade);
        size += 1.5;
    }

    //Draw the fade
    draw_set_color(c_black)
    draw_rectangle(0, 0, 5000, 5000, 0)
    draw_set_alpha(1)
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display status message

//Draws the screenshot shown when fading to black
if (background_exists(back)) {

    draw_enable_alphablend(0);
    draw_background(back, view_xview[0], view_yview[0]);
    draw_enable_alphablend(1);
}

//Set the font
draw_set_font(global.font);

//Align the font
draw_set_halign(fa_right);

//Display FPS
if (showfps) {

    //Display message
    if (message != "")
        draw_text_colour(view_xview[0] + view_wview[0]-2, view_yview[0] + view_hview[0] - 10, string(message), c_white, c_white, c_white, c_white, 1);
        
    //Otherwise, display FPS.
    else
        draw_text_colour(view_xview[0] + view_wview[0]-2, view_yview[0] + view_hview[0] - 10, string(fps), c_white, c_white, c_white, c_white, 1);
}
else if (message != "") {

    draw_text_colour(view_xview[0] + view_wview[0]-2, view_yview[0] + view_hview[0] - 10, string(message), c_white, c_white, c_white, c_white, 1);
}
    
//Re-align the font
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
