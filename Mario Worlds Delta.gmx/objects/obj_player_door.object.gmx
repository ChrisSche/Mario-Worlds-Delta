<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player warping through a door

//Default variables
destination = noone;
exit_id = -1;
my_door = noone;

//Whether the player is holding an item
holding = 0;

//Handle the held item sprite and frame
myitem = -1;
myframe = 0;

//Handle the palette of the player when invincible
isflashing = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to the destination room

//Set exit type
global.postchange = 0;

//Set warp id
global.exit_id = exit_id;

//If the pipe does not lead to a different room
if (destination == noone) {

    //Move the player
    with (obj_warpnode) event_user(0);
    
    //Close the door
    with (my_door) {
    
        image_speed = 0;
        image_index = 0;
    }
    
    //Perform fade out
    with (obj_controller) {
    
        event_user(0);
        size = 0;
    }
}
else
    room_goto(destination);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Door player logic

//Update palette
if (instance_exists(obj_invincibility)) {

    if (obj_invincibility.alarm[0] &gt; 120) {
    
        isflashing += 0.1;
        if (isflashing &gt; 6)
            isflashing = 1;
    }
    else {
    
        isflashing += 0.025;
        if (isflashing &gt; 6)
            isflashing = 1;
    }
}
else {

    isflashing = 0;
}

//Set up the sprite
sprite_index = player_idle();
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//If the player is holding something and is not moving vertically
if (holding == 1) &amp;&amp; (vspeed == 0) {

    if (global.powerup == cs_pow_small)
        draw_sprite_ext(myitem, myframe, round(x)+(10*image_xscale), round(y)-2, 1, 1, 0, c_white, 1);
    else
        draw_sprite_ext(myitem, myframe, round(x)+(10*image_xscale), round(y)-4, 1, 1, 0, c_white, 1);
}

//Draw cape
if (global.powerup &gt;= cs_pow_cape) {

    draw_sprite_ext(spr_cape, 0, round(x), round(y), image_xscale, 1, 0, c_white, 1);
}
    
//Set the palette
player_set_palette(id);

//Draw the player
draw_sprite_ext(sprite_index, -1, round(x), round(y), image_xscale, 1, 0, c_white, 1);

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
