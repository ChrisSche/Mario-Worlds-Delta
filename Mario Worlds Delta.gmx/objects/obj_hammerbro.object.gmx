<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hammerbro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hammer Bro.

//Inherit event from parent
event_inherited();

//How vulnerable is this enemy to various items?
vulnerable = 0;

//How vulnerable is this enemy to the player?
stomp = 0;

//Whether can go through solid
throughsolid = 0;

//Number of hammers to throw
hammers = 1+random(round(3));

//Whether the hammer bro is throwing a hammer
throw = 0;

//Death Sprite
deathsprite = spr_hammerbro_dead;

//Stomp Sprite
stompsprite = spr_hammerbro_dead;

//Animate
image_speed = 0.2;

//Reverse horizontal speed.
alarm[1] = 32;

//Jump upwards / downwards.
alarm[2] = 4;

//Set the throwing pose.
alarm[3] = 7;

//Move
alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards the player

//If the enemy is not moving
if (hspeed == 0) {

    //If the player does not exist
    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x)
        hspeed = -0.25;
    else
        hspeed = 0.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disallow jump through solids

throughsolid = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow jump through solids

throughsolid = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set default pose

throw = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Throw a hammer

//Play 'Hammer' sound
audio_stop_play_sound(snd_hammer, 0, false);

//If the player does not exist or the player is at the left
if (!instance_exists(obj_playerparent))
|| (obj_playerparent.x &lt; x) {

    with (instance_create(x+2, y-2, obj_hammerbro_hammer)) {
    
        hspeed = -1;
        image_xscale = -1;
    }
}
else {

    with (instance_create(x-2, y-2, obj_hammerbro_hammer)) {
    
        hspeed = 1;
        image_xscale = 1;
    }    
}

//Set throw pose
throw = 2;

//Set default pose
alarm[5] = 7;

//Throw another hammer.
alarm[3] = 7+random(round(28));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare a hammer to throw

//If there's hammers to throw
if (hammers &gt; 0) {
    
    //Set the throwing pose
    throw = true;
    
    //Decrement hammers
    hammers--;
    
    //Throw a hammer
    alarm[4] = 15;
}

//Otherwise, get new hammers and hold up for 1 / 2 seconds
else {

    //Increment hammers
    hammers = 1+random(round(3));

    //Throw again
    alarm[3] = 60+random(round(60));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump upwards / downwards

//If there's a row of blocks above and below the hammer bro.
if (collision_rectangle(bbox_left, bbox_top-40, bbox_right, bbox_top-40, obj_blockparent, 0, 0))
&amp;&amp; (collision_rectangle(bbox_left, bbox_bottom+8, bbox_right, bbox_bottom+8, obj_blockparent, 0, 0)) {

    //Set the vertical speed
    if (floor(random(50)) &lt; 25) {
    
        vspeed = -6;
        alarm[6] = 2;
        alarm[7] = 16;
    }
    else {
    
        vspeed = -2.5;
        alarm[6] = 2;
        alarm[7] = 35;
    }
}

//Otherwise, check where's the blocks and jump up or down.
else {

    //If the blocks are above
    if (collision_rectangle(bbox_left, bbox_top-40, bbox_right, bbox_top-40, obj_blockparent, 0, 0)) {
    
        vspeed = -6;
        alarm[6] = 2;
        alarm[7] = 16;
    }
    
    //Otherwise, if they are below
    else if (collision_rectangle(bbox_left, bbox_bottom+8, bbox_right, bbox_bottom+8, obj_blockparent, 0, 0)) {
    
        vspeed = -2.5;
        alarm[6] = 2;
        alarm[7] = 35;
    }
    else
        vspeed = -6;
}

//Boost jump
y--;

//Gravity
gravity = 0.25;

//Jump again
alarm[2] = 168;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reverse horizontal speed

hspeed = -hspeed;
alarm[1] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hammer bro animation

//If not jumping
if (throw == 0) {

    //Animate
    image_speed = 0.2;

    //Set default sprite
    sprite_index = spr_hammerbro;
}

//Otherwise, if jumping
else if (throw) {

    //Set sprite
    sprite_index = spr_hammerbro_throw;
    
    //Do not animate
    image_speed = 0;
    image_index = throw-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hammer Bro logic

//If not jumping through solids
if (throughsolid == 0) {

    //Default wall collision
    event_user(3);

    //Default floor collision
    event_user(4);
}

//Otherwise, if jumping through solids
else {

    //Gravity
    gravity = 0.25;

    //Cap vertical speed
    if (vspeed &gt; 4) {
    
        vspeed = 4;
        gravity = 0;
    }
}

//Manage swimming state
event_user(8);

//Set up the facing direction.
if (!instance_exists(obj_playerparent))
|| (obj_playerparent.x &lt; x)
    xscale = -1;
else
    xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage swimming collision

//Check for water
var water = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0);

//If there's water
if (water)
&amp;&amp; (swimming == false) {

    //Make the object swim
    swimming = true;
    
    //Stop vertical movement
    if (vspeed &gt; 0) {
        
        vspeed = 0;
        with (instance_create(round(bbox_left+bbox_right)/2, water.y-16, obj_smoke)) {
         
            sprite_index = spr_splash;
            image_speed = 0.3;
        }
    }
}

//Otherwise
else if (!water)
&amp;&amp; (swimming == true) {

    //Stop swimming
    swimming = false;
    
    //Create a splash effect
    if (vspeed &lt; 0) {
        
        with (instance_create(round(bbox_left+bbox_right)/2, y-16, obj_smoke)) {
         
            sprite_index = spr_splash;
            image_speed = 0.3;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default stomp event

with (instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_enemy_stomped)) {

    //Set the sprite
    sprite_index = other.stompsprite;
    
    //Set the facing direction
    image_xscale = other.xscale;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw hammer bro

draw_sprite_ext(sprite_index, -1, round(x), round(y)+1, xscale, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
