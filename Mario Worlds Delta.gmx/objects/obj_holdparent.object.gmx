<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_brick_throw_th</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The parent object for all held items

//Inherit event from physics parent
event_inherited();

//Do not animate
image_speed = 0;

//Direction of item
dir = 1;

//Is the item held?
held = 0;

//Is the item embed in a wall
inwall = 0;

//Follower
follow = noone;

//Restarts the position if this item has not been carried
carried = 0;

//Do not slowdown when kicked (Applies only to blue bricks)
ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Protect the player from the horrors of holding "nothing"

if (held) {

    //If the player was holding something
    if (instance_exists(obj_playerparent))
    &amp;&amp; (obj_playerparent.holding == 1)
        obj_playerparent.holding = 0; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Held item logic (When held)

if (held == true) {

    //Do not allow swim
    swimming = false;
    
    //Do not reset position
    carried = true;
    
    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //If the player control is not disabled
        if (obj_playerparent.control_enable == true) {
        
            //If the player is turning
            if (obj_playerparent.turnnow == 1) {
            
                //Set the depth
                depth = -6;
                
                //Snap into player's x position
                x = obj_playerparent.x;
            }
            
            //Otherwise
            else {
            
                //Set depth
                depth = obj_playerparent.depth+1;
                
                //Snap into player's x position
                x = obj_playerparent.x+(10*sign(obj_playerparent.xscale));
            }
            
            //Make the player hold the item
            if (keyboard_check(global.key_action[1]))
                obj_playerparent.holding = 1;
                
            //Otherwise, release the item
            else {
            
                //Make the player stop holding
                obj_playerparent.holding = 0;
                
                //Stop being held
                held = false;
                
                //Set the depth
                depth = -2;
                
                //Kick the item
                event_user(2);
                
                //Make the player 'Kick' the item if there's input
                if (keyboard_check(global.key_u)) 
                || (obj_playerparent.hspeed != 0)
                    with (obj_playerparent) event_user(2);
            }
            
            //Set the direction
            dir = obj_playerparent.xscale;
            
            //If the player is crouched down
            if (obj_playerparent.crouch == true)
                y = obj_playerparent.y;
                
            //Otherwise
            else {
            
                //If the player is big
                if (obj_playerparent.mask_index != spr_mask_player_big)
                    y = obj_playerparent.y-2;
                else
                    y = obj_playerparent.y-4;
            }
        }
        
        //Otherwise if controls are disabled, stop holding.
        else {
        
            //Make the player stop holding
            obj_playerparent.holding = 0;
            
            //Stop being held
            held = false;
            
            //Set the depth
            depth = -2;
            
            //Kick the item
            event_user(2);
            
            //Make the player 'Kick' the item if there's input
            if (keyboard_check(global.key_u)) 
            || (obj_playerparent.hspeed != 0)
                with (obj_playerparent) event_user(2);                 
        }
        
        //Make visible always
        visible = 1;
    }
    
    //Otherwise, check who is holding this item
    else {
    
        //Check what object is holding
        event_user(15);
        
        //Then check if it exists
        if (instance_exists(follow)) {
        
            //Snap into position
            x = follow.x;
            y = follow.y;
            
            //Make it invisible
            visible = 0;
            
            //With the followed object
            with (follow) {
            
                holding = 1;
                myitem = other.sprite_index;
                myframe = other.image_index;
            }
        }
    }
    
    //Release if the player does not exist
    if (!instance_exists(obj_playerparent))
    &amp;&amp; (follow == noone)
        held = false;
}

//If the item is not held, inherit End Step from parent
if (held == false)
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Held item logic

//If the item is not being held
if (held == false) {

    //If the item is not embed in a wall
    if (inwall == false) {

        //Inherit step event
        event_inherited();
        
        //If not kicked
        if (ready == 0) {
        
            //Slowdown if in ground
            if (gravity == 0) {
            
                //If the item is not underwater
                if (swimming == false) {
                
                    //If there's not slippery ground below
                    if (!collision_rectangle(bbox_left, bbox_bottom-8, bbox_right, bbox_bottom+1, obj_iceparent, 1, 0)) {
                    
                        //Slowdown until it stops
                        hspeed = max(0, abs(hspeed)-0.075)*sign(hspeed);
                        if (abs(hspeed) &lt; 0.075)
                            hspeed = 0;
                    }
                    
                    //Otherwise, if there's slippery ground below
                    else if (collision_rectangle(bbox_left, bbox_bottom-8, bbox_right, bbox_bottom+1, obj_iceparent, 1, 0)){
                    
                        //Slow down until it stops, but slower
                        hspeed = max(0, abs(hspeed)-0.0375)*sign(hspeed);
                        if (abs(hspeed) &lt; 0.0375)
                            hspeed = 0;
                    }
                }
                
                //Otherwise, if the item is underwater
                else {
                
                    //Slow down until it stops, but slower
                    hspeed = max(0, abs(hspeed)-0.0375)*sign(hspeed);
                    if (abs(hspeed) &lt; 0.0375)
                        hspeed = 0;            
                }
                
                //Prevent passing through slopes
                while (collision_rectangle(x-2, bbox_top, x+2, bbox_bottom, obj_slopeparent, 1, 0))
                    y--;
            }
                    
            //Stop it if it gets stuck in a solid
            if (vspeed &lt; 0)
            &amp;&amp; (collision_rectangle(bbox_left, bbox_top+4, bbox_right, bbox_bottom-1, obj_solid, 0, 0)) {
            
                //Stop movement
                speed = 0;
                gravity = 0;
                
                //Make the item move
                inwall = true;
            }
        }        
    }
    
    //Otherwise, if the item is embed in a wall
    else if (inwall == true) {
    
        //Move it until it does not make contact with a solid
        x -= 2.5*sign(dir);
       
        //If the item is not longer overlapping a solid
        if (!collision_rectangle(bbox_left, bbox_top+4, bbox_right, bbox_bottom-1, obj_solid, 0, 0))
            inwall = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spinner">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not bump with cape unless required

exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bump with block but only when not held

//If not held
if (held == false) {
    
    if (other.vspeed &lt; 0)
    &amp;&amp; (vspeed &gt;= 0)
    &amp;&amp; (bbox_bottom &lt; yprevious+5)
        vspeed = -2.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player interact with the item

//If the item is not held
if (held == false) {

    //If the player is above and moving down, stomp the trampoline.
    if (other.bbox_bottom &lt; bbox_top-vspeed+5)
    &amp;&amp; (other.vspeed &gt; 0)
        event_user(1);
        
    //Otherwise, if the player can hold the item
    else if (can_hold()) 
    &amp;&amp; (inwall == false)
    &amp;&amp; (other.bbox_bottom &gt; bbox_top) {
    
        //Make the player hold it
        other.holding = 1;
        
        //Hold
        held = 1;
        
        //Stop movement
        speed = 0;
        gravity = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check what item is holding the item

//Check 'Warp'
if (instance_exists(obj_player_warp))
    follow = obj_player_warp;
    
//Check 'Door'
else if (instance_exists(obj_player_door))
    follow = obj_player_door;
    
//Reset to default
else
    follow = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default throw / kick event

//If 'Up' is pressed, throw it upwards
if (keyboard_check(global.key_u)) {

    //Play 'Kick' sound
    audio_play_sound(snd_kick, 0, false);
    
    //Create thump
    instance_create(x, y+8, obj_spinthump);
    
    //If the item is not overlapping a solid
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 1, 0)) {
    
        //Set the horizontal speed
        hspeed = obj_playerparent.hspeed/1.5;
        
        //Boost kick
        y--;
        
        //If the item is not in a water surface
        if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
            vspeed = -7;
        else
            vspeed = -3.5;
    }
    
    //Otherwise, get embed
    else
        inwall = true;
}

//Otherwise if 'Down' is pressed, leave it on the ground
else if (keyboard_check(global.key_d)) {
    
    //Check if the object is stuck on a solid and move it
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 1, 0)) {
    
        //Move it to a safe position
        inwall = true;
        
        //Stop it
        hspeed = 0;
    }
    
    //Set the horizontal speed
    hspeed = 0.5*sign(obj_playerparent.xscale);
}

//Otherwise, if neither 'Up' or 'Down' is pressed
else {

    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom,obj_solid, 0, 0)) {
        
        //If the player has horizontal speed
        if (obj_playerparent.hspeed != 0) {
        
            //Play 'Kick' sound.
            audio_play_sound(snd_kick, 0, false);
    
            //Create thump
            instance_create(x, y+8, obj_spinthump);
            
            //If the item is underwater
            if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
                vspeed = -1;
            else
                vspeed = -2;
            
            //If the object is not on contact with a slope
            if (!collision_rectangle(x-2, bbox_bottom-4, x-2, bbox_bottom, obj_slopeparent, 1, 0))
                hspeed = (obj_playerparent.hspeed+1*obj_playerparent.xscale)/1.5;
                
            //Otherwise, do not apply horizontal speed
            else
                hspeed = 0.5*sign(obj_playerparent.xscale);
        }
        
        //Otherwise, leave it on the ground
        else
            hspeed = 0.5*obj_playerparent.xscale;
    }
    else
        inwall = true;
}

//If the object is underwater, begin swim
if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
    swimming = true;

//Otherwise, do not swim
else
    swimming = false;     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default stomp event

//Do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember the item held for the next room.

if (held) {

    //Remember the object.
    global.carrieditem = object_index;
    
    //Remember the sprite of the object.
    global.carriedsprite = sprite_index;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy if outside the view

if (held == 0)
if (y &gt; room_height+sprite_yoffset) {

    instance_create(xstart, ystart, object_index);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
