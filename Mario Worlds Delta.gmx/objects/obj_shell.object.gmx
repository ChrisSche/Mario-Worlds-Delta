<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shell</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_holdparent_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A held koopa shell

//Inherit event from parent
event_inherited();

//Animate
image_speed = 0;
image_index = 0;

//Number of kills
hitcombo = 0;

//How vulnerable is this enemy to items
vulnerable = 0;

//How vulnerable is this enemy to Yoshi
edible = 0;

//Whether this shell is flipped
flip = 0;

//Whether there's a koopa inside this shell
koopainside = 0;

//Death sprite
deathsprite = spr_koopa_dead;

//Shake
offset = 0;
alarm[0] = 312;

//Get out of shell
alarm[1] = 432;

//Check the sprite and set vulnerabilities
event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get out of the shell

//If there's a koopa inside
if (koopainside == 1) {
    
    switch (sprite_index) {
    
        //Green Koopa Troopa
        case (spr_shell): instance_create(x, y, obj_beachkoopa); break;
        
        //Red Koopa Troopa
        case (spr_shell_red): instance_create(x, y, obj_beachkoopa_red); break;
        
        //Blue Koopa Troopa
        case (spr_shell_blue): instance_create(x, y, obj_beachkoopa_blue); break;
        
        //Yellow Koopa Troopa
        case (spr_shell_yellow): instance_create(x, y, obj_beachkoopa_yellow); break;
        
        //Gargantua Green Koopa
        case (spr_shell_big): instance_create(x, y, obj_bigbeachkoopa); break;
        
        //Gargantua Red Koopa
        case (spr_shell_big_red): instance_create(x, y, obj_bigbeachkoopa_red); break;
    }
    
    //Get outta here
    koopainside = 0;
}

//Otherwise, if this is not a koopa shell
else if (koopainside == -1) {

    switch (sprite_index) {
    
        //Buzzy Beetle
        case (spr_shell_buzzy): {
        
            instance_create(x, y, obj_buzzybeetle);
            instance_destroy();
        } break;
        
        //Spiny
        case (spr_shell_spiny): {
        
            instance_create(x, y, obj_spiny);
            instance_destroy();
        } break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change offset

//If there's a koopa inside
if (koopainside != 0) {
    
    alarm[0] = 1;
    if (offset != 1)
        offset = 1;
    else
        offset = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shell logic

//Inherit event
event_inherited();

//Set vulnerabilities
event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interact with the player

//If the player is invulnerable, exit this event
if (instance_exists(obj_invincibility))
exit;

//If the player is sliding down a slope
if (vulnerable &lt; 99)
&amp;&amp; (other.sliding == true) {

    //Get points based on combo
    if (other.hitcombo == 0) { //200 points
    
        audio_stop_play_sound(snd_kick2, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(2);
    }
    else if (other.hitcombo == 1) { //400 points
    
        audio_stop_play_sound(snd_kick3, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(3);
    }
    else if (other.hitcombo == 2) { //800 points
    
        audio_stop_play_sound(snd_kick4, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(4);
    }
    else if (other.hitcombo == 3) { //1000 points
    
        audio_stop_play_sound(snd_kick5, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(5);
    }
    else if (other.hitcombo == 4) { //2000 points
    
        audio_stop_play_sound(snd_kick6, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(6);
    }
    else if (other.hitcombo == 5) { //4000 points
    
        audio_stop_play_sound(snd_kick7, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(7);
    }
    else if (other.hitcombo == 6) { //8000 points
    
        audio_stop_play_sound(snd_kick8, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(8);
    }
    else if (other.hitcombo &gt; 6) { //1-UP
    
        audio_stop_play_sound(snd_1up, 0, false);
        audio_stop_play_sound(snd_kick8, 0, false);
        with (instance_create((bbox_left+bbox_right)/2, bbox_top, obj_score))
            event_user(9);                    
    }
        
    //Kill the enemy
    event_user(0);        
    
    //Create 'Spinthump' effect
    instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_spinthump);
            
    //Increment hitcombo
    other.hitcombo++;   
}

//Otherwise
else {

    //If the shell has not been kicked up
    if (vspeed &gt; -1) {

        //If the player is above the shell
        if (other.vspeed &gt; 0)
        &amp;&amp; (other.bbox_bottom &lt; bbox_top-vspeed+5)
        &amp;&amp; ((other.jumpstyle = 1) || (global.mount == 1)) {
        
            //Create spin smoke effect
            instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_spinsmoke);
            
            //Get points based on combo
            if (other.hitcombo &lt;= 6) //If the player did 6 or less consecutive stomps
                with (instance_create((bbox_left+bbox_right)/2-8, bbox_top, obj_score)) event_user(2+obj_playerparent.hitcombo);
            else {
            
                audio_stop_play_sound(snd_1up, 0, false);
                with (instance_create((bbox_left+bbox_right)/2-8, bbox_top, obj_score)) 
                    event_user(9);
            }
            
            //Increment combo
            other.hitcombo++;
            
            //Bounce against if riding or just stop
            if (global.mount == 1)
                with (other) event_user(1);
            else
                other.vspeed = 0;
                
            //Destroy
            instance_destroy();            
        }
    
        //If the player is below the shell
        else if (other.bbox_bottom &gt; yprevious+5) {
    
            //If the item can be held and the player can hold it
            if (can_hold())
            &amp;&amp; (sprite_height &lt; 17) {
            
                //Make the player hold it
                other.holding = 1;
                
                //Hold
                held = 1;
                
                //Stop movement
                speed = 0;
                gravity = 0;
            }
            
            //Otherwise
            else if (held == 0) {
            
                //Play 'Kick' sound
                audio_stop_play_sound(snd_kick, 0, false);
                
                //Create thump
                instance_create(x, y+8, obj_spinthump);
                
                //Visually kick the item
                with (other) event_user(2);
                
                //If the player is at the left of the block
                if (other.x &lt; x) {
                
                    with (instance_create(x, y, obj_shell_kicked)) {
                    
                        //Set the horizontal speed
                        hspeed = (2.7+(abs(obj_playerparent.hspeed)/4));
                        
                        //Hereby old shell variables
                        sprite_index = other.sprite_index;
                        koopainside = other.koopainside;
                        flip = other.flip;
                        
                        //Move up if overlapping a slope
                        if (collision_rectangle(x-2, bbox_top, x+2, bbox_bottom, obj_slopeparent, 1, 0))
                            y -= 4;
                    }
                }
                    
                //Otherwise, if the player is at the right of the block
                else if (other.x &gt; x) {
                
                    with (instance_create(x, y, obj_shell_kicked)) {
                    
                        //Set the horizontal speed
                        hspeed = -(2.7+(abs(obj_playerparent.hspeed)/4));
                        
                        //Hereby old shell variables
                        sprite_index = other.sprite_index;
                        koopainside = other.koopainside;
                        flip = other.flip;
                        
                        //Move up if overlapping a slope
                        if (collision_rectangle(x-2, bbox_top, x+2, bbox_bottom, obj_slopeparent, 1, 0))
                            y -= 4;
                    }
                }
                
                //Destroy
                instance_destroy();                           
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check sprite and set vulnerabilities

//Red Koopa
if (sprite_index == spr_shell_red)
    deathsprite = spr_koopa_red_dead;
    
//Blue Koopa
else if (sprite_index == spr_shell_blue)
    deathsprite = spr_koopa_blue_dead;
    
//Yellow Koopa
else if (sprite_index == spr_shell_yellow)
    deathsprite = spr_koopa_yellow_dead;
    
//Gargantua Green Koopa
else if (sprite_index == spr_shell_big) {

    deathsprite = spr_bigkoopa_dead;
    edible = 2;
}

//Gargantua Red Koopa
else if (sprite_index == spr_shell_big_red) {

    deathsprite = spr_bigkoopa_red_dead;
    edible = 2;
}

//Buzzy Beetle
else if (sprite_index == spr_shell_buzzy) {

    deathsprite = spr_buzzybeetle_dead;
    vulnerable = 1;
    edible = 0;
}

//Spiny
else if (sprite_index == spr_shell_spiny) {

    deathsprite = spr_spiny_dead;
    edible = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a koopa shell and flip it

//Create dead enemy object
imdead = instance_create(round(bbox_left+bbox_right)/2, y-2, obj_shell);

//Set up the sprite
imdead.sprite_index = sprite_index;

//Set up the xscale
imdead.image_xscale = 1;

//Flip it
imdead.flip = 1;

//Hold or not hold a koopa inside
imdead.koopainside = koopainside;

//If the object is not colliding with yoshi's tongue
if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_tongue, 0, 0)) {
    
    //Set up vertical speed
    imdead.vspeed = -5;
    
    //If the killer object is at the left of this object, move to the right
    if ((other.bbox_left+other.bbox_right/2) &lt;= bbox_left+bbox_right/2) 
        imdead.hspeed = 0.5;
        
    //Otherwise, move to the left
    else if ((other.bbox_left+other.bbox_right/2) &gt; bbox_left+bbox_right/2) 
        imdead.hspeed = -0.5;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default throw / kick event

//Shatter if inside a solid
if (place_meeting(x, y, obj_solid)) {
    
    //Play 'Kick' sound
    audio_stop_play_sound(snd_kick, 0, false);
    
    //Create thump
    instance_create(x, y+8, obj_spinthump);
    
    //Get 100 points
    with (instance_create((bbox_left+bbox_right)/2-8, y, obj_score)) event_user(1);
    
    //Kill
    event_user(0);
}

//Otherwise
else {

    //If 'Up' is pressed, throw it upwards
    if (input_check(input.up)) {
    
        //Play 'Kick' sound
        audio_stop_play_sound(snd_kick, 0, false);
        
        //Create thump
        instance_create(x, y+8, obj_spinthump);
        
        //Set the horizontal speed
        hspeed = obj_playerparent.hspeed/1.5;
        
        //Boost kick
        y--;
        
        //If the item is not in a water surface
        if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
            vspeed = -7;
        else
            vspeed = -3.5;
    }
    
    //Otherwise if 'Down' is pressed, leave it on the ground
    else if (input_check(input.down)) {
        
        //Set the horizontal speed
        hspeed = 0.5*sign(obj_playerparent.xscale);
    }
    
    //Otherwise, if neither 'Up' or 'Down' is pressed
    else {
    
        //Play 'Kick' sound.
        audio_stop_play_sound(snd_kick, 0, false);
    
        //Create thump
        instance_create(x, y+8, obj_spinthump);
        
        //If the player is at the left of the block
        if (obj_playerparent.x &lt; x) {
        
            with (instance_create(x, y, obj_shell_kicked)) {
            
                //Set the horizontal speed
                hspeed = (2.7+(abs(obj_playerparent.hspeed)/4));
                
                //Hereby old shell variables
                sprite_index = other.sprite_index;
                koopainside = other.koopainside;
                flip = other.flip;
                
                //Move up if overlapping a slope
                if (collision_rectangle(x-2, bbox_top, x+2, bbox_bottom, obj_slopeparent, 1, 0))
                    y -= 4;
            }
        }
            
        //Otherwise, if the player is at the right of the block
        else if (obj_playerparent.x &gt; x) {
        
            with (instance_create(x, y, obj_shell_kicked)) {
            
                //Set the horizontal speed
                hspeed = -(2.7+(abs(obj_playerparent.hspeed)/4));
                
                //Hereby old shell variables
                sprite_index = other.sprite_index;
                koopainside = other.koopainside;
                flip = other.flip;
                
                //Move up if overlapping a slope
                if (collision_rectangle(x-2, bbox_top, x+2, bbox_bottom, obj_slopeparent, 1, 0))
                    y -= 4;
            }
        }
            
        //Otherwise, if the player is turning
        else if (obj_playerparent.turnnow == 1) {
                   
            with (instance_create(x, y, obj_shell_kicked)) {
            
                //Set the horizontal speed
                hspeed = (2.7+(abs(obj_playerparent.hspeed)/4));
                
                //Hereby old shell variables
                sprite_index = other.sprite_index;
                koopainside = other.koopainside;
                flip = other.flip;
                
                //Move up if overlapping a slope
                if (collision_rectangle(x-2, bbox_top, x+2, bbox_bottom, obj_slopeparent, 1, 0))
                    y -= 4;
            }
        }
        
        //Destroy
        instance_destroy();                        
    }
    
    //Reset alarms
    offset = 0;
    alarm[0] = 312;
    alarm[1] = 432;
    
    //If the object is underwater, begin swim
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
        swimming = true;
    
    //Otherwise, do not swim
    else
        swimming = false;    
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default enemy death script

//Set up death sprite if we didnt yet
event_user(14);

//Create dead enemy object
imdead = instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_enemy_dead);

//Set up the sprite
imdead.sprite_index = deathsprite;

//Set up the xscale
imdead.image_xscale = image_xscale;

//Set up vertical speed
imdead.vspeed = -3;

//If the killer object is not moving
if (other.hspeed == 0) {

    //If the killer object is a cape spin
    if (other.object_index == obj_spinner) {

        //Set up vertical speed
        imdead.vspeed = -5;

        //If the killer object is at the left of this object, move to the right
        if ((other.bbox_left+other.bbox_right/2) &lt; bbox_left+bbox_right/2)
            imdead.hspeed = 0.5;
            
        //Otherwise, move to the left
        else if ((other.bbox_left+other.bbox_right/2) &gt; bbox_left+bbox_right/2)
            imdead.hspeed = -0.5;        
    }
    
    //Otherwise
    else {
    
        //If the killer object is at the left of this object, move to the right
        if ((other.bbox_left+other.bbox_right/2) &lt; bbox_left+bbox_right/2)
            imdead.hspeed = 1;
            
        //Otherwise, move to the left
        else if ((other.bbox_left+other.bbox_right/2) &gt; bbox_left+bbox_right/2)
            imdead.hspeed = -1;
    }
}

//Otherwise, if the killer object is moving
else {

    //If the kill object is the player, hereby player's hspeed
    if (other.object_index == obj_playerparent) {
    
        //If the player is sliding
        if (other.sliding == true)
            imdead.hspeed = obj_playerparent.hspeed;
    }
    
    //Otherwise, move normally
    else {
    
        if (other.hspeed &gt; 0)
            imdead.hspeed = 1;
        else
            imdead.hspeed = -1;
    }
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the shell

//If the shell is small
if (sprite_height &lt; 17) {
    
    if (flip == 0) {
    
        //Draw shell
        draw_sprite_ext(sprite_index, -1, round(x)+offset, round(y)+1, image_xscale, 1, 0, c_white, 1);
        
        //If there's a koopa inside
        if (koopainside == 1)
            draw_sprite_ext(spr_koopa_inside, -1, round(x)+offset, round(y)+1, image_xscale, 1, 0, c_white, 1);
    }
    else {
    
        //Draw shell
        draw_sprite_ext(sprite_index, -1, round(x)+offset, round(y)+17, image_xscale, -1, 0, c_white, 1);
        
        //If there's a koopa inside
        if (koopainside == 1)
            draw_sprite_ext(spr_koopa_inside, -1, round(x)+offset, round(y)+17, image_xscale, -1, 0, c_white, 1);
    }
}

//Otherwise
else {
    
    if (flip == 0) {
    
        //Draw shell
        draw_sprite_ext(sprite_index, -1, round(x)+offset, round(y)+1, image_xscale, 1, 0, c_white, 1);
        
        //If there's a koopa inside
        if (koopainside == 1)
            draw_sprite_ext(spr_koopa_inside_big, -1, round(x)+offset, round(y)+1, image_xscale, 1, 0, c_white, 1);
    }
    else {
    
        //Draw shell
        draw_sprite_ext(sprite_index, -1, round(x)+offset, round(y)+1, image_xscale, -1, 0, c_white, 1);
        
        //If there's a koopa inside
        if (koopainside == 1)
            draw_sprite_ext(spr_koopa_inside_big, -1, round(x)+offset, round(y)+1, image_xscale, -1, 0, c_white, 1);
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
