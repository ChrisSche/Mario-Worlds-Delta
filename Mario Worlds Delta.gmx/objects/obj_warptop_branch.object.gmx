<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warp_branch</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_warptop</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp Pipe (Branch)

/*
**  This item uses creation code!
**
**  dest[0...2] = Destination room (Leave as is to not change room.)
**  e_dir[0...2]    = Exit pipe direction
**  e_id[0...2]     = Warp ID
**
**  mode               = Value to use (Pick from below)
**      0: Coins Collected
**      1: Time Left
**      2: Dragon Coins Collected
**
**  target_a           = First value to check
**  target_b           = Second value to check
**  target_c           = Last value to check
*/

//Inherit event
event_inherited();

//Default variables
for (i=0; i&lt;3; i++) {
    
    dest[i] = noone;
    e_dir[i] = cs_warp_right;
    e_id[i] = -1;
}
mode = 0;
check = 0;

//Targets
target_a = 0;
target_b = 0;
target_c = 0;

//Coins collected in-area
coins = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decide up which room to warp to

//Value to check
switch (mode) {

    //Coins Collected
    case (0): check = obj_controller.coins; break;
    
    //Time Left
    case (1): check = global.time; break;
    
    //Dragon Coins Collected
    case (2): check = ds_map_size(global.dcoins) break;
}

//If the value is between target_a and target_b
if ((check &gt;= target_a) || (check &lt; target_b)) {

    destination     = dest[0];
    exit_dir        = e_dir[0];
    exit_id         = e_id[0];
}

//Otherwise if the value is between target_a and target_b
else if ((check &gt;= target_b) || (check &lt; target_c)) {

    destination     = dest[1];
    exit_dir        = e_dir[1];
    exit_id         = e_id[1];
}

//Otherwise if the value is greater than target_c
else if (check &gt;= target_c) {

    destination     = dest[2];
    exit_dir        = e_dir[2];
    exit_id         = e_id[2];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
