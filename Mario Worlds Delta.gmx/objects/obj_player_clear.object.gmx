<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>spr_mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player has completed the level

//Set the jumping sprite if the player is on the air
if (gravity &gt; 0) then sprite_index = player_jump();

//Destroy cape flight object
with (obj_cape_fly) instance_destroy();

//Stop P-Switch and Starman music
audio_stop_sound(bgm_pswitch);
audio_stop_sound(bgm_starman);

//Stop both music and timer
with (obj_levelcontrol) {

    musicdisable = true;
    alarm[1] = 1;
    alarm[2] = -1;
    alarm[3] = -1;
    alarm[4] = -1;
}

//Set clear state
global.clear = 1+(obj_goal_gate.secret);

//Anim
anim = 0;

//Do not flash
isflashing = 0;

//Set horizontal speed
hspeed = 0.324;

//Forget check points
global.checkpoint = noone;
global.checkpointroom = noone;

//Allow Mario Start! text
global.mariostart = 0;

//Fireworks
fireworks = 0;

//States
ready = 0;
ready2 = 0;
ready3 = 0;
ready4 = 0;

//Play the clear stream
alarm[0] = 70;

//Stop the player
alarm[2] = 460;

//Take points off time and add it to score
alarm[3] = 300;

//Take bonus stars off and add it to current stars
alarm[4] = 300;

//Show 'Course Clear'
alarm[5] = 200;

//Whether the object is swimming
swimming = false;

//Is the object in a slope?
slope = false;

//Create goal fade
instance_create(0, 0, obj_goal_fade);

//Remove every coin on screen
with (obj_removeme) {

    if (visible)
    &amp;&amp; (outside_view(sprite_get_width(sprite_index)) == false) {
    
        //Give points
        instance_create(round(bbox_left+bbox_right)/2-8, y, obj_enemy_score);
    
        //Create poof of smoke
        with (instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_smoke)) {
        
            sprite_index = spr_smoke_16;
        }
        
        //Destroy
        instance_destroy();            
    }
}

//Remove every NPC on screen
with (obj_physicsparent) {

    //Do this only if inside the view
    if (outside_view(sprite_get_width(sprite_index)) == false) {
    
        //If the object is ancestor of either holdparent, enemyparent or powerup parent
        if (object_is_ancestor(object_index, obj_holdparent))
        || (object_is_ancestor(object_index, obj_enemyparent))
        || (object_is_ancestor(object_index, obj_powerupparent)) {
        
            //Give points
            instance_create(round(bbox_left+bbox_right)/2-8, y, obj_enemy_score);
        
            //Create poof of smoke
            with (instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_smoke)) {
            
                sprite_index = spr_smoke_16;
            }
            
            //Destroy
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate more fireworks

//If there's fireworks left
if (fireworks &gt; 0) {
    
    //Play 'Firework' sound
    audio_play_sound(snd_firework, 0, false);
    
    //Spawn a firework
    with (instance_create(view_xview[view_current] + view_wview[view_current] / 2 + random_range(-80, 80), view_yview[0]+random_range(32,64), obj_smoke)) {
    
        //Set sprite
        sprite_index = spr_firework;
    
        //Set speed
        image_speed = 0.3;
        
        //Set speed
        score += 500;
    }
      
    //Decrease amount of firework
    fireworks--;
    
    //Repeat
    alarm[6] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show 'Course Clear' text

with (obj_hud) {
    
    //Set the time to show in the course clear frame
    time = global.time;
    
    //Give an extra life if the time ends in double zero
    if (time mod 100 == 0) {
        
        //Play '1-UP' sound
        audio_stop_play_sound(snd_1up, 0, false);
        
        //Give extra life
        lives++;    
    }
    
    //Show or not show bonus stars
    if (global.bonusadd == 0)
        clear = 1;
    else
        clear = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement bonus stars

if (global.bonusadd &gt; 0) {

    //Decrement additive bonus stars
    global.bonusadd--;
    
    //Increment bonus stars
    global.bonus++;
    if (global.bonus &gt; 99) {
    
        //Decrement 100 bonus stars
        global.bonus -= 100;
        
        //Enable bonus game
        global.bonusgame = 1;    
    }
    
    //Repeat the process...
    alarm[4] = 4;
}

//Play sounds
if (ready4 == 0)
    ready4 = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off time and add it to score

//If the HUD is not "Minimalist / No Score"
if (obj_controller.hud_type &lt; 3) {
       
    //If the time is greater than 4, decrement 5 seconds from timer
    if (global.time &gt; 4) {
    
        //Repeat the process
        alarm[3] = 2;
    
        //Get 250 points
        score += 250;
        
        //Decrement 5 seconds
        global.time -= 5;
    }
    
    //Otherwise, decrement timer by 1 second
    else if ((global.time &lt; 5) &amp;&amp; (global.time &gt; 0)) {
    
        //Repeat the process
        alarm[3] = 2;
    
        //Get 50 points
        score += 50;
        
        //Decrement 1 second
        global.time--;
    }
    
    //Play sounds
    if (ready4 == 0)
        ready4 = 1;
}
else {

    global.time = 0;
    if (global.bonusadd &gt; 0)
        ready4 = 1;
    else
        ready4 = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop it

//Stop horizontal speed
hspeed = 0;

//Set state
ready = 0;
ready2 = 1;

//Make the player move again
alarm[1] = 100;

//If there's fireworks
if (fireworks &gt; 0)
    alarm[6] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start walking

//If the timer hits zero
if (fireworks == 0)
&amp;&amp; (global.time == 0) {

    //Play 'Goal End' sound
    audio_stop_play_sound(snd_goalgate_3, 0, false);
    
    //Set states
    ready2 = 0;
    ready3 = 1;
}

//Otherwise
else
    alarm[1] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play 'Clear BGM' and set fireworks

if (global.time -(floor(global.time/10)*10) == 6)
|| (global.time -(floor(global.time/10)*10) == 3)
|| (global.time -(floor(global.time/10)*10) == 1) {

    //Plays 'Special Clear' theme
    audio_stop_play_sound(snd_goalgate_special, 0, false);
    
    //Set amount of fireworks
    if (global.time -(floor(global.time/10)*10) == 6)
        fireworks = 6;
    else if (global.time -(floor(global.time/10)*10) == 3)
        fireworks = 3;
    else if (global.time -(floor(global.time/10)*10) == 1)
        fireworks = 1;
}
else
    audio_stop_play_sound(snd_goalgate_2, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle player sprites

//Inherit 'End Step' event
event_inherited();

//Make sure the player gets the correct sprite
if (gravity == 0) {

    //If the player is not moving horizontally
    if (hspeed == 0) {
    
        //If the player is doing the victory pose
        if (ready2 == 1) {
    
            //Set clear pose
            sprite_index = player_clear();
            
            //Do not animate
            image_speed = 0;
            image_index = 0;
        }
        
        //Otherwise, set the idle pose
        else {
        
            //Set walking pose
            sprite_index = player_walk();
            
            //Do not animate
            image_speed = 0;
            image_index = 0;            
        }
    }
    
    //Otherwise
    else {
    
        //Set clear pose
        sprite_index = player_walk();
        
        //Animate yoshi
        anim += 0.065+abs(hspeed)/7.5;
                
        //Animate
        image_speed = 0.065+abs(hspeed)/7.5;
    }
}
else {

    //If the player is underwater
    if (swimming == false) {
    
        //Set the jump sprite
        sprite_index = player_jump();
        
        //Do not animate
        image_speed = 0;
        
        //Set the frame
        if (vspeed &lt; 0)
            image_index = 0;
        else
            image_index = 1;
    }
    else {
    
        //Set the swimming sprite
        sprite_index = player_swim();
        
        //Set the frame
        if (vspeed &lt; 0)
            image_speed = 0.15;
        else {
        
            image_speed = 0;
            image_index = 0;
        }
    }
}

//Set the big mask if the player is not small
if (global.powerup != cs_pow_small)
    mask_index = spr_mask_player_big;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goal player logic

//Inherit step event
event_inherited();

//Close curtain and go to map
if (ready3 == 1)
&amp;&amp; (fireworks == 0)
&amp;&amp; (global.time == 0)
&amp;&amp; (global.bonusadd == 0)
&amp;&amp; (!audio_is_playing(snd_goalgate_2))
&amp;&amp; (!audio_is_playing(snd_goalgate_special)) {

    //Close curtain
    ready3 = 2;
    
    //Create curtain effect
    instance_create(0, 0, obj_goal_curtain);
}

//Make the screen fade out
if (ready2 == 1) {

    //If the fade object exists
    if (instance_exists(obj_goal_fade))
        with (obj_goal_fade) fade = 2;
}

//Increment speed
if (ready3 == 2) {

    //Build up some speed
    hspeed += 0.0324;
    
    //Prevent it from going too fast
    if (hspeed &gt; 1.75)
        hspeed = 1.75;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the countdown sounds

//Play 'Count' sounds
if (ready4 == 1) {

    //If the timer is greater than 0
    if (global.time &gt; 0) 
    || (global.bonusadd &gt; 0) {
    
        ready4 = 2;
        audio_stop_play_sound(snd_count, 0, false);
        audio_stop_play_sound(snd_count2, 0, true);
    }
    else    
        ready4 = 3;
}
else if ((global.time &lt; 1) &amp;&amp; (global.bonusadd == 0) &amp;&amp; (ready4 == 2)) {

    ready4 = 3;
    audio_stop_sound(snd_count2);
    audio_stop_play_sound(snd_count3, 0, false);
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin countdown state

//Start the countdown if there is a time limit
if (global.time &gt; 0)
    alarm[1] = 1;
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Draw the cape
if (global.powerup &gt;= cs_pow_cape) {

    //If not moving vertically
    if (vspeed == 0) {
    
        //If not moving horizontally
        if (hspeed == 0)
            draw_sprite_ext(spr_cape_climb, 1, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);
        else
            draw_sprite_ext(spr_cape_walk, anim, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);
    }
    
    //Otherwise
    else {
    
        //If moving up
        if (vspeed &lt; 0)
            draw_sprite_ext(spr_cape, anim, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);
        else
            draw_sprite_ext(spr_cape_fall, anim, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);            
    }   
}

//Set the palette
player_set_palette(id);

//Draw the player
draw_sprite_ext(sprite_index, -1, round(x), round(y)+1, image_xscale, 1, 0, c_white, 1);

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
