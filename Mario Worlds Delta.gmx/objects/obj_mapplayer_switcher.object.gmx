<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mapluigi</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map buddy

//Current character
myplayer = global.player + 1;

//Character buffer
if (myplayer &gt; 3)
    myplayer = 0;

//Current movement state    
state = 0;

//Goal positions
dest_x = x;
dest_y = y;

//Below player
depth ++;

//Whether the character is swimming
is_swimming = false;

//Collision variables
xorig = 7;
yorig = 7;

//Scale
xscale = 1;

//Switching
switching = false;

//Animate
animate = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set animation state

animate = !animate;

if (animate == false)

    alarm[0] = 300;
    
if (animate == true)

    alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map buddy logic

//If not moving...
if (state == 0) {

    if (speed == 0) {

        move_towards_point(dest_x,dest_y,1);
        state = 1;

    }

}

//If moving...
if (state == 1) {

    //If you reached your position
    if (point_distance(x,y,dest_x,dest_y) &lt;= abs(speed)) {
    
        //Stop moving
        speed = 0;
        
        //Buffer position
        x = dest_x;
        y = dest_y;
        
        //Stop checkin for movement
        state = 2;
        
        //Animate
        alarm[0] = 2;
    
    }

}

//If not moving back, and told to do so...
if (state == 3) {

    if (speed == 0) {

        move_towards_point(xstart,ystart,1);
        state = 4;

    }

}

//If moving back to start...
if (state == 4) {

    //If you reached your position
    if (point_distance(x,y,xstart,ystart) &lt;= abs(speed)) {
    
        //Destroy, you're done
        instance_destroy();
        
        //If switching players
        if (switching) {
        
            //If the player was switching players as well
            if (obj_mapplayer.status == mapstate.switching) {
        
                //Set back to idle
                obj_mapplayer.status = mapstate.idle;
                
                //Instantiate new buddy
                obj_mapplayer.player_wait = obj_mapplayer.wait_time-1;
                
            }
            
        }
    
    }
    
}

if (image_index &gt; sprite_get_number(sprite_index)) {

    image_index -= sprite_get_number(sprite_index);
    
}

//Note current player
var current_player = global.player;
global.player = myplayer;

//Check for a climbing object
if (collision_point(x+xorig, y+yorig, obj_climb, 0, 0))
    is_climbing = true;
else
    is_climbing = false;
    
//Check for a swimming object
if (collision_point(x+xorig, y+yorig, obj_swim, 0, 0))
    is_swimming = true;
else
    is_swimming = false;

//Set sprites
if (speed == 0) {

    sprite_index = player_map();
    xscale = 1;

} else if (cos(direction) != 0) {

    if (sign(cos(direction)) == -1)
    
        xscale = -1;
        
    if (sign(cos(direction)) == 1)
    
        xscale = 1;

    sprite_index = player_map_side();
    
}

//Buffer direction
if (direction &gt; 360) {

    direction -= 360;
    
}
    
//Animate walk
if (speed != 0 || animate || floor(image_index) != 1)

    image_speed = 0.125;
    
//Stand still
else {

    image_speed = 0;
    image_index = 1;
    
}

global.player = current_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw map buddy
event_perform_object(obj_mapplayer,ev_draw,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
