<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_levelpanel_airship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>obj_levelpanel</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map Castle Level Panel

//Inherit event
event_inherited();

//Panel type
paneltype = 1;
blownup = false;

//Do not animate
image_speed = 0.2;

//Always stay visible regardless of whether it was unlocked
image_alpha = 1;

//If there's a modifier on this path
if (ds_map_exists(global.worldmap, id))
|| (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_modifier, 1, 0)) {

    //Turn visible
    image_alpha = 1;
    
    //If the data storage list does not exist, add it
    if (!ds_map_exists(global.worldmap, id))
        ds_map_add(global.worldmap, id, 1);
        
    //Otherwise
    else {
        
        //If this switch has been pressed before, make it visible for the player
        if (ds_map_find_value(global.worldmap, id) == 2) {
        
            //Set sprite
            alarm[3] = 1;
            image_speed = 0;
            beaten = 2;
        }
    }
}

//X Speed
xsp = 0;

//Offset
xoffset = 0;
yoffset = 0;

//Timer
timer = 0;

//Manage offset
xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set destroyed sprite to overwrite custom sprite if level is beaten

sprite_index = spr_levelpanel_airship_beaten;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a destroyed airship

//Play 'Destroy' sound
audio_stop_play_sound(snd_destroy, 0, false);

//Turn into a stomped switch
sprite_index = spr_levelpanel_airship_beaten;

//Mark as beaten
beaten = 2;

//Create smoke effect
with (instance_create(x+8, y+8, obj_smoke)) {

    sprite_index = spr_smoke_32;
    depth = other.depth - 1;
}

with (obj_mapplayer) alarm[1] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage offset

//X Movement
xsp += 0.05*xscale;
xoffset += xsp;

//Cap X Movement
if (xsp &gt; 0.375)
    xsp = 0.375;
else if (xsp &lt; -0.375)
    xsp = -0.375;

//Y Movement
yoffset = sin(timer*0.1)*2;
timer++;

//Switch sides
if (xoffset &gt; 14)
    xscale = -1;
else if (xoffset &lt; -14)
    xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the airship

if (sprite_index == spr_levelpanel_airship) {

    draw_sprite_ext(spr_levelpanel_airship, -1, x+xoffset, y+yoffset-14, xscale, 1, 0, c_white, 1);
    draw_sprite_ext(spr_maplakitu_shadow, -1, x+xoffset-8, y-4, 1, 1, 0, c_white, 1);
}
else
    draw_sprite_ext(spr_levelpanel_airship_beaten, 0, x+offset, y, xscale, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
