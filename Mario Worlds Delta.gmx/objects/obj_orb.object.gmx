<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_orb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sunken Ghost Ship Orb

//Set the pre-freeze image
global.prefreeze = 0;

//Generate sparkles
alarm[0] = 30;

//Move 1 pixel
y++;

//Check if ready
ready = 0;
ready2 = 0;

//Screenshot
back = -1;

//Dynamic orb
bouncy = 1;

//Inherit event from parent
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the world map

wmap_return();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off time and add it to score

//If the HUD is not "Minimalist / No Score"
if (obj_controller.hud_type != 4) {
       
    //If the time is greater than 4, decrement 5 seconds from timer
    if (global.time &gt; 4) {
    
        //Repeat the process
        alarm[2] = 2;
    
        //Get 500 points
        score += 500;
        
        //Decrement 5 seconds
        global.time -= 5;
    }
    
    //Otherwise, decrement timer by 1 second
    else if ((global.time &lt; 5) &amp;&amp; (global.time &gt; 0)) {
    
        //Repeat the process
        alarm[2] = 2;
    
        //Get 100 points
        score += 100;
        
        //Decrement 1 second
        global.time--;
    }
    
    //Play sounds
    if (ready == 0)
        ready = 1;
}
else {

    global.time = 0;
    ready = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin deactivation sequence

//Delete the pre-freeze
file_delete("prefreeze.png");

//Create a screenshot
back = background_create_from_surface(application_surface, 0, 0, global.gw*2, global.gh*2, 0, 0);

//Deactivate all instances
instance_deactivate_all(1);

//Activate the HUD
instance_activate_object(obj_hud);

//Activate HUD
instance_activate_object(obj_hud);
with (obj_hud) {

    //Make it visible
    visible = 1;
    
    //Show 'Course Clear'
    clear = 1;
    
    //Multiplier
    multiplier = 100;
    
    //Set the time to show in the course clear frame
    time = global.time;
    
    //Give an extra life if the time ends in double zero
    if (time mod 100 == 0) {
        
        //Play '1-UP' sound
        audio_stop_play_sound(snd_1up, 0, false);
        
        //Give extra life
        lives++;    
    }
}

//Activate music player
instance_activate_object(obj_audio_loop_sound);

//Activate lighting
instance_activate_object(obj_lightcontrol);
instance_activate_object(obj_lightparent);
with (obj_lightcontrol) visible = 1;
with (obj_lightparent) visible = 1;

//Activate water tides
instance_activate_object(obj_water);
with (obj_water) visible = 1;

//Activate water tides
instance_activate_object(obj_water_tides);
with (obj_water_tides) visible = 1;

//Activate effects
instance_activate_object(obj_effectsparent);
with (obj_effectsparent) visible = 1;

//Activate controller object
instance_activate_object(obj_controller);

//Deactivate particles
with (obj_rainmaker) event_user(0);

//Make the object visible
visible = true;

//Take points out of time and add it to score
alarm[2] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate sparkle effect if visible

if (image_alpha == 0)
exit;

alarm[0] = 30;
with (instance_create(x+random(round(16)), y+random(round(16)), obj_smoke)) {

    image_speed = 0.1;
    sprite_index = spr_sparkle_small_blue;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the countdown sounds and return to map when all conditions are met

//Go to map if the fanfare is not playing
if (ready == 3) {

    if (ready2 == 0)
    &amp;&amp; (global.time == 0)
    &amp;&amp; (!audio_is_playing(snd_bossclear)) {
    
        //Begin world map return sequence
        ready2 = 1;
        
        //Return to world map
        alarm[3] = 120;
    }
}

//Play 'Count' sounds
if (ready == 1) {

    //If the timer is greater than 0
    if (global.time &gt; 0) {
    
        ready = 2;
        audio_stop_play_sound(snd_count, 0, false);
        audio_stop_play_sound(snd_count2, 0, true);
    }
    else    
        ready = 3;
}
else if ((global.time &lt; 1) &amp;&amp; (ready == 2)) {

    ready = 3;
    audio_stop_sound(snd_count2);
    audio_stop_play_sound(snd_count3, 0, false);
}    

//Inherit event from parent
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin goal sequence

if (image_alpha == 1) 
&amp;&amp; (gravity == 0) {

    //Make invisible
    image_alpha = 0;
    
    //Save an image of the screen
    surface_save(application_surface,"prefreeze.png");
    
    //Set the pre-freeze image
    global.prefreeze = sprite_add("prefreeze.png",0,false,false,0,0);

    //Play 'Boss Clear' theme
    audio_stop_play_sound(snd_bossclear, 0, false);
    
    //Stop P-Switch and Starman music
    audio_stop_sound(bgm_pswitch);
    audio_stop_sound(bgm_starman);
    
    //Stop both music and timer
    with (obj_levelcontrol) {
    
        musicdisable = true;
        alarm[1] = 1;
        alarm[2] = -1;
        alarm[3] = -1;
        alarm[4] = -1;
    }
    
    //Set clear state
    global.clear = 1;
    
    //Remember yoshi colour
    if (global.mount == 1) {
    
        global.mountcolour = obj_yoshi.colour;
    }
    
    //Make following objects invisible
    with (obj_hud) visible = 0;
    with (obj_water) visible = 0;
    with (obj_water_tides) visible = 0;
    with (obj_lightparent) visible = 0;
    with (obj_lightcontrol) visible = 0;
    with (obj_effectsparent) visible = 0;
    with (obj_rainmaker) visible = 0;
    
    //Begin deactivation sequence
    alarm[1] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the background if it exists and the orb
    
//If the animation has been set.
if (background_exists(back)) {

    //Disable alpha blending.
    draw_enable_alphablend(0);
    
    //Draw the screenshot
    draw_background(back, view_xview[0], view_yview[0]);
    
    //Enable alpha blending.
    draw_enable_alphablend(1);
}

//Draw orb
draw_sprite_ext(sprite_index, -1, x, y, 1, 1, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
