<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_yoshi_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi, Yoshi! (Does anyone have a yoshi-english dictionary?)

//Inherit event from parent
event_inherited();

//Yoshi State
enum yoshistate {

    idle,
    ridden,
    runaway
}
state = yoshistate.idle;

//Yoshi Colour
colour = 0;
if (global.mountcolour != 0) {

    colour = global.mountcolour;
    global.mountcolour = 0;
}

//Is yoshi licking?
licking = 0;

//Whether Yoshi's tounge is locked.
locked = 0;

//What's in Yoshi's mouth?
mouthholder = noone;

//Sprite of the item in Yoshi's mouth
mouthsprite = noone;

//Whether Yoshi has ate a powerup
powerup = noone;

//Ammo
ammo = 0;

//Animation
anim = 0;

//Is Yoshi jumping?
jumping = 0;

//Is Yoshi flying?
flying = 0;

//Flying animation
flyanim = 1;

//Can yoshi be ridden again
rideme = 1;

//Turning Animation
turning = 0;

//Scale
xscale = 1;

//Set the animation
alarm[5] = 60;
alarm[6] = 76;

//Player variables
f = 0;
m = player_ride();
m_vis = 1;
m_ypos = 0;

//If an item was carried from the previous room.
if (global.carrieditem != noone) {

    //Remember the item and reset it.
    mouthholder = global.carrieditem;
    global.carrieditem = noone;
    
    //Remember the sprite and reset it.
    mouthsprite = global.carriedsprite;
    global.carritedsprite = noone;
}

//Update palette
pal_sprite = spr_palette_yoshi;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Close mouth if idle

if (state == yoshistate.idle) {

    image_index = 0;
    alarm[5] = 60;
    alarm[6] = 76;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open mouth if idle

if (state == yoshistate.idle)
    image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make flying noises for Yoshi when flying

if (flying) {

    //Play 'Lick' sound
    audio_stop_play_sound(snd_lick, 0, false)
    
    //Repeat the process.
    alarm[4] = 8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create eaten powerup

instance_create(x, y, powerup);
powerup = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish licking and give out a powerup if Yoshi ate one.

licking = 0;
if (powerup != noone)
    alarm[3] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin finishing the licking process / Animate idle

//If yoshi is being ridden
if (state == yoshistate.ridden) {

    anim = 0;
    alarm[2] = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Perform action based on state

//If yoshi is idle or running away, allow ride
if (state != yoshistate.ridden)
    rideme = 1;
    
//Otherwise, if yoshi is being ridden
else if (state == yoshistate.ridden) {

    anim = 1;
    instance_create(x, y, obj_tongue);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi Logic

//If Yoshi is not being ridden, perform event from parent.
if (state == yoshistate.idle)
|| (state == yoshistate.runaway) {

    //Inherit event from parent
    event_inherited();
    
    //Set up the depth
    if (depth != -2)
        depth = -2;
}

//Otherwise
else if (state == yoshistate.ridden) {

    //Stop swimming
    swimming = false;

    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //Snap into the player
        x = obj_playerparent.x;
        y = obj_playerparent.y+1;
        
        //Force player invisibility
        obj_playerparent.visible = 0;
        
        //Force player holding state
        obj_playerparent.holding = 99;
        
        //If Yoshi does not have anything on the mount and 'Action 2' is pressed
        if (keyboard_check_pressed(global.key_action[1]))
        &amp;&amp; (licking == 0)
        &amp;&amp; (obj_playerparent.gravity_enable == true)
        &amp;&amp; (obj_playerparent.control_enable == true) {
        
            //If the mouth is empty
            if (mouthholder == noone) {
            
                //Play 'Lick' sound
                audio_play_sound(snd_lick, 0, false);
                
                //Start licking
                licking = 1;
                alarm[0] = 5;
                
                //Animation
                anim = 0;
                m_anim = 3;
                
                //Lock tongue in position
                if ((keyboard_check(global.key_u)) || (jumping &gt; 0)) {
                
                    //If the player is not crouched down
                    if (obj_playerparent.crouch == false)
                        locked = 1;
                    else
                        locked = 2;
                }
                else
                    locked = 2;
            }
            
            //Otherwise, spit out the item
            else
                event_user(0);
        }
        
        //Set the depth
        depth = obj_playerparent.depth;
        
        //Manage yoshi state
        if (mouthholder) 
            event_user(2);
        
        //Set mask to big
        obj_playerparent.mask_index = spr_mask_player_big;
        
        //Check if the player is jumping and make yoshi set up his jump pose if so.
        if (obj_playerparent.state == statetype.jump)
            jumping = 1;
        else
            jumping = 0;
    }
    
    //Otherwise, if the player is warping through a pipe.
    else if (instance_exists(obj_player_warp)) {
    
        //Snap into the player
        x = obj_player_warp.x;
        y = obj_player_warp.y;
        
        //Force the player to be invisible
        obj_player_warp.visible = false;
        
        //Depth
        depth = 11;
    }
    
    //Otherwise, if the player is warping through a door.
    else if (instance_exists(obj_player_door)) {
    
        //Snap into the player
        x = obj_player_door.x;
        y = obj_player_door.y;
        
        //Force the player to be invisible
        obj_player_door.visible = false;
        
        //Depth
        depth = -5;
    }
}

//Force end flying sound if not holding anything on the mouth
if (audio_is_playing(snd_lick))
&amp;&amp; (flying == 1)
&amp;&amp; (mouthholder == noone)
    audio_stop_sound(snd_lick);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi Animation

//If Yoshi is idle
if (state == yoshistate.idle) {

    //Set the sprite
    sprite_index = spr_yoshi_idle;

    //Do not animate
    image_speed = 0;    
    
    //Set up the sprite
    if (mouthholder != noone)
        image_index = 2;
}

//Otherwise, if Yoshi is running away
else if (state == yoshistate.runaway) {

    //Animate
    image_speed = 0.3;

    //If Yoshi's mouth is full
    if (mouthholder != noone)
        sprite_index = spr_yoshi_fullmouth;
    else
        sprite_index = spr_yoshi_scared;
}

//Otherwise
else {

    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //If Yoshi is licking something
        if (licking == true) {
        
            //If the 'Up' key is being held or Yoshi is jumping.
            if (locked == 1) {
            
                //Set the sprite
                sprite_index = spr_yoshi_lick;
                
                //Do not animate
                image_speed = 0;
                
                //Set the frame
                if (obj_playerparent.vspeed != 0) {
                
                    if (obj_playerparent.vspeed &lt; 0)
                        image_index = 1;
                    else if (obj_playerparent.vspeed &gt; 0)
                        image_index = 2;
                }
                else
                    image_index = 0;
            }
            
            //Otherwise
            else {
            
                //Set the sprite
                sprite_index = spr_yoshi_lick_alt;
                
                //Do not animate
                image_speed = 0;
                image_index = anim;
            }
        }
        
        //Otherwise, if Yoshi is not licking
        else if (licking == false) {
        
            //If the player is crouched down or it is sliding down a slope
            if (obj_playerparent.crouch == true)
            || (obj_playerparent.sliding == true) {
            
                //If Yoshi is holding something on his mouth
                if (mouthholder != noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_idle;
                    
                    //Do not animate
                    image_speed = 0;
                    image_index = 2;
                }
                
                //Otherwise
                else if (mouthholder == noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_idle;
                    
                    //Do not animate
                    image_speed = 0;
                    image_index = 0;
                }
            }
            
            //Otherwise
            else {
            
                //If the player is idle
                if (obj_playerparent.state == statetype.idle) {
                    
                    //If Yoshi is holding something on his mouth
                    if (mouthholder != noone) {
                    
                        //Set the sprite
                        sprite_index = spr_yoshi_fullmouth;
                        
                        //Do not animate
                        image_speed = 0;
                        image_index = 0;
                    }
                    
                    //Otherwise, if Yoshi is not holding anything on his mouth
                    else if (mouthholder == noone) {
                    
                        //Set the sprite
                        sprite_index = spr_yoshi;
                        
                        //Do not animate
                        image_speed = 0;
                        image_index = 0;
                    }
                }
                
                //Otherwise, if the player is walking
                else if (obj_playerparent.state == statetype.walk) {
                
                    //If Yoshi is holding something on his mouth
                    if (mouthholder != noone) {
                    
                        //Set the sprite
                        sprite_index = spr_yoshi_fullmouth;
                        
                        //Set the animation speed
                        image_speed = (0.065*(obj_playerparent.inice*4))+abs(obj_playerparent.hspeed)/7.5;
                    }
                    
                    //Otherwise, if Yoshi is not holding anything on his mouth
                    else if (mouthholder == noone) {
                                    
                        //Set the sprite
                        sprite_index = spr_yoshi;
                    
                        //Set the animation speed
                        image_speed = (0.065*(obj_playerparent.inice*4))+abs(obj_playerparent.hspeed)/7.5;
                    }
                }
                
                //Otherwise, if the player is jumping
                else if (obj_playerparent.state == statetype.jump) {
                
                    //If Yoshi is holding something on his mouth
                    if (mouthholder != noone) {
                    
                        //Set the sprite
                        sprite_index = spr_yoshi_fullmouth_jump;
                        
                        //Do not animate
                        image_speed = 0;
                        
                        //Set the frame
                        if (obj_playerparent.vspeed &lt; 0)
                            image_index = 0;
                        else
                            image_index = 1;
                    }
                    
                    //Otherwise, if Yoshi is not holding anything on his mouth
                    else if (mouthholder == noone) {
                    
                        //Set the sprite
                        sprite_index = spr_yoshi_jump;
                        
                        //Do not animate
                        image_speed = 0;
                        
                        //Set the frame
                        if (obj_playerparent.vspeed &lt; 0)
                            image_index = 0;
                        else
                            image_index = 1;                                            
                    }
                }
            }
        }
    }
    
    //Otherwise, if the player is warping through a pipe
    else if (instance_exists(obj_player_warp)) {
    
        //If the player is not moving vertically
        if (obj_player_warp.vspeed == 0) {
    
            //If Yoshi is holding something on his mouth.
            if (mouthholder != noone) {
            
                //Set the sprite
                sprite_index = spr_yoshi_fullmouth;
                
                //Animate
                image_speed = 0.2;
            }
            
            //Otherwise, if Yoshi is not holding anything on his mouth.
            else if (mouthholder == noone) {
            
                //Set the sprite
                sprite_index = spr_yoshi;
                
                //Animate
                image_speed = 0.2;               
            }
            
            //Set the depth
            depth = 10;
        }
        else {
        
            //If Yoshi is holding something on his mouth.
            if (mouthholder != noone) {
            
                //Set the sprite
                sprite_index = spr_yoshi_fullmouth_warp;
                
                //Do not animate
                image_speed = 0;
                image_index = 0;
            }
            
            //Otherwise, if Yoshi is not holding anything on his mouth.
            else if (mouthholder == noone) {
            
                //Set the sprite
                sprite_index = spr_yoshi_warp;
                
                //Do not animate
                image_speed = 0;
                image_index = 0;
            }
        }
    }
    
    //Set up the y position for Mario
    if (sprite_index == spr_yoshi)
    || (sprite_index == spr_yoshi_fullmouth) {
    
        if (image_index &gt; 0.99)
            m_ypos = 1;
        else
            m_ypos = 0;
    }
    else
        m_ypos = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi Physics

//Bounce if idle
if (state == yoshistate.idle) {

    //If there's no gravity
    if (gravity == 0) {
    
        //If Yoshi is not underwater
        if (swimming == false)
            vspeed = -1.5;
            
        //Otherwise, make a little bounce
        else
            vspeed = -0.75;
    }
}

//If Yoshi is not being ridden...
if (state != yoshistate.ridden) {

    //Perform default event
    event_inherited();
    
    //Stop horizontal speed
    if (state == yoshistate.idle) {
        
        if (gravity == 0) {
        
            if (hspeed != 0)
                hspeed = 0;
        }
    }
    
    //Set facing direction
    if (hspeed &gt; 0)
        xscale = 1;
    else if (hspeed &lt; 0)
        xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spinner">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ignore collision with this object

exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mount Yoshi

//If Yoshi is idle or running away
if (state == yoshistate.idle)
|| (state == yoshistate.runaway) {

    //If the player jumps on Yoshi and Yoshi can be ridden
    if (rideme == true) 
    &amp;&amp; (other.vspeed &gt; 0) 
    &amp;&amp; (other.holding == 0)
    &amp;&amp; (other.visible == true) {
    
        //Play 'Yoshi' sound
        audio_play_sound(snd_yoshi, 0, false);
                
        //Set up yoshi state
        state = yoshistate.ridden;  
              
        //Yoshi is ridden
        global.mount = 1;
               
        //Stop movement
        speed = 0;
        gravity = 0;          
        
        //Snap into position
        other.x = x;
        other.y = y;
        
        //Force the player to hold Yoshi
        other.holding = 99;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Animation (Door)

//Temporary player variables
f = 0;
m = player_ride();

//Set up the shader
player_set_palette(obj_player_door);

//Draw the player
if (m_vis == 1) {

    //Draw the cape at the frong
    if (global.powerup &gt;= cs_pow_cape) {
    
        draw_sprite_ext(spr_cape, 0, round(x)-(6*sign(obj_player_door.image_xscale)), round(y)-7+m_ypos, obj_player_door.image_xscale, 1, 0, c_white, 1);
    }    
        
    //Draw the player
    draw_sprite_ext(m, f, round(x)-(6*sign(obj_player_door.image_xscale)), round(y)-7+m_ypos, obj_player_door.image_xscale, 1, 0, c_white, 1);
}

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Animation (Warp)

//Temporary player variables
f = 0;
m = player_ride();

//If the player is moving vertically
if (obj_player_warp.vspeed != 0) {

    f = 2;
}
else {

    f = 1;
}

//Set up the shader
player_set_palette(obj_player_warp);

//Draw the player
if (m_vis == 1) {

    //Draw the cape behind
    if (global.powerup &gt;= cs_pow_cape) {
        
        if (obj_player_warp.vspeed != 0)        
            draw_sprite_ext(spr_cape_climb, 1, round(x), round(y)-8, 1, 1, 0, c_white, 1);
        else
            draw_sprite_ext(spr_cape_walk, -1, round(x)-(6*sign(obj_player_warp.image_xscale)), round(y)-8+m_ypos, obj_player_warp.image_xscale, 1, 0, c_white, 1);
    }

    //Draw the player
    if (obj_player_warp.vspeed == 0)
        draw_sprite_ext(m, f, round(x)-(6*sign(obj_player_warp.image_xscale)), round(y)-8+m_ypos, obj_player_warp.image_xscale, 1, 0, c_white, 1);
    else
        draw_sprite_ext(m, f, round(x), round(y)-8, image_xscale, 1, 0, c_white, 1);
}

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Animation (Normal)

//Temporary player variables
f = 0;
m = player_ride();

//If Yoshi is licking something
if (licking == true) {

    //If the 'Up' key is being held or Yoshi is jumping
    if (sprite_index == spr_yoshi_lick)
        f = 0;
    else
        f = 1;
}

//Otherwise, if Yoshi is not licking
else {

    //If the player is crouched down or sliding down a slope
    if (obj_playerparent.crouch == true)
    || (obj_playerparent.sliding == true)
        f = 1;
    else
        f = 0;
}

//Set up the shader
player_set_palette(obj_playerparent);

//Draw the player
if (m_vis == 1) {

    draw_sprite_ext(m, f, round(x)-(6*sign(obj_playerparent.xscale)), round(y)-8+m_ypos, obj_playerparent.xscale, 1, 0, c_white, obj_playerparent.image_alpha);
}

//Reset shader
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check what shell does have yoshi on his mouth and give abilities

if (mouthholder == obj_shell)
&amp;&amp; (instance_number(obj_tongue) == 0) {
    
    //If yoshi is yellow or has a yellow shell in mouth
    if (colour == 2) {
                    
        //If the player lands after a jump, stomp
        if (stateprev == statetype.jump)
        &amp;&amp; (obj_playerparent.state != statetype.jump) {
          
            //Play 'Yoshi Stomp' sound
            audio_play_sound(snd_stomp_yoshi, 0, false);
            
            //Create 'Stomp' object
            instance_create(x, bbox_bottom, obj_stomp);
        }
    }
    
    //If yoshi is blue or has a blue shell in mouth
    if (colour == 3) 
    || (mouthsprite == spr_shell_blue) {
    
        //If 'Shift' is being held outside water
        if (keyboard_check(global.key_action[0])) 
        &amp;&amp; (obj_playerparent.swimming == false) {
        
            //If not flying and moving down, start flying.
            if (!flying)
            &amp;&amp; (obj_playerparent.vspeed &gt; 0) 
            &amp;&amp; (obj_playerparent.flying = 0) {
            
                flying = 1;
                alarm[4] = 1;
            }
            
            //When flying
            if (flying) {
            
                //With the player
                with (obj_playerparent) {
                
                    //If there's not a ceiling above the player, move up
                    if (!collision_rectangle(bbox_left, bbox_top-3, bbox_right, bbox_top, obj_solid, 0, 0))
                    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top-3, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
                    
                        vspeed += -1;
                        if (vspeed &lt; -2)
                            vspeed = -2;                                                     
                    }
                }
                
                //Animate wing
                flyanim += 0.25;
            }
            
            //Otherwise, reset fly animation
            else
                flyanim = 0;
        }
        
        //Otherwise, reset flight
        else {
        
            audio_stop_sound(snd_lick);
            flying = 0;
            flyanim = 0;
        }    
    }    
}

//Remember last state
stateprev = obj_playerparent.state;

//Turn kicked shells into holdable shells
if (mouthholder == obj_shell_kicked)
    mouthholder = obj_shell;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dismount from Yoshi

//If Yoshi is being ridden
if (state == yoshistate.ridden) {

    //Set up the state
    state = yoshistate.idle;
    
    //Stop licking
    licking = 0;
    anim = 0;
    
    //With the player
    if (instance_exists(obj_playerparent)) {
    
        //Hereby horizontal speed from the player
        hspeed = obj_playerparent.hspeed/2;
        
        //Hereby facing direction from the player
        xscale = obj_playerparent.xscale;
                
        //Make the player visible and able to hold stuff
        with (obj_playerparent) {
        
            visible = true;
            holding = 0;
        }
    }
    
    //Set animation
    image_index = 1;
    alarm[6] = 16;
    
    //Allow ride
    rideme = 0;
    alarm[0] = 16;
    
    //Stop mounting
    global.mount = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spit out an item

//If Yoshi is holding anything on his mouth
if (mouthholder != noone) {
    
    //Play 'Spit' sound
    audio_play_sound(snd_spit, 0, false);
    
    //Spit out the item
    if (obj_playerparent.crouch == true) 
    || (obj_playerparent.sliding == true) {
    
        //If the item held on yoshi's mouth is a shell
        if (mouthholder == obj_shell) {
        
            //If this is a red yoshi
            if (colour == 1)
            || (mouthsprite == spr_shell_red)
                mouthholder = obj_yoshi_fire;
        }
        
        //Lock it
        locked = 2;
        
        //If yoshi is holding fire
        if (mouthholder == obj_yoshi_fire) {
    
            //Play 'Flames' sound
            audio_play_sound(snd_flames, 0, false);
            
            //Make yoshi fire
            instance_create(x+(10*obj_playerparent.xscale),y-12,obj_yoshi_fire);
            with (instance_create(x+(10*obj_playerparent.xscale),y-12,obj_yoshi_fire)) 
                vspeed = 1;
            with (instance_create(x+(10*obj_playerparent.xscale),y-12,obj_yoshi_fire)) 
                vspeed = -1;           
        }
        
        //If yoshi is holding a fire melon
        else if (mouthholder == obj_watermelon_fire) {
        
            //Play 'Flames' sound
            audio_play_sound(snd_flames, 0, false);
            
            //If there's ammo left
            if (ammo &gt; 0) {
            
                //Decrement ammo
                ammo--;
                
                //Make yoshi fire
                instance_create(x+(10*obj_playerparent.xscale), y-12, obj_yoshi_fire);
                with (instance_create(x+(10*obj_playerparent.xscale), y-12, obj_yoshi_fire)) 
                    vspeed = 1;
                with (instance_create(x+(10*obj_playerparent.xscale), y-12, obj_yoshi_fire)) 
                    vspeed = -1;
            }              
        }
        
        //If yoshi is holding a bomb melon
        else if (mouthholder == obj_watermelon_bomb) {
            
            //If there's ammo left
            if (ammo &gt; 0) {
            
                //Decrement ammo
                ammo--;
                
                //Make yoshi spit a bomb
                with (instance_create(x+(10*obj_playerparent.xscale), y-12, obj_yoshi_bomb))
                    hspeed = 3*obj_playerparent.xscale;
            }              
        }
        
        //Otherwise
        else {
        
            //If the held item is a kicked shell, turn into a holdable shell
            if (mouthholder == obj_shell_kicked) then mouthholder = obj_shell;
        
            //Create up an item
            with (instance_create(x+(10*obj_playerparent.xscale), y-12, mouthholder)) {
            
                //Use the correct sprite
                sprite_index = other.mouthsprite;
                
                //Set the horizontal speed
                hspeed = 0.5*obj_playerparent.xscale;
                
                //Set swimming state
                if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
                    swimming = 1;
            }
        }
    }
    else {
    
        //If the item held on yoshi's mouth is a shell
        if (mouthholder == obj_shell) {
        
            //If this is a red yoshi or the shell is a red one
            if (colour == 1)
            || (mouthsprite == spr_shell_red)
                mouthholder = obj_yoshi_fire;
            else
                mouthholder = obj_shell_kicked;
        }
        
        //Lock it
        locked = 1;
        
        //If yoshi is holding fire
        if (mouthholder == obj_yoshi_fire) {
        
            //Play 'Flames' sound
            audio_play_sound(snd_flames, 0, false);
            
            //Make yoshi fire
            instance_create(x+(10*obj_playerparent.xscale),y-16,obj_yoshi_fire);
            with (instance_create(x+(10*obj_playerparent.xscale),y-16,obj_yoshi_fire)) 
                vspeed = 1;
            with (instance_create(x+(10*obj_playerparent.xscale),y-16,obj_yoshi_fire)) 
                vspeed = -1;         
        
        }
        
        //If yoshi is holding a fire melon
        else if (mouthholder == obj_watermelon_fire) {
        
            //Play 'Flames' sound
            audio_play_sound(snd_flames, 0, false);
            
            //If there's ammo left
            if (ammo &gt; 0) {
            
                //Decrement ammo
                ammo--;
                
                //Make yoshi fire
                instance_create(x+(10*obj_playerparent.xscale), y-16, obj_yoshi_fire);
                with (instance_create(x+(10*obj_playerparent.xscale), y-16, obj_yoshi_fire)) 
                    vspeed = 1;
                with (instance_create(x+(10*obj_playerparent.xscale), y-16, obj_yoshi_fire)) 
                    vspeed = -1;
            }              
        }
        
        //If yoshi is holding a bomb melon
        else if (mouthholder == obj_watermelon_bomb) {
            
            //If there's ammo left
            if (ammo &gt; 0) {
            
                //Decrement ammo
                ammo--;
                
                //Make yoshi spit a bomb
                with (instance_create(x+(10*obj_playerparent.xscale), y-16, obj_yoshi_bomb))
                    hspeed = 3*obj_playerparent.xscale;
            }              
        }
        
        //Otherwise
        else {
        
            //Create up an item
            with (instance_create(x+(10*obj_playerparent.xscale), y-16, mouthholder)) {
            
                //Use the correct sprite
                sprite_index = other.mouthsprite;
                
                //If the eaten item is a throwable brick.
                if (sprite_index == spr_brick_throw_th) {
                    
                    //Set the horizontal speed.
                    hspeed = 3*obj_playerparent.xscale;
                    
                    //Set the animation speed
                    image_speed = 0.5;
                    
                    //Get thrown
                    ready = 1;
                    
                    //If the object is in contact with a solid.
                    if (place_meeting(x, y, obj_solid))
                        event_user(0);
                }
                
                //If the eaten item is a shell
                else if (sprite_index == spr_shell) || (sprite_index == spr_shell_blue) {
                
                    //Set the horizontal speed
                    prevhspeed = (2.7+abs(obj_playerparent.hspeed/4))*obj_playerparent.xscale;
                    hspeed = (2.7+abs(obj_playerparent.hspeed/4))*obj_playerparent.xscale;
                    
                    //Get thrown
                    ready = 1;
                    
                    //If the object is in contact with a solid
                    if (place_meeting(x, y, obj_solid))
                        event_user(0);
                }
                
                //Otherwise
                else {
                
                    //If the eaten item is a POW block.
                    if (sprite_index = spr_powblock_blue) 
                    &amp;&amp; (!keyboard_check(global.key_d))      
                        ready = 1;
                        
                    //Otherwise if the item is a galoomba
                    if (sprite_index = spr_galoomba_down) || (sprite_index = spr_goombud_down)
                    &amp;&amp; (place_meeting(x, y, obj_solid))
                        event_user(0);
        
                    //If the eaten item is not overlapping a solid.
                    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
                    
                        //Set the motion when swimming.
                        if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0)) {
                        
                            if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
                                hspeed = obj_playerparent.hspeed+0.75*obj_playerparent.xscale;
                            else
                                hspeed = 1*obj_playerparent.xscale;                
                        }
                        
                        //Otherwise, set the motion when NOT swimming.
                        else {
                        
                            if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
                                hspeed = obj_playerparent.hspeed+1.5*obj_playerparent.xscale;
                            else
                                hspeed = 2*obj_playerparent.xscale;                
                        }
                    }
                    
                    //Make the item get not stuck on a solid.
                    else
                        inwall = true;
                }
                
                //Set swimming state
                if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_swim, 0, 0))
                    swimming = 1;
            }
        }
    }
    
    //If there's not ammo left
    if (ammo == 0) {
            
        //Reset mouth item
        mouthholder = noone;
        
        //Reset item sprite
        mouthsprite = noone;
    }
    
    //Licking
    licking = 1;
    
    //Stop licking
    alarm[2] = 5;
    
    //Lick animation
    anim = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember colour and carried item if mounted

if (state == yoshistate.ridden) {

    //Remember Yoshi colour
    global.mountcolour = colour;
    
    //Carried item
    global.carrieditem = mouthholder;
    global.carriedsprite = mouthsprite;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Yoshi

//If yoshi is not being ridden
if (state != yoshistate.ridden) {

    //Set the shader
    pal_swap_set(pal_sprite, colour);
    
    //Draw it normally
    draw_sprite_ext(sprite_index, image_index, round(x), round(y), xscale, 1, 0, c_white, 1);
    
    //Reset shader
    pal_swap_reset();
    
    //Draw yoshi's wing
    if (mouthholder == obj_shell) 
    &amp;&amp; (instance_number(obj_tongue) == 0) {
    
        if (colour == 3)
        || (mouthsprite == spr_shell_blue) {
        
            if (state == yoshistate.idle)
                draw_sprite_ext(spr_koopa_wing, flyanim, round(x), round(y)+4, xscale, 1, 0, c_white, 1);
            else
                draw_sprite_ext(spr_koopa_wing, flyanim, round(x), round(y)+1, xscale, 1, 0, c_white, 1);
        }
    }
}

else if (state == yoshistate.ridden) {

    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //Set the shader
        pal_swap_set(pal_sprite, colour);
        
        //Draw Yoshi
        draw_sprite_ext(sprite_index, image_index, round(x), round(y), obj_playerparent.xscale, 1, 0, c_white, 1);
            
        //Reset shader
        pal_swap_reset();
        
        //Draw the player
        event_user(10);
        
        //Draw yoshi's wing
        if (mouthholder == obj_shell) 
        &amp;&amp; (instance_number(obj_tongue) == 0) {
        
            if (colour == 3)
            || (mouthsprite == spr_shell_blue)
                draw_sprite_ext(spr_koopa_wing, flyanim, round(x), round(y)+1+(3*obj_playerparent.crouch), obj_playerparent.xscale, 1, 0, c_white, 1);
        }
    }
    
    //Otherwise, if the player exists and it is warping through a pipe
    else if (instance_exists(obj_player_warp)) {
    
        //If the player is not moving vertically
        if (obj_player_warp.vspeed == 0) {
        
            //Set the shader
            if (colour &gt; 0) {
            
                pal_swap_set(pal_sprite, colour);
            }
            
            //Draw wings
            if (mouthholder == obj_shell) {
            
                if (colour == 3) 
                || (mouthsprite == spr_shell_blue) {
                
                    draw_sprite_ext(spr_koopa_wing, 0, round(x)+12, round(y), 1, 1, 0, c_white, 1);
                    draw_sprite_ext(spr_koopa_wing, 0, round(x)-12, round(y), -1, 1, 0, c_white, 1);
                }
            }
            
            //Draw yoshi
            draw_sprite_ext(sprite_index, image_index, round(x), round(y), obj_player_warp.image_xscale, 1, 0, c_white, 1);
            
            //Reset shader
            shader_reset();    
        }
        
        //Draw the player
        event_user(11);
        
        //If the player is moving vertically.
        if (obj_player_warp.vspeed != 0) {
        
            //Set the shader
            if (colour &gt; 0) {
            
                pal_swap_set(pal_sprite, colour);
            }
            
            //Draw yoshi
            draw_sprite_ext(sprite_index, image_index, round(x), round(y), obj_player_warp.image_xscale, 1, 0, c_white, 1);
            
            //Reset shader
            shader_reset();        
        }
    }
    
    //Otherwise, if the player exists and it is warping through a door
    else if (instance_exists(obj_player_door)) {
    
        //Set the shader
        if (colour &gt; 0) {
        
            pal_swap_set(pal_sprite, colour);
        }
        
        //Draw yoshi
        draw_sprite_ext(sprite_index, 0, round(x), round(y)+1, obj_player_door.image_xscale, 1, 0, c_white, 1);
        
        //Reset shader
        shader_reset();    
    
        //Draw the player
        event_user(12);
        
        //Draw yoshi's wing
        if (mouthholder == obj_shell) {
        
            if (colour == 3)
            || (mouthsprite == spr_shell_blue)
                draw_sprite_ext(spr_koopa_wing, 0, round(x), round(y)+1, obj_player_door.image_xscale, 1, 0, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
