<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warpnode</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp Node

/*
**  This item uses creation code!
**
**  myid = Warp ID
**  cannon = Is this a cannon pipe?
**      0: No
**      1: Yes, shoot right
**      -1: Yes, shoot left
*/

//Default values
myid = -1;
cannon = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shot the player like in a cannon

//Play 'Explosion' sound
audio_stop_play_sound(snd_explosion, 0, false);

//Create smoke particles based on cannon direcion
switch (cannon) {

    //Right
    case (1): {
    
        repeat (16) {
        
            with (instance_create(x, y, obj_smoke)) {
            
                sprite_index = spr_smoke_16;
                depth = 11;
                motion_set(random_range(60, 30), random(6));
            }
        }
    } break;
    
    //Left
    case (-1): {
    
        repeat (16) {
        
            with (instance_create(x, y, obj_smoke)) {
            
                sprite_index = spr_smoke_16;
                depth = 11;
                motion_set(random_range(150, 120), random(6));
            }
        }
    } break;
}

//Set up the player state
player.state = statetype.jump;

//Enable player gravity
player.alarm[7] = 32;

//Make the player run
player.pmeter = 112;
player.run = 1;

//Set player vertical speed
player.vspeed = -4;

//Set player horizontal speed
player.hspeed = 4*sign(cannon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy all player objects

with (obj_player_warp) instance_destroy();
with (obj_player_door) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a new player object

//If this ID is the same as the previous one
if (global.exit_id == myid) {
    
    //If the player warped from another room
    if (global.postchange != -1) {
    
        //Destroy player objects
        event_user(1);
        
        //Switch between warp types
        switch (global.postchange) {
        
            //Normal
            case (0): player_create(x, y); break;
            
            //Warp
            case (1): {
            
                //If the player is going to be shot with a cannon
                if (cannon != 0) {
                
                    //Create a player
                    player = player_create(x, y);
                    with (player) {
                    
                        gravity_enable = false;
                        xscale = other.cannon;
                        depth = 10;
                    }
                
                    //Blast off
                    alarm[0] = 32;
                    
                    //Put camera in position
                    if (instance_exists(obj_levelcontrol)) {
                    
                        obj_levelcontrol.x = x;
                        obj_levelcontrol.y = y;
                    }
                }
            
                //Otherwise, warp normally
                else {
                    
                    //Create a moving warp object
                    with (instance_create(x, y, obj_player_warp)) {
                        
                        //Direction
                        direction = global.exit_dir;
                        
                        //Disallow move
                        canmove = 0;
                        alarm[1] = 32;
                        
                        //Allow exit from pipe
                        ready = 1;                
                    }
                }
            } break;
        }
        
        //Reset warp
        global.postchange = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw ID

draw_sprite(sprite_index, image_index, round(x), round(y));
draw_text(x, y, myid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
