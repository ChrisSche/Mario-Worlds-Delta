<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lakitu_cloud</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rideable lakitu cloud

//Animate
image_speed = 0.1;

//Max. speed
movespeed = 1;

//Timer
timer = 0;

//Horizontal scale
xscale = 1;

//Whether the player is on the cloud
player_on = false;

//Whether the player can ride this cloud
can_on = true;

//Set destroy timers
set = false;

//Create a fake semisolid
mytop = instance_create(x-8, y+10, obj_semisolid_moving);
with (mytop)
    visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Force end cloud state on player

with (obj_playerparent) {

    //End cloud state
    oncloud = false;
    
    //Allow the player to jump
    if (jumping != 0)
        jumping = 2;
}

with (mytop) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

//Create poof of smoke
with (instance_create(x, y, obj_smoke)) {

    sprite_index = spr_lakitu_cloud_destroy;
    image_speed = 0.1;
    image_index = 0;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink

alarm[1] = 1;
image_alpha = !image_alpha;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow cloud ride

can_on = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player move along the cloud if riding

//If the player does exist
if (instance_exists(obj_playerparent)) {
    
    if (player_on == true) {
    
        obj_playerparent.x = x;
        obj_playerparent.y = y-6;
    }
}

mytop.x = x-8;
mytop.y = y+10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump onto Lakitu's cloud

//If the player does exist
if (instance_exists(obj_playerparent)) {
    
    //Check for the player
    if (collision_rectangle(bbox_left, bbox_top-2, bbox_right, bbox_bottom-2, obj_playerparent, 1, 0)) {
    
        //If the player is not on this cloud
        if (player_on == false)
        &amp;&amp; (can_on == true)
        &amp;&amp; (obj_playerparent.vspeed &gt; 0)
        &amp;&amp; (obj_playerparent.floatnow == 0)
        &amp;&amp; (obj_playerparent.state != statetype.climb) {
        
            //Force set 'Idle' state
            with (obj_playerparent) {
            
                //Set 'Idle' state
                state = statetype.idle;
                
                //Set oncloud state
                oncloud = true;
                
                //Stop
                vspeed = 0;
                gravity = 0;
            }
        
            //Player is now on this cloud
            player_on = true;
            
            //This cloud cannot be ridden
            can_on = false;
            
            //Set vertical speed
            vspeed = 0.5;
            
            //Start timers
            if (set == false) {
            
                set = true;
                alarm[0] = 30;
                alarm[1] = 540;
                alarm[2] = 720;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cloud Movement

//Check if the player exists
if (instance_exists(obj_playerparent)) {
    
    //If the player is on this cloud
    if (player_on == true) {
        
        //Force set player variables
        obj_playerparent.jumpstyle = 0;
        obj_playerparent.oncloud = 1;
        
        //If the player is climbing
        if (obj_playerparent.state == statetype.climb) {
        
            with (obj_playerparent) {
            
                oncloud = false;                
            }
            player_on = false;
            can_on = true;
        }
        
        //If 'Action 0' is pressed
        if (input_check_pressed(input.action0))
        || (input_check_pressed(input.action2)) {
        
            //If the player can jump
            if (obj_playerparent.jumping == 0) {
            
                //With the player
                with (obj_playerparent) {
            
                    oncloud = false;
                    jumping = 1;
                    y--;
                    vspeed = jumpstrength*-1;
                }
                
                //Set vertical speed
                vspeed = 0.5;
                
                //Dismount from the cloud
                player_on = false;
                
                //Allow mount
                can_on = true;
            }
        }
    }
    
    //Wall collision
    event_user(3);
}

//Movement
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

//If moving right and the NPC bumps a wall to the right
if (hspeed &gt; 0) 
&amp;&amp; ((collision_rectangle(bbox_right, bbox_top+5, bbox_right+1, bbox_bottom-4, obj_solid, 1, 0))
|| (collision_rectangle(bbox_right, bbox_top+5, bbox_right+1, bbox_bottom-4, obj_slope_steeper_r, 1, 0))) {
    
    //Stop horizontal movement
    hspeed = -hspeed;
    
    //Prevent the NPC from getting embed in the wall
    while (collision_rectangle(bbox_right, bbox_top+5, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x--;
}

//Otherwise, if moving left and the NPC bumps a wall to the left
else if (hspeed &lt; 0)
&amp;&amp; ((collision_rectangle(bbox_left-1, bbox_top+5, bbox_left, bbox_bottom-4, obj_solid, 1, 0))
|| (collision_rectangle(bbox_left-1, bbox_top+5, bbox_left, bbox_bottom-4, obj_slope_steeper_l, 1, 0))) {
    
    //Stop horizontal movement
    hspeed = -hspeed;
    
    //Prevent the NPC from getting embed in the wall
    while (collision_rectangle(bbox_left, bbox_top+5, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//If the player is on the cloud
if (player_on == true) 
&amp;&amp; (instance_exists(obj_playerparent)) {

    //Force set idle state
    obj_playerparent.state = statetype.idle;

    //If player controls are enabled
    if (obj_playerparent.control_enable == true) {
    
        //If 'Action 2' is pressed, move faster
        if (input_check(input.action1))
            spd_max = 2;
        else
            spd_max = 1;
            
        //Handle movement to the left
        if ((input_check(input.left)) &amp;&amp; (!input_check(input.right))) {
        
            //Set facing direction
            xscale = -1;
            
            //If there's no collision in position
            if (collision_rectangle(obj_playerparent.bbox_left, bbox_top+5, obj_playerparent.bbox_left, bbox_bottom-4, obj_solid, 1, 0))
            || (collision_rectangle(obj_playerparent.bbox_left, bbox_top+5, obj_playerparent.bbox_left, bbox_bottom-4, obj_solid_moving, 1, 0))
                hspeed = 0;
            else               
                hspeed += -0.1;               
        }
        
        //Otherwise, handle movement to the right
        else if ((input_check(input.right)) &amp;&amp; (!input_check(input.left))) {
                
            //Set facing direction
            xscale = 1;
            
            //If there's no collision in position
            if (collision_rectangle(obj_playerparent.bbox_right, bbox_top+5, obj_playerparent.bbox_right, bbox_bottom-4, obj_solid, 1, 0))
            || (collision_rectangle(obj_playerparent.bbox_right, bbox_top+5, obj_playerparent.bbox_right, bbox_bottom-4, obj_solid_moving, 1, 0))
                hspeed = 0;
            else               
                hspeed += 0.1;               
        } 
        
        //Otherwise, slow down
        else {
        
            //Slowdown
            hspeed = max(0, abs(hspeed) - 0.05) * sign(hspeed);
            
            //Stop at 0.05
            if (hspeed &lt; 0.05)
            &amp;&amp; (hspeed &gt; -0.05)
                hspeed = 0;
        }
        
        //Handle movement up
        if ((input_check(input.up)) &amp;&amp; (!input_check(input.down))) {
        
            //If there's no collision in position
            if (collision_rectangle(bbox_left, obj_playerparent.bbox_top-1, bbox_right, obj_playerparent.bbox_top, obj_solid, 1, 0))
            || (collision_rectangle(bbox_left, obj_playerparent.bbox_top-1, bbox_right, obj_playerparent.bbox_top, obj_solid_moving, 1, 0))
            || (collision_rectangle(bbox_left, obj_playerparent.bbox_top-1, bbox_right, obj_playerparent.bbox_top, obj_slopeparent_ceiling, 1, 0))
                vspeed = 0;
            else
                vspeed += -0.1;
        }
                    
        //Otherwise, handle movement down
        else if ((input_check(input.down)) &amp;&amp; (!input_check(input.up))) {
        
            //If there's no collision in position
            if (collision_rectangle(bbox_left, obj_playerparent.bbox_bottom-1, bbox_right, obj_playerparent.bbox_bottom+1, obj_semisolid, 1, 0))
            || (collision_rectangle(bbox_left, obj_playerparent.bbox_bottom-1, bbox_right, obj_playerparent.bbox_bottom+1, obj_slopeparent, 1, 0))
                vspeed = 0;
            else
                vspeed += 0.1;
        }
            
        //Otherwise, slow down
        else {
        
            //Slowdown
            vspeed = max(0, abs(vspeed) - 0.05) * sign(vspeed);
            
            //Stop at 0.05
            if (vspeed &lt; 0.05)
            &amp;&amp; (vspeed &gt; -0.05)
                vspeed = 0;
        }
        
        //Prevent hspeed from going over 2
        if (abs(hspeed) &gt; spd_max)
            hspeed = spd_max* sign(hspeed)
        
        //Prevent vspeed from going over 2
        if (abs(vspeed) &gt; spd_max)
            vspeed = spd_max* sign(vspeed)
    }
    else {
    
        //If the horizontal speed is not 0
        if (hspeed &lt;&gt; 0) {
        
            //Slow down
            hspeed = max(0, abs(hspeed) - 0.05) * sign(hspeed);
            
            //Stop at 0.05
            if (hspeed &lt; 0.05) 
            &amp;&amp; (hspeed &gt; -0.05)
                hspeed = 0
        }
        
        //If the vertical speed is not 0
        if (vspeed &lt;&gt; 0) {
        
            //Slowdown
            vspeed = max(0, abs(vspeed) - 0.05) * sign(vspeed);
            
            //Stop at 0.05
            if (vspeed &lt; 0.05) 
            &amp;&amp; (vspeed &gt; -0.05)
                vspeed = 0
        }
        
        //Prevent hspeed from going over 1
        if (abs(hspeed) &gt; 1)
            hspeed = 1* sign(hspeed)
        
        //Prevent vspeed from going over 1
        if (abs(vspeed) &gt; 1)
            vspeed = 1* sign(vspeed)               
    }
}

//Otherwise, slow down horizontally and vertically
else {

    //If the horizontal speed is not 0
    if (hspeed &lt;&gt; 0) {
    
        //Slow down
        hspeed = max(0, abs(hspeed) - 0.05) * sign(hspeed);
        
        //Stop at 0.05
        if (hspeed &lt; 0.05) 
        &amp;&amp; (hspeed &gt; -0.05)
            hspeed = 0
    }
    
    //If the vertical speed is not 0
    if (vspeed &lt;&gt; 0) {
    
        //Slowdown
        vspeed = max(0, abs(vspeed) - 0.05) * sign(vspeed);
        
        //Stop at 0.05
        if (vspeed &lt; 0.05) 
        &amp;&amp; (vspeed &gt; -0.05)
            vspeed = 0
    }
    
    //Prevent hspeed from going over 1
    if (abs(hspeed) &gt; 1)
        hspeed = 1* sign(hspeed)
    
    //Prevent vspeed from going over 1
    if (abs(vspeed) &gt; 1)
        vspeed = 1* sign(vspeed)    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw cloud

draw_sprite_ext(sprite_index, -1, round(x), round(y), xscale, 1, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
