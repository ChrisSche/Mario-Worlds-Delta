<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beachkoopa_blue_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blue Beach Koopa

//Inherit event from parent
event_inherited();

//How vulnerable is this enemy to items
vulnerable = 0;

//How vulnerable is this enemy to the player
stomp = 0;

//How vulnerable is this enemy to Yoshi
edible = 0;

//Whether this enemy is stunned
ready = 1;

//Death Sprite
deathsprite = spr_beachkoopa_blue_dead;

//Stomp sprite
stompsprite = spr_beachkoopa_blue_sq;

//Object it is holding
idd = noone;

//Kick State
kicky = 0;

//Animate
image_speed = 0.15;

//Start moving
alarm[10] = 2;

//Item contact values
boxl = -1;
boxr = 8;
boxt = -1;
boxb = -1;

//If the item is overlapping the koopa
initem = false;
dir = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards the player

//Deny, if stomped
if (sprite_index == stompsprite) then exit;

//If the koopa can move
if (ready &gt; 0) {

    //Check where the mouse is and move in that direction
    if (!instance_exists(obj_playerparent))
    || (obj_playerparent.x &lt; x)
        xscale = -1;
    else
        xscale = 1;
    
    //Set the speed
    hspeed = xscale;
    depth = -2;
    
    //Animate 
    image_speed = 0.15;

    //Set walking sprite
    if (sprite_index == spr_beachkoopa_blue)
        sprite_index = spr_beachkoopa_blue_walk;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kick object

//Deny, if stomped
if (sprite_index == stompsprite) then exit;

if (!initem) {
    
    //If idd isn't dectected as nothing
    if (idd != noone) {
    
        //Set the kick sprite
        sprite_index = spr_beachkoopa_blue_kick;
        
        //Play 'Kick' sound
        audio_play_sound(snd_kick, 0, false);        
        
        //Kick the special object
        if (idd.object_index == obj_shell || idd.object_index == obj_shell_kicked) {
        
            //Set shell parameters
            with (instance_create(idd.x, idd.y, obj_shell_kicked)) {
            
                hspeed = (1*other.xscale)*(2.7+(abs(other.hspeed)/4));
                sprite_index = other.idd.sprite_index;
                koopainside = other.idd.koopainside;
                flip =  other.idd.flip;
            }
            with (idd) instance_destroy();
        }
        //Otherwise if it's a normal object
        else event_user(8); //Kick event (long code)
    }
    
    //Go back to normal
    alarm[1] = 15;
}
else alarm[2] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Walk as usual

//Deny, if stomped
if (sprite_index == stompsprite) then exit;

//Set speed based on direction
hspeed = xscale;

//Animate
image_speed = 0.15;
sprite_index = spr_beachkoopa_blue_walk;

//Stop kick
kicky = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blue Beach Koopa logic

//Inherit event from parent
event_perform_object(obj_physicsparent, ev_step, 0);

//Turn at enemies script
event_user(2);

//Turn on ledges
if (ready == 2) &amp;&amp; (kicky == 0)
    event_user(6);

//TEMPORARY item contact box length
var l = 3;

//Sliding logic
if (ready == 0) {
    
    //If the koopa is about to stop
    if (hspeed &lt; 0.05) 
    &amp;&amp; (hspeed &gt; -0.05) {
        
        //Stop it
        hspeed = 0;
        
        //Allow movement
        ready = 1;
        
        //Start moving
        alarm[10] = 90;
    }
}

//Decelerate when sprite changes to sliding 
if (sprite_index == spr_beachkoopa_blue) 
    if (gravity == 0) then hspeed = max(0,abs(hspeed)-0.09)*sign(hspeed);
    
//If the koopa just came out from the shell, do not allow it to enter.
if (sprite_index == spr_beachkoopa_blue_walk)
&amp;&amp; (ready == 1)
&amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom-4, obj_shell, 0, 0))
    ready = 2;

//Otherwise, check for holdable items to kick
if (ready == 2) {
    
    //Check for an object
    var obj = collision_rectangle(x+(boxl*sign(xscale)), bbox_top+boxt, x+(boxr*sign(xscale)), bbox_bottom+boxb, obj_holdparent, 0, 0);
    var kicked = collision_rectangle(x+(boxl*sign(xscale)), bbox_top+boxt, x+(boxr*sign(xscale)), bbox_bottom+boxb, obj_shell_kicked, 0, 0);
    
    //If there's an object in position
    if (obj) 
    &amp;&amp; (obj.held == 0)
    &amp;&amp; (kicky == 0)
    &amp;&amp; (obj.sprite_height &lt; 17){
    
        //If object isn't moving at all
        if (obj.hspeed == 0) {
        
            //Kick state
            kicky = 1; //type 1, pause
            
            //Get object ID
            idd = obj.id;
            
            //Check for overlapping item
            if (collision_rectangle(bbox_left-2, bbox_top-4, bbox_right+2, bbox_bottom+4, idd, 0, 0)) { 
                
                if (collision_line(x, y, x+23*xscale, y, obj_solid, 0, 0)) {
                
                    //Make the koopa change position
                    initem = true;
                    dir = 1*sign(xscale);
                }
                else idd.x = x+12*xscale;
            }
            
            //Stop
            hspeed = 0;
            image_index = 1;
            image_speed = 0;
            
            //PUNT
            alarm[2] = 15;
        }
        
        //Otherwise, accelerate 
        else {
        
            //Get object ID
            idd = obj.id;
            
            //Check for overlapping item
            if (collision_rectangle(bbox_left-2, bbox_top-4, bbox_right+2, bbox_bottom+4, idd, 0, 0)) { 
                
                if (collision_line(x, y, x+23*xscale, y, obj_solid, 0, 0)) {
                
                    //Make the koopa change position
                    initem = true;
                    dir = 1*sign(xscale);
                }
                else idd.x = x+12*xscale;
            }
            
            //Stop
            hspeed = idd.hspeed;
            image_index = 1;
            image_speed = 0; 
            
            //Kick state
            kicky = 3; //type 3, weak force push
        } 
    }
    
    //If object is specifically a moving shell
    else if (kicked) 
    &amp;&amp; (kicky == 0)
    &amp;&amp; (kicked.sprite_height &lt; 17)
    &amp;&amp; (idd == noone) {
    
        //Get object ID
        idd = kicked.id;
        
        //Check for overlapping item
        if (collision_rectangle(bbox_left-2, bbox_top-4, bbox_right+2, bbox_bottom+4, idd, 0, 0)) { 
                
            if (collision_line(x, y, x+26*xscale, y, obj_solid, 0, 0)) {
            
                //Make the koopa change position
                initem = true;
                dir = 1*sign(xscale);
            }
            else idd.x = x+12*xscale;
        }
        
        //Stop
        hspeed = idd.hspeed;
        image_index = 1;
        image_speed = 0; 
        
        //Kick state
        kicky = 2; //type 2, force push
    }        
}

//Set facing direction
if (kicky == 0) {

    if (hspeed &gt; 0)
        xscale = 1;
    else if (hspeed &lt; 0)
        xscale = -1;   
}

//Get rid of id and be able to kick as soon as koopa kicks the object
if (idd != noone)
&amp;&amp; (!collision_rectangle(bbox_left-3, bbox_top-4, bbox_right+3, bbox_bottom+4, idd, 0, 0))
&amp;&amp; (kicky == 0 || kicky == 999) {

    //Remove ID
    idd = noone;
    
    //Free to kick anything else or the same object
    kicky = 0;
    
    //Animate, incase of a bug, remove if you feel like it
    image_speed = 0.15;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Holding logic

//If it lost track of the object
if ((!collision_rectangle(bbox_left-21,bbox_top-8,bbox_right+21,bbox_bottom+17,idd,1,0)) 
|| (idd.held == 1))
&amp;&amp; (idd) {

    //Remove ID
    idd = noone;
    
    //Walk as normal
    alarm[1] = 23;
    
    //Set funny sprite
    sprite_index = spr_beachkoopa_blue;
    
    //Exit event
    exit;
}

//Otherwise
if (idd != noone) {

    if (kicky == 2) {
        
        //Accelerate, if there is no gravity
        if (gravity == 0)
            hspeed +=0.13*xscale;
    
        //If it hits max speed
         if ((hspeed &gt; random_range(1.1,1.4) &amp;&amp; xscale == 1)
         || (hspeed &lt; -random_range(1.1,1.4) &amp;&amp; xscale == -1)) {
        
            //Stop
            hspeed = 0;
            
            //Kick
            alarm[2] = 15;
            
            //Change kick state 
            kicky = 999;
        } 
        
        //Dribble item
        if ((hspeed &gt;= 0 &amp;&amp; xscale == 1)
        || (hspeed &lt;= 0 &amp;&amp; xscale == -1)) &amp;&amp; (idd.gravity == 0)
           idd.vspeed = -1;
        
        //Drag shell
        idd.hspeed = hspeed;
    }
    
    //Gentle item handling
    if (kicky == 3) {
        
        //Accelerate, if there is no gravity
        if (gravity == 0)
            hspeed +=0.12*xscale;
    
        //If it hits max speed
         if ((hspeed &gt; random_range(0.9,1.1) &amp;&amp; xscale == 1)
         || (hspeed &lt; -random_range(1.1,1.1) &amp;&amp; xscale == -1)) {
        
            //Stop
            hspeed = 0;
            
            //Kick
            alarm[2] = 15;
            
            //Change kick state 
            kicky = 999;
        } 
        
        //Dribble item
        if ((hspeed &gt;= 0 &amp;&amp; xscale == 1)
        || (hspeed &lt;= 0 &amp;&amp; xscale == -1)) &amp;&amp; (idd.gravity == 0)
           idd.vspeed = -1;
        
        //Drag shell
        idd.hspeed = hspeed;
    }
    
    //Move away from item
    if (initem) { 
    
        //Shift pixels depending on direction it wants to go
        x -= 3*dir;
        
        //Declare initem false if koopa is no longer overlapping the held item
        //Declare in item false if koopa is no longer overlapping the held item
        if (!collision_rectangle(bbox_left, bbox_top-7, bbox_right, bbox_bottom+4, idd, 0, 0))
            initem = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shell_kicked">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with kicked shells

//Deny
if (collision_rectangle(x+(boxl*sign(xscale)), bbox_top+boxt, x+(boxr*sign(xscale)), bbox_bottom+boxb, other, 0, 0))
    exit;

//Inherit event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_holdparent_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with kicked shells

//Deny
if (collision_rectangle(x+(boxl*sign(xscale)), bbox_top+boxt, x+(boxr*sign(xscale)), bbox_bottom+boxb, other, 0, 0))
    exit;

//Inherit event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special player collision event

//If the player is invulnerable, exit
if (instance_exists(obj_invincibility))
exit;

//If stunned, defeat instantly
if (ready &lt; 2) {
    
    //If the player is sliding down a slope
    if (other.sliding == 1) {
    
        event_perform_object(obj_enemyparent, ev_collision, obj_killparent);
        exit;
    }
        
    //Otherwise
    else {
    
        //Play 'Kick' sound
        audio_play_sound(snd_kick, 0, false);
    
        //Create dead object
        with (instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_enemy_dead)) {
        
            sprite_index = other.deathsprite;
            image_xscale = other.xscale;
            vspeed = -4;
        }        
    }
    
    //Get 200 points
    with (instance_create(x-8,y,obj_score)) event_user(2);
    
    //Create spin thump
    instance_create(round(bbox_left+bbox_right)/2, round(bbox_top+bbox_bottom)/2, obj_spinthump);
    
    //Make the player visually kick the enemy
    with (other) event_user(4);
    
    //Destroy
    instance_destroy();
}

//Otherwise
else
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kick the item

//All events are ran by item
with (idd) {

    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom,obj_solid, 0, 0)) {

        //Item bounce
        vspeed = -1;
        
        //If the object is not on contact with a slope
        if (!collision_rectangle(x-2, bbox_bottom-4, x-2, bbox_bottom, obj_slopeparent, 1, 0))
            hspeed = (other.hspeed+3*other.xscale)/1.5;
            
        //Otherwise, do not apply horizontal speed
        else
            hspeed = 0.5*sign(other.xscale);
    }
    else
        inwall = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special wall collision

if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-5,obj_solid,1,0)))
|| ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-5,obj_solid,1,0))) {

    //Stop if being launched
    if (ready == 0)
        hspeed = 0;
    else
        hspeed = -hspeed;
    
    //Prevent getting embed on walls
    while (collision_rectangle(bbox_left, bbox_top+4, bbox_left, bbox_bottom-5,obj_solid,0,0))
        x++;
    while (collision_rectangle(bbox_left, bbox_top+4, bbox_right, bbox_bottom-5,obj_solid,0,0))
        x--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special turn at enemies script

//If not stunned
if (ready &lt; 2)
exit;
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw beachkoopa

draw_sprite_ext(sprite_index, -1, round(x), round(y)+1, xscale, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
