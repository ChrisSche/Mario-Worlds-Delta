<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tides</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tides, add it on your underwater stages.

/*
//  This item uses creation code.
//
//  push = Leave it to true to push the player when swimming.
*/

//Whether this can push Mario.
push = false;

//X position
xx = 0;

//Alpha
alpha = 0.2509803921568627;
alphaval = alpha/100;

//Whether this object has a target position
targety = y;

//Animate
image_speed = 0.1;
image_index = 1;

//Set depth
depth = -7;

//Make the tide rise/shrink
alarm[0] = 360;

//Create bubble effects
alarm[1] = 7;

//Create a water surface
water = instance_create(x, y+4, obj_swim);
with (water) {

    image_xscale = room_width;
    image_yscale = room_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create bubble effects

alarm[1] = 7;
if (push)
&amp;&amp; (instance_exists(obj_playerparent))
    instance_create(view_xview[0]+view_wview[0], random_range(y+16, room_height), obj_bubble_h);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move

//If not moving
if (vspeed == 0) {

    //If there's an up arrow in position
    if (collision_rectangle(bbox_left, y, bbox_right, y+15, obj_up, 0, 0))
        vspeed = -0.25;
        
    //Otherwise, if there's an down arrow
    else if (collision_rectangle(bbox_left, y, bbox_right, y+15, obj_down, 0, 0))
        vspeed = 0.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tides logic

//Update xx
xx--;

//If the water is changing it's position.
if (vspeed != 0) {

    //Stop if the player has died
    if (instance_exists(obj_player_dead)) {
    
        vspeed = 0;
        exit;
    }

    //If the water collides with a 'End' modifier.
    if (collision_rectangle(bbox_left, y, bbox_right, y+15, obj_endmarker, 0, 1)) {
    
        //Stop moving
        vspeed = 0;
        
        //Snap in grid
        move_snap(16,16);
        
        //Repeat again
        alarm[0] = 360;
    }
    
    //If the player does no longer exist, stop
    if (instance_exists(obj_player_warp))
    || (instance_exists(obj_player_dead))
        vspeed = 0;
}

//Depth
depth = -7;

//Update water position.
water.x = x;
water.y = y+4;

//Update position based on target
if (targety != ystart) {

    y = lerp(yprevious, targety, 0.025);
}

//Check for player
player = collision_rectangle(water.bbox_left, water.bbox_top, water.bbox_right, water.bbox_bottom,obj_playerparent,0,1);

//If player is overlapping this object and it's swimming.
if (player)
&amp;&amp; (player.swimming == true) 
&amp;&amp; (!instance_exists(obj_player_transform)) {

    //If this object can push
    if (push == true)
        if (!collision_rectangle(player.bbox_left-1, player.bbox_top+4, player.bbox_left, player.bbox_bottom-1, obj_solid, 1, 1))
            player.x -= 0.3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw tides

//Draw water
draw_sprite_tiled_area_ext(spr_tides, image_index, x+xx, y, x, y, x+room_width-1, y+15, c_white, image_alpha);

//Draw water body
draw_sprite_tiled_area_ext(spr_tides_bottom, image_index, x+xx, y+16, x, y+16, x+room_width-1, room_height-1, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
