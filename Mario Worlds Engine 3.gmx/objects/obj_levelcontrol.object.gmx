<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level controller

/*
**  This item uses creation code!
**
**  levelmusic = The level music. (Any sound resource you load in, check up obj_persistent Game Start event for a list of songs that you can use.)
**  leveltime = The time limit in seconds. (Optional)
*/

//Default values
levelmusic = 0;
leveltime = 0;

//Play music
if (global.pswitch == 0)
&amp;&amp; (global.starman == 0)
    alarm[0] = 2;

//Is music disabled?
musicdisable = false;

//Is the P-Switch active?
switchon = 0;

//Orientation
orientation = 1;

//Camera Y
camera_y = 0;
camera_timer = 30;

//Barrier
barrier = 0;
alarm[5] = 3;

//Fade in / fade out
ready = 0;

//Background alpha values
background_alpha[0] = 1;
background_alpha[1] = 0;

//Background blend values
background_blend[0] = c_purple;
background_blend[1] = c_purple;

//Create HUD
instance_create(0, 0, obj_hud);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable barrier

barrier = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play 'Hurry' sound

audio_play_sound(snd_hurry, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement the timer variable

//If there's time left
if (global.time &gt; 0) {

    //Decrement
    global.time--;
    
    //Decrement again after a second
    alarm[2] = 60;
    
    //If there's 101 seconds left, play 'Hurry' sound
    if (global.time == 101)
        alarm[3] = 60;
        
    //Otherwise, if there's 1 second left
    else if (global.time == 1)
        alarm[4] = 61;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music

audio_stop_sound(levelmusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music

//If not audio is playing and the music is not disabled and the pswitch theme is not playing
if (!audio_is_playing(levelmusic)) 
if (musicdisable == 0)
&amp;&amp; (switchon == 0)
    audio_play_sound(levelmusic, 1, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with music pitch

//Pause the music if 'Hurry' is being played
if (audio_is_playing(snd_hurry)) {

    //Pause 'levelmusic'
    if (audio_is_playing(levelmusic)) 
        audio_pause_sound(levelmusic);
    
    //Pause 'bgm_starman'
    else if (audio_is_playing(bgm_star))
        audio_pause_sound(bgm_star);
}

else {

    //Set pitch of music at 1.3
    if (global.time &gt; 0) 
    &amp;&amp; (global.time &lt; 101) {
        
        audio_sound_pitch(levelmusic, 1.13);
        audio_sound_pitch(bgm_star, 1.13); 
    }
    
    //Otherwise, set pitch to 1.0
    else {
    
        audio_sound_pitch(levelmusic, 1);
        audio_sound_pitch(bgm_star, 1);
    }

    //Resume 'levelmusic' if paused
    if (audio_is_paused(levelmusic)) 
        audio_resume_sound(levelmusic);
    
    //Resume 'bgm_starman' if paused
    else if (audio_is_paused(bgm_star))
        audio_resume_sound(bgm_star);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the background

if (ready == 0) {

    background_alpha[1] += 0.005;
    if (background_alpha[1] &gt; 0.3) {
    
        background_alpha[1] = 0.3;
        ready = 1;
    }
}
else if (ready == 1) {

    background_alpha[1] -= 0.005;
    if (background_alpha[1] &lt; 0) {
    
        background_alpha[1] = 0;
        ready = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic parameters

///Manage position of the camera

//If the player object exists, follow it
if (instance_exists(obj_playerparent)) {

    //If the player is moving to the left and the camera is panning to the right, make the camera pan to the left.
    if ((obj_playerparent.hspeed &lt; 0) || (obj_playerparent.x &lt; xprevious)) &amp;&amp; (obj_playerparent.x &lt; x-56)
        orientation = -1;
        
    //Otherwise, if the player is moving to the right and the camera is panning to the left, make the camera pan to the right.
    else if ((obj_playerparent.hspeed &gt; 0) || (obj_playerparent.x &gt; xprevious)) &amp;&amp; (obj_playerparent.x &gt; x+56)
        orientation = 1;
        
    //If the camera is at the right
    if (orientation == 1)
    &amp;&amp; (obj_playerparent.x &gt; x-33) {
    
        //Scroll at a certain speed until the camera catches up
        if (obj_playerparent.x &gt; x-29)
            x += 3+obj_playerparent.hspeed;
        else
            x = obj_playerparent.x+33;
    }
    
    //Otherwise, if the camera is at the left
    else if (orientation == -1) 
    &amp;&amp; (obj_playerparent.x &lt; x+33) {
    
        //Scroll at a certain speed until the camera catches up
        if (obj_playerparent.x &lt; x+29)
            x -= 3-obj_playerparent.hspeed;
        else
            x = obj_playerparent.x-33;
    }
    
    //Set camera vertical position
    event_user(0);
    
    //Stay relative to player's y position
    y = obj_playerparent.y+camera_y;
    
    //If the barrier is not enabled
    if (barrier == true) {
        
        //If the player is at the leftmost part of the view
        if (obj_playerparent.x &lt; view_xview[0]+8) {
        
            //If the cape object exists
            if (instance_exists(obj_cape_fly)) {
            
                obj_cape_fly.x = view_xview[0]+8;
                if (obj_cape_fly.hspeed &lt; 0)
                    obj_cape_fly.hspeed = 0;
            }
            
            //Prevent the player from getting outside the view
            obj_playerparent.x = view_xview[0]+8;
            if (obj_playerparent.hspeed &lt; 0)
                obj_playerparent.hspeed = 0;
        }
        
        //Otherwise, if the player is at the rightmost part of the view
        else if (obj_playerparent.x &gt; view_xview[0] + view_wview[0]-8) {
        
            //If the cape object exists
            if (instance_exists(obj_cape_fly)) {
            
                obj_cape_fly.x = view_xview[0] + view_wview[0]-8;
                if (obj_cape_fly.hspeed &gt; 0)
                    obj_cape_fly.hspeed = 0;                    
            }
            
            //Prevent the player from getting outside the view
            obj_playerparent.x = view_xview[0] + view_wview[0]-8;
            if (obj_playerparent.hspeed &gt; 0)
                obj_playerparent.hspeed = 0;    
        }
    }
}

//Otherwise, cancel camera y scroll
else {

    //Reset timer
    camera_timer = 60;
    
    //Return camera position
    if (camera_y &gt; 0)
        camera_y -= 4;
    else if (camera_y &lt; 0)
        camera_y += 4;
}

//Round position
x = round(x);
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop all music and fanfares

//Stop music instance
audio_stop_sound(levelmusic);

//Prevent it from playing
musicdisable = 1;

//Stop starman theme
audio_stop_sound(bgm_star);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adjust camera y position

//Make sure the player is not doing anything
if (obj_playerparent.state == statetype.idle) {
    
    //If the 'Up' key is pressed
    if (keyboard_check(global.key_u)) {
    
        camera_timer--;
        if (camera_timer &lt; 0) {
        
            camera_y -= 4;
            if (camera_y &lt; -64)
                camera_y = -64;
        }
    }
    
    //Otherwise, if the 'Down' key is pressed
    else if (keyboard_check(global.key_d)) {
    
        camera_timer--;
        if (camera_timer &lt; 0) {
        
            camera_y += 4;
            if (camera_y &gt; 64)
                camera_y = 64;
        }
    }
    
    //Otherwise, reset it
    else {
    
        //Reset timer
        camera_timer = 30;
        
        //Return camera position
        if (camera_y &gt; 0)
            camera_y -= 4;
        else if (camera_y &lt; 0)
            camera_y += 4;            
    }
}
else {

    //Reset timer
    camera_timer = 30;
    
    //Return camera position
    if (camera_y &gt; 0)
        camera_y -= 4;
    else if (camera_y &lt; 0)
        camera_y += 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario Start, checkpoints, and other stuff

//If the time is set to something, and was not set in a previous room, set it
if (leveltime &gt; 0) &amp;&amp; (global.time = 0)
    global.time = leveltime;

//If the timer was set, begin ticking
if (global.time &gt; 0)
    alarm[2] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with parallax backgrounds.

draw_background_tiled_horizontal_ext(background_index[0],view_xview[0]/2+(background_x[0]+background_hspeed[0]),background_y[0]+(view_yview[0]*(room_height-background_height[0])/(room_height-view_hview[0])),1,1,0,background_blend[0],background_alpha[0]);
draw_background_tiled_horizontal_ext(background_index[1],view_xview[0]/2+(background_x[1]+background_hspeed[1]),background_y[1]+(view_yview[0]*(room_height-background_height[1])/(room_height-view_hview[0])),1,1,0,background_blend[0],background_alpha[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
