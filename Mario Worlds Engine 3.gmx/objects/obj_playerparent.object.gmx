<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player's parent object

//Enable / disable gravity.
gravity_enable = true;

//Enable / disable control
control_enable = true;

//Handle player's state.
enum statetype {

    idle,
    walk,
    jump,
    climb
}
state = statetype.idle;
delay = 0;

//Handle player's facing direction.
//1:   Right
//-1:   Left
xscale = 1;

//Handle the player direction when stuck on a solid.
//1:    Right
//-1:   Left
direct = 1;
direct2 = 0;

//Make the player able to hold items, this also enables a special swimming behaviour.
holding = 0;

//Make the player able or not able to jump.
//0: Can Jump
//1: Jumping, can stop in midair
//2: Jumping, cannot stop in midair
jumping = 0;

//Make the player able to perform a spin-jump.
//0: No spin
//1: Spin
jumpstyle = 0;

//Makes the player able to run faster and fly if he has the cape feather.
run = false;

//Allow player to turn while moving
turnnow = false;

//Manages player movement if sliding
sliding = false;

//Manages player movement if swimming
swimming = false;

//Manages player movement if crouched down
crouch = false;

//Allows the player to fly if there's enough speed
pmeter = 0;

//Displays a kicking animation if you just kicked a item or a NPC.
kicking = false;

//Prevents damage on the player
invulnerable = false;

//Checks if the player is stuck on a solid surface
inwall = false;

//Displays a firing frame when shooting a projectile
firing = 0;

//Manage colours in the player object
isflashing = 0;

//Manage combos
hitcombo = 0;

//Check if the player is on a slippery surface
inice = 0;

//Maximum horizontal speed
hspeedmax = 1.5;

//Is the player on a sloped terrain?
slope = 0;

//Makes the player dive when holding an item underwater
dive = 0;

//Begin alarms
alarm[11] = 1;

//Call the following objects
instance_create(x, y, obj_camera);
instance_create(0, 0, obj_bound_top);
instance_create(0, 0, obj_bound_bottom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create eyecandy when certain conditions meet

//If the player is skidding, crouched or sliding down a slope
if (crouch == true) 
|| (sliding == true) 
|| (sprite_index == player_skid()) {

    //Make sure that the player is moving
    if (state == statetype.walk) {
    
        alarm[11] = 4;
        if (instance_number(obj_smoke) &lt; 3)
            instance_create(x, bbox_bottom, obj_smoke);
    }
    else
        alarm[11] = 1;
}

//Otherwise
else
    alarm[11] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End turning animation

turnnow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when invulnerable

if (invulnerable == true) {

    image_alpha = !image_alpha;
    alarm[1] = 1;
}
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End invulnerability

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Logic

//Check if above a slope
slope = player_inslope();

//If moving down
if (vspeed &gt; 0) {

    //Check for a semisolid ground
    var semisolid = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+vspeed, obj_semisolid, 1, 0);
    
    //If that ground exists and the player is above it...
    if (semisolid) 
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top+4, bbox_right, semisolid.y-1, obj_solid, 1, 0)) {
    
        //Snap above the platform
        y = semisolid.bbox_top-16;
        
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
}

//Embed the player into the slope if he is walking or sliding down to ensure correct slope physics
if (collision_rectangle(x-2, bbox_bottom+4, x+2, bbox_bottom+8, obj_slopeparent, 1, 0))
&amp;&amp; (!collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom-4, obj_slopeparent, 1, 0))
&amp;&amp; (state == statetype.walk) {

    y += 4;
    while (collision_rectangle(x, bbox_bottom+1, x, bbox_bottom+1, obj_semisolid, 0, 0))
        y--;
}

//Handle collision with slopes
if (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom, obj_slopeparent, 1, 0))
&amp;&amp; (!collision_rectangle(x-2, bbox_bottom-8, x+2, bbox_bottom-8, obj_slopeparent, 1, 0)) {

    //If moving down
    if (vspeed &gt; 0) {
    
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
    
    //Prevent the player from getting embed inside a slope
    if (vspeed &gt; -1)
        while (collision_rectangle(x-2, bbox_bottom-4, x+2, bbox_bottom, obj_slopeparent, 1, 0))
            y--;
}

//If the player is not swimming
if (swimming == 0) {

    //If the player is not sliding down a slope
    if (sliding == 0) {
    
        //If the player is not climbing
        if (state != statetype.climb) {
        
            //Perform default player physics
            player_behaviour();
            
            //Increment P-Meter
            player_meter();
        }
        
        //Otherwise, if the player is climbing
        else if (state == statetype.climb) {
        
            //Perform player climb physics
            player_behaviour_climb();
            
            //Stop running
            run = false;
            
            //Decrement P-Meter
            if (pmeter &gt; 0)
                pmeter--;
        }
    }
    
    //Otherwise, if the player is sliding down a slope
    else if (sliding == true) {
    
        //Perform player slide physics
        player_behaviour_slide();
        
        //Stop running
        run = false;
        
        //Decrement P-Meter
        if (pmeter &gt; 0)
            pmeter--;
    }
}

//Otherwise, if the player is swimming
else if (swimming == true) {

    //Perform player swim physics
    player_behaviour_swim();
    
    //Stop running
    run = false;
    
    //Decrement P-Meter
    if (pmeter &gt; 0)
        pmeter--;
}

//If moving right and the player bumps a wall to the right
if (hspeed &gt; 0) 
&amp;&amp; (collision_rectangle(bbox_right, bbox_top+4, bbox_right+1, bbox_bottom-4-(slope*4), obj_solid, 1, 0)) {
    
    //Stop horizontal movement
    hspeed = 0;
    
    //Prevent the player from getting embed in the wall
    while (collision_rectangle(bbox_right, bbox_top+4, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x--;
}

//Otherwise, if moving left and the player bumps a wall to the left
else if (hspeed &lt; 0)
&amp;&amp; (collision_rectangle(bbox_left-1, bbox_top+4, bbox_left, bbox_bottom-4-(slope*4), obj_solid, 1, 0)) {
    
    //Stop horizontal movement
    hspeed = 0;
    
    //Prevent the player from getting embed in the wall
    while (collision_rectangle(bbox_left, bbox_top+4, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
    &amp;&amp; (!collision_point(x, bbox_top+4, obj_solid, 0, 0))
        x++;
}

//If moving up...
if (vspeed &lt; 0) {

    //...and the player bumps a ceiling
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
    
        //If the player is jumping or climbing
        if (state == statetype.jump) 
        || (state == statetype.climb) {
        
            while ((collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_solid, 1, 0))
            || (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0)))
                y++;
        }
        
        //Stop vertical movement
        vspeed = 0;
        
        //If the player is not climbing
        if (state != statetype.climb) {
        
            //Play 'Bump' sound
            audio_play_sound(snd_bump, 0, false);
            
            //Stop variable jumping
            jumping = 2;
        }
    }
}

//Prevent the player from overlapping ceiling slopes
if (state == statetype.jump) 
|| (state == statetype.climb) {

    //While the player overlaps a slope
    while (collision_rectangle(bbox_left, bbox_top+1, bbox_right, bbox_top+1, obj_slopeparent_ceiling, 1, 0)) {
    
        //Move it down
        y++;
        
        //If moving up
        if (vspeed &lt; 0) {
        
            //Stop vertical movement
            vspeed = 0;
            
            //Play 'Bump' sound
            if (!audio_is_playing(snd_bump))
                audio_play_sound(snd_bump, 0, false);            
        }
    }            
}

//If the player is not climbing
if (state != statetype.climb) {

    //If the player is not jumping and the controls are not disabled
    if (control_enable == true)
    &amp;&amp; (sliding == false)
    &amp;&amp; (state != statetype.jump) {
    
        //Makes the player crouch down if 'Down' is held
        if (keyboard_check(global.key_d)) 
            crouch = true;
        
        //Otherwise, make the player get up
        else if (!keyboard_check(global.key_d))
            crouch = false;
    }
    
    //Manage player projectiles if 'Action 2' is pressed and the barrier is deactivated.
    if (keyboard_check_pressed(global.key_action[1])) &amp;&amp; (obj_camera.barrier == false)
        alarm[10] = 1;
}

//Otherwise, if the player is climbing
else if (state == statetype.climb) {

    //Disable ducking
    crouch = false;
    
    //Disable spin jump
    jumpstyle = false;
}

//Check for a swimming surface
var water = collision_rectangle(bbox_left, y-1, bbox_right, y, obj_swim, 0, 0);

//If there's a swimming surface
if (water) 
&amp;&amp; (swimming == false) {

    //Halve current horizontal speed
    hspeed = hspeed/2;
    
    //Make the player swim
    swimming = true;
    
    //Disable ducking
    crouch = false;
    
    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}

//Otherwise, if the player had enough swimming and wants to get out of water
else if (!water)
&amp;&amp; (swimming == true) {

    //If there's not a solid above
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
    &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_slopeparent_ceiling, 1, 0)) {
    
        //If the player is moving up
        if (vspeed &lt; 0)
        &amp;&amp; (state == statetype.jump) {
        
            //If 'Action 0' is being held
            if (keyboard_check(global.key_action[0])) {
            
                //Play 'Jump' sound
                audio_play_sound(snd_jump, 0, false);
                
                //Stop swimming
                swimming = false;
                
                //Allow variable jump
                jumping = 1;
                
                //Set vertical speed
                vspeed = -jumpstrength;
            }
            
            //Otherwise, stop vertical movement
            else {
            
                //If moving up
                if (vspeed &lt; 0)
                    vspeed = 0;
            }
        }
    }
}

//Free the player is he is stuck on a solid.
if (vspeed == 0)
&amp;&amp; (crouch == false) 
&amp;&amp; (mask_index == spr_mask_player_big) {
    
    //If the player gets stuck
    if (inwall == false)
    &amp;&amp; (collision_line(bbox_left, bbox_top+4, bbox_right, bbox_top+4,obj_solid,1,0)) {
    
        //If the direction was not set, set it up
        if (direct2 == 0) then direct2 = xscale;
        
        //Begin movement
        inwall = true;
        
        //Set the movement direction
        direct = -direct2;
    }
    
    //Otherwise, if the player gets stuck on a wall.
    else if (inwall == true) {
    
        //If the player is not longer stuck, allow movement
        if (!collision_line(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0)) 
        || (crouch == true) 
        || (global.powerup == cs_pow_small) {
        
            //End wall movement
            inwall = false;
            
            //Reset movement direction
            direct2 = 0;
        }
        
        //Push the player until it is not stuck
        x += 1*sign(direct);
        
        //If the player collides with a wall while being stuck, reverse direction
        if (collision_rectangle(bbox_left, y+4, bbox_left, bbox_bottom-1, obj_solid, 1, 0))
        || (collision_rectangle(bbox_right, y+4, bbox_right, bbox_bottom-1, obj_solid, 1, 0))
            direct = -direct;
    }
}

//Unstuck in case of overlapping a solid completely
if (inwall == false)
&amp;&amp; (state != statetype.jump)
    while (collision_rectangle(x-1, bbox_top, x+1, bbox_bottom, obj_solid, 1, 0))
        y--;
        
//If the player is not in contact with water.
if (!collision_rectangle(bbox_left, y, bbox_right, bbox_bottom, obj_swim, 0, 0))
&amp;&amp; (swimming == true)
    swimming = false;

//Prevent the player from going too high on the level
if (y &lt; -96)
    y = -96;
    
//Otherwise, if he is falling.
else {

    //If the player falls into a pit, restart the room
    if (bbox_bottom &gt; room_height+32)
        room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values

//Allow the player to jump again
jumping = 0;

//End spin jump
jumpstyle = 0;

//Reset combos when not sliding down a slope
if ((sliding == true) &amp;&amp; (hitcombo &gt; 0))
    hitcombo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hop when stomping a enemy
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt the player


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Set up palette
player_set_palette();

//Draw the player
draw_sprite_ext(sprite_index, -1, round(x), round(y)+1, xscale, 1, 0, c_white, image_alpha);

//Reset palette
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up fake holding pose

holding = !holding;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
