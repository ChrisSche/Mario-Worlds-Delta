<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player's parent object

//Enable / disable gravity.
gravity_enable = true;

//Enable / disable control
control_enable = true;

//Handle player's state.
enum statetype {

    idle,
    walk,
    jump,
    climb
}
state = statetype.idle;

//Handle player's facing direction.
//1:   Right
//-1:   Left
xscale = 1;

//Handle the player direction when stuck on a solid.
//1:    Right
//-1:   Left
direct = 1;
direct2 = 0;

//Make the player able to hold items, this also enables a special swimming behaviour.
holding = 0;

//Make the player able or not able to jump.
//0: Can Jump
//1: Jumping, can stop in midair
//2: Jumping, cannot stop in midair
jumping = 0;

//Make the player able to perform a spin-jump.
//0: No spin
//1: Spin
jumpstyle = 0;

//Makes the player able to run faster and fly if he has the cape feather.
run = 0;

//Allow player to turn while moving
skidnow = 0;
turnnow = 0;

//Manages player movement if swimming
swimming = 0;

//Manages player movement if crouched down
crouch = 0;

//Allows the player to fly if there's enough speed
pmeter = 0;

//Displays a kicking animation if you just kicked a item or a NPC.
kicking = 0;

//Prevents damage on the player
invulnerable = false;

//Checks if the player is stuck on a solid surface
inwall = 0;

//Displays a firing frame when shooting a projectile
firing = 0;

//Manage colours in the player object
isflashing = 0;

//Manage combos
hitcombo = 0;

//Call the following objects
instance_create(0, 0, obj_bound_top);
instance_create(0, 0, obj_bound_bottom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End turning animation

turnnow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when invulnerable

if (invulnerable == true) {

    image_alpha = !image_alpha;
    alarm[1] = 1;
}
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End invulnerability

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player logic

//Update Player's Physics
player_physics();

//If the player is not swimming
if (swimming == false) {

    //If the player is not sliding down a slope
    if (sliding == false) {
    
        //If the player is not climbing
        if (state != statetype.climb) {
        
            //Perform default player physics
            player_behaviour();
            
            //Increment P-Meter
            player_run();
        }
        
        //Otherwise, if the player is climbing
        else if (state == statetype.climb) {
        
            //Perform player climb physics
            player_behaviour_climb();
            
            //Stop running
            run = false;
            
            //Decrement P-Meter
            if (pmeter &gt; 0)
                pmeter--;
        }
    }
    
    //Otherwise, if the player is sliding down a slope
    else if (sliding == true) {
    
        //Perform player slide physics
        player_behaviour_slide();
        
        //Stop running
        run = false;
        
        //Decrement P-Meter
        if (pmeter &gt; 0)
            pmeter--;
    }
}

//Otherwise, if the player is swimming
else if (swimming == true) {

    //Perform player swim physics
    player_behaviour_swim();
    
    //Stop running
    run = false;
    
    //Decrement P-Meter
    if (pmeter &gt; 0)
        pmeter--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values

//Allow the player to jump again
jumping = 0;

//End spin jump
jumpstyle = 0;

//Reset combos when not sliding down a slope
if ((sliding == true) &amp;&amp; (hitcombo &gt; 0))
    hitcombo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
